# - DO NOT EDIT - FILE IS AUTOGENERATED

# NOTE: The docker:stable-dind service is not used here because --add-runtime=nvidia does not work from DIND and we need the
#       runtime to perform tests

# Important gitlab-runner considerations
#
# Docker buildx is used for multi-arch images builds. This feature is currently experimental and
# must be explicitly enabled on the docker daemon performing the image builds.
#
# To run multi-arch images on x86_64, qemu-user-static and systemd are required with the following configuration:
#
# $ cat /etc/binfmt.d/qemu-static.conf
# :qemu-aarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff:/usr/bin/qemu-aarch64-static:CF
# :qemu-ppc64le:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x15\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\x00:/usr/bin/qemu-ppc64le-static:CF
#
# < reboot or start systemd-binfmt.service >
#
# Check with:
#
# $ systemctl status systemd-binfmt.service
# < service should be started >
#
# $ docker run -it nvidia/cuda-ppc64le:11.0-base-ubuntu18.04-rc
# < container should run>

variables:
  # Need a value of two here for checking the manifest in the last commit
  GIT_DEPTH: "2"
  # If set to "true" this will force the prepare stage to run to build the builder images that contains docker buildx and python dependencies
  REBUILD_BUILDER: "false"

before_script:
  - source util.sh
  - if [[ ! -z ${RELEASE_LABEL} ]]; then
        export CUDA_VERSION=${RELEASE_LABEL};
    fi
  - 'echo "TRIGGER: ${KITMAKER}"'
  - 'echo "KITMAKER: ${KITMAKER}"'
  - 'echo "IMAGE_NAME: $IMAGE_NAME"'
  - 'echo "OS: $OS"'
  - 'echo "OS_VERSION: $OS_VERSION"'
  - 'echo "OS_NAME: $OS_NAME"'
  - 'echo "ARCH: $ARCH"'
  - 'echo "CUDA_VERSION: $CUDA_VERSION"'
  - 'echo "RELEASE_LABEL: $RELEASE_LABEL"' # used by kitmaker and cuda versions >= 11.2
  - 'echo "CUDNN_VERSION: $CUDNN_VERSION"'
  - 'echo "IMAGE_TAG_SUFFIX: $IMAGE_TAG_SUFFIX"'
  - 'echo "NO_OS_SUFFIX: $NO_OS_SUFFIX"'
  - 'echo "NO_CACHE: $NO_CACHE"'
  # Gitlab is used to stage images
  - retry 5 20 docker login -u "gitlab-ci-token" -p $CI_JOB_TOKEN gitlab-master.nvidia.com:5005
  # Login to NGC to pull images
  - retry 5 20 docker login -u '$oauthtoken' -p $NVCR_TOKEN nvcr.io;

.security_scan:
  image: gitlab-master.nvidia.com:5005/pstooling/pulse-group/pulse-container-scanner/pulse-cli:v2.0.0
  variables:
    PSS_SSA_ID: "x9thwm-cootr2q1jdv5p7b8iw4fs4ob3x6nqqsoznyk"
    PSS_SSA_SCOPE: "nspect.verify%20scan.anchore"
    SSA_ISSUER_URL: "https://${PSS_SSA_ID}.ssa.nvidia.com/token?grant_type=client_credentials&scope=${PSS_SSA_SCOPE}"
    IMAGE_ARCHIVE: "cuda-${CUDA_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}.tar"

stages:
  - prepare
  - trigger
  - cuda
  - cudnn
  - test
  - scan
  - deploy
  - cleanup_success
  - cleanup_failure

# builds the gitlab-cuda-builder image
prepare:
  image: docker:stable
  stage: prepare
  variables:
    IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder"
  script:
    - echo ">>>> PYPROJECT.TOML >>>>"
    - cat pyproject.toml
    - docker build -t gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder --cache-from gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder .
    - docker push gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  tags:
    - docker
  rules:
      - if: '$REBUILD_BUILDER == "true"'

.tags_template: &tags_definition
  tags:
    - docker

.tags_template_multiarch: &tags_definition_multiarch
  tags:
    - docker-multi-arch

# Only used for CUDA 8.0, will be removed once CUDA 8 support is dropped
.cuda_template_depricated: &cuda_definition_deprecated
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  stage: cuda
  script:
    - if [[ "${NO_OS_SUFFIX}" == "true" ]]; then
        export TAG_RUNTIME=" -t ${IMAGE_NAME}:${CUDA_VERSION}-runtime ";
        export TAG_DEVEL=" -t ${IMAGE_NAME}:${CUDA_VERSION}-devel ";
        export CUDA_TAGS="${CUDA_VERSION}-runtime ${CUDA_VERSION}-devel ";
      fi
    - export DIST_BASE_PATH="${DIST_BASE_PATH}/${OS//.}";
    - export PLATFORM_ARG=`printf '%s ' '--platform'; for var in $(echo $ARCHES | sed "s/,/ /g"); do printf 'linux/%s,' "$var"; done | sed 's/,*$//g'`
    - 'echo "PLATFORM_ARG: ${PLATFORM_ARG}"'
    # COPY the NGC DEEP LEARNING CONTAINER LICENSE
    - run_cmd cp -v ./NGC-DL-CONTAINER-LICENSE "${DIST_BASE_PATH}/runtime"
    - run_cmd retry 3 10 docker buildx create --use ${PLATFORM_ARG} --driver-opt image=moby/buildkit:v0.10.3 --name cuda
    - if [[ -z ${NO_CACHE} ]]; then export PLZ_CACHE="--cache-from=type=registry,ref=${IMAGE_NAME}:${CUDA_VERSION}-runtime-${OS}"; fi
    - run_cmd retry 3 10 docker buildx build --pull --push ${PLATFORM_ARG} -t "${IMAGE_NAME}:${CUDA_VERSION}-runtime-${OS}" ${TAG_RUNTIME}
                          --build-arg BUILDKIT_INLINE_CACHE=1 --progress plain
                          ${PLZ_CACHE} ${NO_CACHE:+"--no-cache"}
                          "${DIST_BASE_PATH}/runtime"
    - if [[ -z ${NO_CACHE} ]]; then export PLZ_CACHE="--cache-from=type=registry,ref=${IMAGE_NAME}:${CUDA_VERSION}-devel-${OS}"; fi
    - run_cmd retry 3 10 docker buildx build --pull --push ${PLATFORM_ARG} -t "${IMAGE_NAME}:${CUDA_VERSION}-devel-${OS}" ${TAG_DEVEL}
                          --build-arg "IMAGE_NAME=${IMAGE_NAME}"
                          --build-arg BUILDKIT_INLINE_CACHE=1 --progress plain
                          ${PLZ_CACHE} ${NO_CACHE:+"--no-cache"}
                          "${DIST_BASE_PATH}/devel"
    - 'echo "CUDA_TAGS=\"${CUDA_TAGS} ${CUDA_VERSION}-runtime-${OS} ${CUDA_VERSION}-devel-${OS}\"" >> tags.env'
    - cat tags.env
  artifacts:
    reports:
      dotenv: tags.env

.cuda_base_template: &cuda_base_definition
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  stage: cuda
  script:
    - |
      # How gitlab handles errors: https://gitlab.com/gitlab-org/gitlab-runner/-/issues/25394
      # prevent exit codes from killing the pipeline completely, errors must now be handled manually
      set +e
      if [[ "${NO_OS_SUFFIX}" == "true" ]]; then
        export TAG_BASE=" -t ${IMAGE_NAME}:${CUDA_VERSION}-base${IMAGE_TAG_SUFFIX} "
        export TAG_RUNTIME=" -t ${IMAGE_NAME}:${CUDA_VERSION}-runtime${IMAGE_TAG_SUFFIX} "
        export TAG_DEVEL=" -t ${IMAGE_NAME}:${CUDA_VERSION}-devel${IMAGE_TAG_SUFFIX} "
        export CUDA_TAGS="${CUDA_VERSION}-base${IMAGE_TAG_SUFFIX} ${CUDA_VERSION}-runtime${IMAGE_TAG_SUFFIX} ${CUDA_VERSION}-devel${IMAGE_TAG_SUFFIX} "
      fi
      export DIST_BASE_PATH="${DIST_BASE_PATH}/${OS//.}"
      if [ ! -z $KITMAKER ] && [ ! -z $TRIGGER ]; then
          export DIST_BASE_PATH="kitpick/${OS//.}"
          rm -rf kitpick || true
          run_cmd mkdir -p kitpick/${OS//.}/{devel,runtime,base}

          NEW_CANDIDATE_URL="${CANDIDATE_URL}/${OS/./}"
          # Ensure the url ends with a slash! This prevents wget from getting everything (and bringing apache to its knees)
          [[ "${NEW_CANDIDATE_URL}" != */ ]] && NEW_CANDIDATE_URL="${NEW_CANDIDATE_URL}/"
          echo "NEW_CANDIDATE_URL: ${NEW_CANDIDATE_URL}"

          if ! retry 3 10 run_cmd wget --no-verbose --recursive --directory-prefix="kitpick_dl" --reject="index.html*" --no-parent ${NEW_CANDIDATE_URL}; then
              echo "Could not download files from '${CANDIDATE_URL}'!!"
              # kitmaker_webhook_failed
              exit 1
          fi

          run_cmd cp -R kitpick_dl/${NEW_CANDIDATE_URL#"https://"}/{base,devel,runtime} ${DIST_BASE_PATH}/
          echo "Contents of ${DIST_BASE_PATH}/"
          find ${DIST_BASE_PATH}/
      fi
      export PLATFORM_ARG=`printf '%s ' '--platform'; for var in $(echo $ARCHES | sed "s/,/ /g"); do printf 'linux/%s,' "$var"; done | sed 's/,*$//g'`
      echo "PLATFORM_ARG: ${PLATFORM_ARG}"
      echo "DIST_BASE_PATH: ${DIST_BASE_PATH}"
      echo "TAG_BASE: ${TAG_BASE}"
      echo "TAG_RUNTIME: ${TAG_RUNTIME}"
      echo "TAG_DEVEL: ${TAG_DEVEL}"
      # COPY the NGC DEEP LEARNING CONTAINER LICENSE
      run_cmd cp -v ./NGC-DL-CONTAINER-LICENSE "${DIST_BASE_PATH}/base"
      # COPY the entrypoint scripts
      run_cmd cp -R entrypoint.d nvidia_entrypoint.sh ${DIST_BASE_PATH}/runtime/
      # --driver-opt flag is needed to workaround https://github.com/docker/buildx/issues/386
      if ! run_cmd retry 3 10 docker buildx create --use ${PLATFORM_ARG} --driver-opt image=moby/buildkit:v0.10.3 --name cuda; then
          echo "Failed creating buildx instance!"
          # kitmaker_webhook_failed
          exit 1
      fi
      echo "####################################################################"
      echo "BASE"
      echo "####################################################################"
      if [[ -z ${NO_CACHE} ]]; then export PLZ_CACHE="--cache-from=type=registry,ref=${IMAGE_NAME}:${CUDA_VERSION}-base-${OS}${IMAGE_TAG_SUFFIX}"; fi
      if ! run_cmd retry 3 10 docker buildx build --pull --push ${PLATFORM_ARG} -t "${IMAGE_NAME}:${CUDA_VERSION}-base-${OS}${IMAGE_TAG_SUFFIX}" ${TAG_BASE} \
                            --build-arg BUILDKIT_INLINE_CACHE=1 --progress plain \
                            ${PLZ_CACHE} ${NO_CACHE:+"--no-cache"} \
                            "${DIST_BASE_PATH}/base"; then
          echo "Failed building the base image!"
          # kitmaker_webhook_failed
          exit 1
      fi
      echo "####################################################################"
      echo "RUNTIME"
      echo "####################################################################"
      if [[ -z ${NO_CACHE} ]]; then export PLZ_CACHE="--cache-from=type=registry,ref=${IMAGE_NAME}:${CUDA_VERSION}-runtime-${OS}${IMAGE_TAG_SUFFIX}"; fi
      if ! run_cmd retry 3 10 docker buildx build --pull --push ${PLATFORM_ARG} -t "${IMAGE_NAME}:${CUDA_VERSION}-runtime-${OS}${IMAGE_TAG_SUFFIX}" ${TAG_RUNTIME} \
                            --build-arg "IMAGE_NAME=${IMAGE_NAME}" \
                            --build-arg BUILDKIT_INLINE_CACHE=1 --progress plain \
                            ${PLZ_CACHE} ${NO_CACHE:+"--no-cache"} \
                            "${DIST_BASE_PATH}/runtime"; then
          echo "Failed building the runtime image!"
          # kitmaker_webhook_failed
          exit 1
      fi
      echo "####################################################################"
      echo "DEVEL"
      echo "####################################################################"
      if [[ -z ${NO_CACHE} ]]; then export PLZ_CACHE="--cache-from=type=registry,ref=${IMAGE_NAME}:${CUDA_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}"; fi
      if ! run_cmd retry 3 10 docker buildx build --pull --push ${PLATFORM_ARG} -t "${IMAGE_NAME}:${CUDA_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}" ${TAG_DEVEL} \
                            --build-arg "IMAGE_NAME=${IMAGE_NAME}" \
                            --build-arg BUILDKIT_INLINE_CACHE=1 --progress plain \
                            ${PLZ_CACHE} ${NO_CACHE:+"--no-cache"} \
                            "${DIST_BASE_PATH}/devel"; then
          echo "Failed building the devel image!"
          # kitmaker_webhook_failed
          exit 1
      fi
      echo "CUDA_TAGS=\"${CUDA_TAGS} ${CUDA_VERSION}-base-${OS}${IMAGE_TAG_SUFFIX} ${CUDA_VERSION}-runtime-${OS}${IMAGE_TAG_SUFFIX} ${CUDA_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}\"" >> tags.env
      cat tags.env
  artifacts:
    reports:
      dotenv: tags.env

.cudnn_template: &cudnn_definition
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  stage: cudnn
  script:
    - |
      # no set +e necessary here since we don't use this yet for kitmaker builds
      DIST_BASE_PATH="${DIST_BASE_PATH}/${OS/./}";
      if [ ! -z $KITMAKER ] && [ ! -z $TRIGGER ]; then
          export DIST_BASE_PATH="kitpick/${OS/./}"
          rm -rf kitpick || true
          run_cmd mkdir -p kitpick/${OS/./}/{devel,runtime,base}
          NEW_CANDIDATE_URL="${CANDIDATE_URL}/${OS/./}"
          # Ensure the url ends with a slash! This prevents wget from getting everything (and bringing apache to its knees)
          [[ "${CANDIDATE_URL}" != */ ]] && NEW_CANDIDATE_URL="${NEW_CANDIDATE_URL}/"
          echo "NEW_CANDIDATE_URL: ${NEW_CANDIDATE_URL}"
          if ! retry 3 10 run_cmd wget --no-verbose --recursive --directory-prefix="kitpick_dl" --reject="index.html*" --no-parent ${NEW_CANDIDATE_URL}; then
              echo "Could not download files from '${CANDIDATE_URL}'!!"
              # kitmaker_webhook_failed
              exit 1
          fi
          run_cmd cp -R kitpick_dl/${NEW_CANDIDATE_URL#"https://"}/{base,devel,runtime} ${DIST_BASE_PATH}/
          echo "Contents of ${DIST_BASE_PATH}/"
          find kitpick/
          export CUDNN_VERSION="cudnn$(grep -r "CUDNN_VERSION" kitpick/ | head -n 1 | cut -f 3 -d" " | tr -d '[:space:]' | cut -c 1)"
      fi
      echo "DIST_BASE_PATH: ${DIST_BASE_PATH}"
      echo "CUDNN_VERSION: ${CUDNN_VERSION}"
      if [[ "${NO_OS_SUFFIX}" == "true" ]]; then
          TAG_CUDNN_RUNTIME=" -t ${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-runtime${IMAGE_TAG_SUFFIX} ";
          TAG_CUDNN_DEVEL=" -t ${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-devel${IMAGE_TAG_SUFFIX} ";
          export CUDA_EXTRA_TAGS="${CUDA_EXTRA_TAGS} ${CUDA_VERSION}-${CUDNN_VERSION}-runtime${IMAGE_TAG_SUFFIX} ${CUDA_VERSION}-${CUDNN_VERSION}-devel${IMAGE_TAG_SUFFIX}";
      fi
      export PLATFORM_ARG=`printf '%s ' '--platform'; for var in $(echo $ARCHES | sed "s/,/ /g"); do printf 'linux/%s,' "$var"; done | sed 's/,*$//g'`
      echo "PLATFORM_ARG: ${PLATFORM_ARG}"
      if ! run_cmd retry 3 10 docker buildx create --use ${PLATFORM_ARG} --driver-opt image=moby/buildkit:v0.10.3 --name cuda; then
          echo "Failed creating buildx instance!"
          # kitmaker_webhook_failed
          exit 1
      fi
      echo "####################################################################"
      echo "CUDNN RUNTIME"
      echo "####################################################################"
      if [[ -z ${NO_CACHE} ]]; then export PLZ_CACHE="--cache-from=type=registry,ref=${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-runtime-${OS}${IMAGE_TAG_SUFFIX}"; fi
      if ! run_cmd retry 3 10 docker buildx build --pull --push ${PLATFORM_ARG} -t "${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-runtime-${OS}${IMAGE_TAG_SUFFIX}" ${TAG_CUDNN_RUNTIME} \
                  --build-arg "IMAGE_NAME=${IMAGE_NAME}" \
                  --build-arg BUILDKIT_INLINE_CACHE=1 --progress plain \
                  ${PLZ_CACHE} ${NO_CACHE:+"--no-cache"} \
                  "${DIST_BASE_PATH}/runtime/${CUDNN_VERSION}"; then
          echo "Failed building the cudnn runtime image!"
          # kitmaker_webhook_failed
          exit 1
      fi
      echo "####################################################################"
      echo "CUDNN DEVEL"
      echo "####################################################################"
      if [[ -z ${NO_CACHE} ]]; then export PLZ_CACHE="--cache-from=type=registry,ref=${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}"; fi
      if ! run_cmd retry 3 10 docker buildx build --pull --push ${PLATFORM_ARG} -t "${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}" ${TAG_CUDNN_DEVEL} \
                  --build-arg "IMAGE_NAME=${IMAGE_NAME}" \
                  --build-arg BUILDKIT_INLINE_CACHE=1 --progress plain \
                  ${PLZ_CACHE} ${NO_CACHE:+"--no-cache"} \
                  "${DIST_BASE_PATH}/devel/${CUDNN_VERSION}"; then
          echo "Failed building the cudnn devel image!"
          # kitmaker_webhook_failed
          exit 1
      fi
      # this is not a great way to pass information between stages, but it is currently the only way
      echo "CUDA_TAGS=${CUDA_TAGS}" > cudnn_tags.env
      echo "CUDA_${CUDNN_VERSION}_TAGS=\"${CUDA_VERSION}-${CUDNN_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX} ${CUDA_VERSION}-${CUDNN_VERSION}-runtime-${OS}${IMAGE_TAG_SUFFIX}\"" >> cudnn_tags.env
      echo "CUDA_EXTRA_${CUDNN_VERSION}_TAGS=\"${CUDA_EXTRA_TAGS}\"" >> cudnn_tags.env
      cat cudnn_tags.env
  artifacts:
    reports:
      dotenv: cudnn_tags.env

.test_template: &test_definition
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  stage: test
  tags:
    - cuda-test
  script:
    - |
      set +e
      image=${IMAGE_NAME}:${CUDA_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}
      rmicmd="docker rmi -f ${image}"
      # prunecmd="docker image prune --filter=dangling=true -f"
      if ! bash -e ./test/scripts/bats_install.sh; then
          echo "ERROR: Could not install bats-core!"
          exit 1
      fi
      if ! bash -e ./test/scripts/run_tests.sh; then
          echo "ERROR: Tests failed!"
          ${rmicmd}
          exit 1
      fi
      ${rmicmd}

.scan_template: &scan_definition
  extends:
    - .security_scan
  stage: scan
  <<: *tags_definition
  script:
    - |
      docker pull ${IMAGE_NAME}:${CUDA_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}
      # saving docker image to archive to run the security scan against it in later steps
      docker save ${IMAGE_NAME}:${CUDA_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX} > ${IMAGE_ARCHIVE}
      docker rmi -f ${IMAGE_NAME}:${CUDA_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}

      echo "Connection request with Pulse Security Service using SSA..."

      AuthHeader=$(echo -n $SSA_CLIENT_ID:$SSA_CLIENT_SECRET | base64 | tr -d '\n')
      export SSA_TOKEN=$(curl --request POST --header "Authorization: Basic $AuthHeader" --header "Content-Type: application/x-www-form-urlencoded" ${SSA_ISSUER_URL} | jq ".access_token" |  tr -d '"')

      if [ -z "$SSA_TOKEN" ]; then
          exit 1;
      else
          echo "SSA Token has been set successfully!";
      fi

      pulse-cli -n $NSPECT_ID --ssa $SSA_TOKEN scan -i $IMAGE_ARCHIVE -o
      retval=$?

      echo "Pulse Scan return value: ${retval}"

      rm $IMAGE_ARCHIVE
      if [[ $retval -ne 0 ]]; then
          exit 1;
      fi
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - pulse-cli.log
      - licenses.json
      - sbom.json
      - vulns.json

.deploy_template: &deploy_definition
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  stage: deploy
  <<: *tags_definition
  script:
    - |
      set -x
      # How gitlab handles errors: https://gitlab.com/gitlab-org/gitlab-runner/-/issues/25394
      # prevent exit codes from killing the pipeline completely, errors must now be handled manually
      set +e
      if [[ -z ${TAG_MANIFEST_PATH} ]]; then export TAG_MANIFEST_PATH=TAG_MANIFEST; fi
      for tag in $(env | grep 'CUDA.*_TAGS' | cut -f2 -d=); do
          echo ${tag//\"} >> ${TAG_MANIFEST_PATH}
      done
      echo ">>> BEGIN ${TAG_MANIFEST_PATH} <<<"
      cat ${TAG_MANIFEST_PATH}
      echo ">>> END ${TAG_MANIFEST_PATH} <<<"
      if [ ! -z $KITMAKER ] && [ ! -z $TRIGGER ]; then
          manifest_file="manifest.yml"
          if ! retry 3 10 wget --no-verbose --directory-prefix="kitpick" --reject="index.html*" --no-parent ${CANDIDATE_URL}/${manifest_file}; then
              echo "Could not download files from '${CANDIDATE_URL}'!!"
              # kitmaker_webhook_failed
              exit 1
          fi
          export MANIFEST="kitpick/${manifest_file}";
      fi
      run_cmd skopeo --version
      if [[ "${CI_DEFAULT_BRANCH}" != "${CI_COMMIT_BRANCH}" ]]; then
          echo -e "\e[31m\e[1m>>>> WARNING <<<<\e[0m"
          echo -e "\e[31m\e[1m>>>> Push uses protected variables and the current branch (${CI_COMMIT_BRANCH}) IS NOT the default branch! (${CI_DEFAULT_BRANCH}) Failures may occur! <<<<\e[0m"
          echo -e "\e[31m\e[1m>>>> WARNING <<<<\e[0m"
      fi
      # TODO: switch to zippapp or pipx, this is just silly
      export PATH=$PATH:/root/.local/bin
      source /root/cuda_manager_env/bin/activate
      if ! run_cmd retry 3 10 poetry run ./manager.py ${MANIFEST:+`echo "--manifest ${MANIFEST}"`} push \
              --tag-manifest ${TAG_MANIFEST_PATH} \
              --image-name "${IMAGE_NAME}" \
              --os-name "${OS_NAME}" \
              ${OS_VERSION:+`echo "--os-version ${OS_VERSION}"`} \
              --cuda-version "${CUDA_VERSION}" \
              ${PIPELINE_NAME:+`echo "--pipeline-name ${PIPELINE_NAME}"`} \
              ${IMAGE_TAG_SUFFIX:+`echo "--tag-suffix ${IMAGE_TAG_SUFFIX}"`} ${NO_PUSH:+"-n"}; then
          echo "Error pushing images!"
          # kitmaker_webhook_failed
          exit 1
      fi
      cat $MANIFEST | grep ".*urm.nvidia.com\/sw-gpu-cuda-installer-docker-local\/" | cut -f2 -d: | head -n 1 | xargs >> ${TAG_MANIFEST_PATH}
      run_cmd cat ${TAG_MANIFEST_PATH}
      set +x
      # kitmaker_cleanup_webhook_success
  artifacts:
    paths:
      - ${TAG_MANIFEST_PATH}

trigger:
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  stage: trigger
  <<: *tags_definition
  variables:
    MANIFEST: "manifests/cuda.yaml"
  script:
    - echo CI_COMMIT_MESSAGE:$CI_COMMIT_MESSAGE
    - export ESC_TO=`echo $TRIGGER_OVERRIDE | sed 's/\ //g'`
    - export CMD="poetry run ./manager.py ${MANIFEST:+`echo --manifest ${MANIFEST}`} trigger ${TRIGGER_OVERRIDE:+`echo --trigger-override ${ESC_TO}`}"
    - 'echo "COMMAND: $CMD"'
    - source /root/cuda_manager_env/bin/activate
    - $CMD
  rules:
    - if: '$TRIGGER_OVERRIDE'

# Need to pass these from the trigger
.kitmaker_ubuntu2204_variables: &kitmaker_ubuntu2204_variables
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  OS: "ubuntu22.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "22.04"
  ARCHES: "arm64, x86_64"
  # CI_DEBUG_TRACE: "true"

.kitmaker_ubuntu2204_only: &kitmaker_ubuntu2204_only
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  variables:
    <<: *kitmaker_ubuntu2204_variables
    TAG_MANIFEST_PATH: "tag_manifest_ubuntu2204"
  rules:
    - if: '$TRIGGER == "true" && $KITMAKER == "true" && $FLAVOR == "default"'
    - if: $UBUNTU2204 == "true"

kitmaker_ubuntu22.04_base:
  <<: *cuda_base_definition
  <<: *kitmaker_ubuntu2204_only
  # Need to build container images on a multi-arch capable machine
  <<: *tags_definition_multiarch

kitmaker_ubuntu22.04_deploy:
  <<: *deploy_definition
  <<: *kitmaker_ubuntu2204_only
  <<: *tags_definition
  needs:
    - job: kitmaker_ubuntu22.04_base
      artifacts: true
  artifacts:
    paths:
      - tag_manifest_ubuntu2204


# Need to pass these from the trigger
.kitmaker_ubuntu2004_variables: &kitmaker_ubuntu2004_variables
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  ARCHES: "arm64, x86_64"
  # CI_DEBUG_TRACE: "true"

.kitmaker_ubuntu2004_only: &kitmaker_ubuntu2004_only
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  variables:
    <<: *kitmaker_ubuntu2004_variables
    TAG_MANIFEST_PATH: "tag_manifest_ubuntu2004"
  rules:
    - if: '$TRIGGER == "true" && $KITMAKER == "true" && $FLAVOR == "default"'
    - if: $UBUNTU2004 == "true"

kitmaker_ubuntu20.04_base:
  <<: *cuda_base_definition
  <<: *kitmaker_ubuntu2004_only
  # Need to build container images on a multi-arch capable machine
  <<: *tags_definition_multiarch

kitmaker_ubuntu20.04_deploy:
  <<: *deploy_definition
  <<: *kitmaker_ubuntu2004_only
  <<: *tags_definition
  needs:
    - job: kitmaker_ubuntu20.04_base
      artifacts: true
  artifacts:
    paths:
      - tag_manifest_ubuntu2004


# Need to pass these from the trigger
.kitmaker_ubi9_variables: &kitmaker_ubi9_variables
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  OS: "ubi9"
  OS_NAME: "ubi"
  OS_VERSION: "9"
  ARCHES: "x86_64, arm64"
  # CI_DEBUG_TRACE: "true"

.kitmaker_ubi9_only: &kitmaker_ubi9_only
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  variables:
    <<: *kitmaker_ubi9_variables
    TAG_MANIFEST_PATH: "tag_manifest_ubi9"
  rules:
    - if: '$TRIGGER == "true" && $KITMAKER == "true" && $FLAVOR == "default"'
    - if: $UBI9 == "true"

kitmaker_ubi9_base:
  <<: *cuda_base_definition
  <<: *kitmaker_ubi9_only
  # Need to build container images on a multi-arch capable machine
  <<: *tags_definition_multiarch

kitmaker_ubi9_deploy:
  <<: *deploy_definition
  <<: *kitmaker_ubi9_only
  <<: *tags_definition
  needs:
    - job: kitmaker_ubi9_base
      artifacts: true
  artifacts:
    paths:
      - tag_manifest_ubi9


# Need to pass these from the trigger
.kitmaker_rockylinux9_variables: &kitmaker_rockylinux9_variables
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  OS: "rockylinux9"
  OS_NAME: "rockylinux"
  OS_VERSION: "9"
  ARCHES: "x86_64, arm64"
  # CI_DEBUG_TRACE: "true"

.kitmaker_rockylinux9_only: &kitmaker_rockylinux9_only
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  variables:
    <<: *kitmaker_rockylinux9_variables
    TAG_MANIFEST_PATH: "tag_manifest_rockylinux9"
  rules:
    - if: '$TRIGGER == "true" && $KITMAKER == "true" && $FLAVOR == "default"'
    - if: $ROCKYLINUX9 == "true"

kitmaker_rockylinux9_base:
  <<: *cuda_base_definition
  <<: *kitmaker_rockylinux9_only
  # Need to build container images on a multi-arch capable machine
  <<: *tags_definition_multiarch

kitmaker_rockylinux9_deploy:
  <<: *deploy_definition
  <<: *kitmaker_rockylinux9_only
  <<: *tags_definition
  needs:
    - job: kitmaker_rockylinux9_base
      artifacts: true
  artifacts:
    paths:
      - tag_manifest_rockylinux9


# Need to pass these from the trigger
.kitmaker_ubi8_variables: &kitmaker_ubi8_variables
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  ARCHES: "x86_64, arm64"
  # CI_DEBUG_TRACE: "true"

.kitmaker_ubi8_only: &kitmaker_ubi8_only
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  variables:
    <<: *kitmaker_ubi8_variables
    TAG_MANIFEST_PATH: "tag_manifest_ubi8"
  rules:
    - if: '$TRIGGER == "true" && $KITMAKER == "true" && $FLAVOR == "default"'
    - if: $UBI8 == "true"

kitmaker_ubi8_base:
  <<: *cuda_base_definition
  <<: *kitmaker_ubi8_only
  # Need to build container images on a multi-arch capable machine
  <<: *tags_definition_multiarch

kitmaker_ubi8_deploy:
  <<: *deploy_definition
  <<: *kitmaker_ubi8_only
  <<: *tags_definition
  needs:
    - job: kitmaker_ubi8_base
      artifacts: true
  artifacts:
    paths:
      - tag_manifest_ubi8


# Need to pass these from the trigger
.kitmaker_rockylinux8_variables: &kitmaker_rockylinux8_variables
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  ARCHES: "x86_64, arm64"
  # CI_DEBUG_TRACE: "true"

.kitmaker_rockylinux8_only: &kitmaker_rockylinux8_only
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  variables:
    <<: *kitmaker_rockylinux8_variables
    TAG_MANIFEST_PATH: "tag_manifest_rockylinux8"
  rules:
    - if: '$TRIGGER == "true" && $KITMAKER == "true" && $FLAVOR == "default"'
    - if: $ROCKYLINUX8 == "true"

kitmaker_rockylinux8_base:
  <<: *cuda_base_definition
  <<: *kitmaker_rockylinux8_only
  # Need to build container images on a multi-arch capable machine
  <<: *tags_definition_multiarch

kitmaker_rockylinux8_deploy:
  <<: *deploy_definition
  <<: *kitmaker_rockylinux8_only
  <<: *tags_definition
  needs:
    - job: kitmaker_rockylinux8_base
      artifacts: true
  artifacts:
    paths:
      - tag_manifest_rockylinux8


# Need to pass these from the trigger
.kitmaker_l4t_jetson_variables: &kitmaker_l4t_jetson_variables
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/l4t-cuda"
  OS: "l4t"
  OS_NAME: "l4t"
  OS_VERSION: ""
  ARCHES: "arm64"
  FLAVOR: "jetson"
  # CI_DEBUG_TRACE: "true"

.kitmaker_l4t_jetson_only: &kitmaker_l4t_jetson_only
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  variables:
    <<: *kitmaker_l4t_jetson_variables
    TAG_MANIFEST_PATH: "tag_manifest_l4t_jetson"
  rules:
    - if: '$TRIGGER == "true" && $KITMAKER == "true" && $FLAVOR == "jetson"'

kitmaker_l4t_jetson_base:
  <<: *cuda_base_definition
  <<: *kitmaker_l4t_jetson_only
  # Need to build container images on a multi-arch capable machine
  <<: *tags_definition_multiarch

# L4T only, will be removed eventually!
kitmaker_l4t_jetson_cudnn:
  <<: *cudnn_definition
  <<: *kitmaker_l4t_jetson_only
  # Need to build container images on a multi-arch capable machine
  <<: *tags_definition_multiarch
  artifacts:
    reports:
      dotenv: cudnn_tags.env

kitmaker_l4t_jetson_deploy:
  <<: *deploy_definition
  <<: *kitmaker_l4t_jetson_only
  <<: *tags_definition
  needs:
    - job: kitmaker_l4t_jetson_base
      artifacts: true
    - job: kitmaker_l4t_jetson_cudnn
      optional: true
  artifacts:
    paths:
      - tag_manifest_l4t_jetson

kitmaker_l4t_jetson_success:
  stage: cleanup_success
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  <<: *tags_definition
  rules:
    - if: '$TRIGGER == "true" && $KITMAKER == "true" && $FLAVOR == "jetson"'
      when: on_success
  script:
    - |
      kitmaker_cleanup_webhook_success

kitmaker_l4t_jetson_failure:
  stage: cleanup_failure
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  <<: *tags_definition
  rules:
    - if: '$TRIGGER == "true" && $KITMAKER == "true" && $FLAVOR == "jetson"'
      when: on_failure
  script:
    - |
      kitmaker_webhook_failed


kitmaker_success:
  stage: cleanup_success
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  <<: *tags_definition
  rules:
    - if: '$TRIGGER == "true" && $KITMAKER == "true" && $FLAVOR == "default"'
      when: on_success
  needs:
  script:
    - |
      kitmaker_cleanup_webhook_success

kitmaker_failure:
  stage: cleanup_failure
  image: gitlab-master.nvidia.com:5005/cuda-installer/cuda/gitlab-cuda-builder
  <<: *tags_definition
  rules:
    - if: '$TRIGGER == "true" && $KITMAKER == "true" && $FLAVOR == "default"'
      when: on_failure
  script:
    - |
      kitmaker_webhook_failed


.centos7_12_3_2_variables: &centos7_12_3_2_variables
  DIST_BASE_PATH: "dist/12.3.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "12.3.2"

.centos7_12_3_2_only: &centos7_12_3_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_12_3_2_variables
  rules:
    - if: '$centos7_12_3_2 == "true"'
    - if: '$all == "true"'

centos7-v12.3.2:
  <<: *cuda_base_definition
  <<: *centos7_12_3_2_only

centos7-v12.3.2-cudnn9:
  <<: *cudnn_definition
  <<: *centos7_12_3_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_12_3_2_variables
    CUDNN_VERSION: "cudnn9"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v12.3.2
      artifacts: true

centos7-v12.3.2-test-x86_64:
  <<: *centos7_12_3_2_only
  <<: *test_definition
  variables:
    <<: *centos7_12_3_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.3.2
      artifacts: true
    - job: centos7-v12.3.2-cudnn9
      optional: true

centos7-v12.3.2-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_12_3_2_only
  needs:
    - job: centos7-v12.3.2
    - job: centos7-v12.3.2-test-x86_64
      optional: true
  variables:
    <<: *centos7_12_3_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_12_3_2 == "true"'
    - if: '$all == "true"'

centos7-v12.3.2-deploy:
  <<: *deploy_definition
  <<: *centos7_12_3_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.3.2
      artifacts: true
    - job: centos7-v12.3.2-cudnn9
      optional: true
    - job: centos7-v12.3.2-test-x86_64
      optional: true
    - job: centos7-v12.3.2-scan-x86_64
      optional: true


.rockylinux8_12_3_2_variables: &rockylinux8_12_3_2_variables
  DIST_BASE_PATH: "dist/12.3.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "12.3.2"

.rockylinux8_12_3_2_only: &rockylinux8_12_3_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_12_3_2_variables
  rules:
    - if: '$rockylinux8_12_3_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.3.2:
  <<: *cuda_base_definition
  <<: *rockylinux8_12_3_2_only

rockylinux8-v12.3.2-cudnn9:
  <<: *cudnn_definition
  <<: *rockylinux8_12_3_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_12_3_2_variables
    CUDNN_VERSION: "cudnn9"
    ARCHES: "arm64, x86_64"
  needs:
    - job: rockylinux8-v12.3.2
      artifacts: true

rockylinux8-v12.3.2-test-arm64:
  <<: *rockylinux8_12_3_2_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_3_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.3.2
      artifacts: true
    - job: rockylinux8-v12.3.2-cudnn9
      optional: true

rockylinux8-v12.3.2-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_12_3_2_only
  needs:
    - job: rockylinux8-v12.3.2
    - job: rockylinux8-v12.3.2-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_12_3_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_3_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.3.2-test-x86_64:
  <<: *rockylinux8_12_3_2_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_3_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.3.2
      artifacts: true
    - job: rockylinux8-v12.3.2-cudnn9
      optional: true

rockylinux8-v12.3.2-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_12_3_2_only
  needs:
    - job: rockylinux8-v12.3.2
    - job: rockylinux8-v12.3.2-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_12_3_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_3_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.3.2-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_12_3_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.3.2
      artifacts: true
    - job: rockylinux8-v12.3.2-cudnn9
      optional: true
    - job: rockylinux8-v12.3.2-test-arm64
      optional: true
    - job: rockylinux8-v12.3.2-scan-arm64
      optional: true
    - job: rockylinux8-v12.3.2-test-x86_64
      optional: true
    - job: rockylinux8-v12.3.2-scan-x86_64
      optional: true


.rockylinux9_12_3_2_variables: &rockylinux9_12_3_2_variables
  DIST_BASE_PATH: "dist/12.3.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux9"
  OS_NAME: "rockylinux"
  OS_VERSION: "9"
  CUDA_VERSION: "12.3.2"

.rockylinux9_12_3_2_only: &rockylinux9_12_3_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux9_12_3_2_variables
  rules:
    - if: '$rockylinux9_12_3_2 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.3.2:
  <<: *cuda_base_definition
  <<: *rockylinux9_12_3_2_only

rockylinux9-v12.3.2-cudnn9:
  <<: *cudnn_definition
  <<: *rockylinux9_12_3_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux9_12_3_2_variables
    CUDNN_VERSION: "cudnn9"
    ARCHES: "arm64, x86_64"
  needs:
    - job: rockylinux9-v12.3.2
      artifacts: true

rockylinux9-v12.3.2-test-arm64:
  <<: *rockylinux9_12_3_2_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_3_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.3.2
      artifacts: true
    - job: rockylinux9-v12.3.2-cudnn9
      optional: true

rockylinux9-v12.3.2-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux9_12_3_2_only
  needs:
    - job: rockylinux9-v12.3.2
    - job: rockylinux9-v12.3.2-test-arm64
      optional: true
  variables:
    <<: *rockylinux9_12_3_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_3_2 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.3.2-test-x86_64:
  <<: *rockylinux9_12_3_2_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_3_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.3.2
      artifacts: true
    - job: rockylinux9-v12.3.2-cudnn9
      optional: true

rockylinux9-v12.3.2-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux9_12_3_2_only
  needs:
    - job: rockylinux9-v12.3.2
    - job: rockylinux9-v12.3.2-test-x86_64
      optional: true
  variables:
    <<: *rockylinux9_12_3_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_3_2 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.3.2-deploy:
  <<: *deploy_definition
  <<: *rockylinux9_12_3_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux9_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.3.2
      artifacts: true
    - job: rockylinux9-v12.3.2-cudnn9
      optional: true
    - job: rockylinux9-v12.3.2-test-arm64
      optional: true
    - job: rockylinux9-v12.3.2-scan-arm64
      optional: true
    - job: rockylinux9-v12.3.2-test-x86_64
      optional: true
    - job: rockylinux9-v12.3.2-scan-x86_64
      optional: true


.ubi7_12_3_2_variables: &ubi7_12_3_2_variables
  DIST_BASE_PATH: "dist/12.3.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "12.3.2"

.ubi7_12_3_2_only: &ubi7_12_3_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_12_3_2_variables
  rules:
    - if: '$ubi7_12_3_2 == "true"'
    - if: '$all == "true"'

ubi7-v12.3.2:
  <<: *cuda_base_definition
  <<: *ubi7_12_3_2_only

ubi7-v12.3.2-cudnn9:
  <<: *cudnn_definition
  <<: *ubi7_12_3_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_12_3_2_variables
    CUDNN_VERSION: "cudnn9"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v12.3.2
      artifacts: true

ubi7-v12.3.2-test-x86_64:
  <<: *ubi7_12_3_2_only
  <<: *test_definition
  variables:
    <<: *ubi7_12_3_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.3.2
      artifacts: true
    - job: ubi7-v12.3.2-cudnn9
      optional: true

ubi7-v12.3.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_12_3_2_only
  needs:
    - job: ubi7-v12.3.2
    - job: ubi7-v12.3.2-test-x86_64
      optional: true
  variables:
    <<: *ubi7_12_3_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_3_2 == "true"'
    - if: '$all == "true"'

ubi7-v12.3.2-deploy:
  <<: *deploy_definition
  <<: *ubi7_12_3_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.3.2
      artifacts: true
    - job: ubi7-v12.3.2-cudnn9
      optional: true
    - job: ubi7-v12.3.2-test-x86_64
      optional: true
    - job: ubi7-v12.3.2-scan-x86_64
      optional: true


.ubi8_12_3_2_variables: &ubi8_12_3_2_variables
  DIST_BASE_PATH: "dist/12.3.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "12.3.2"

.ubi8_12_3_2_only: &ubi8_12_3_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_12_3_2_variables
  rules:
    - if: '$ubi8_12_3_2 == "true"'
    - if: '$all == "true"'

ubi8-v12.3.2:
  <<: *cuda_base_definition
  <<: *ubi8_12_3_2_only

ubi8-v12.3.2-cudnn9:
  <<: *cudnn_definition
  <<: *ubi8_12_3_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_12_3_2_variables
    CUDNN_VERSION: "cudnn9"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubi8-v12.3.2
      artifacts: true

ubi8-v12.3.2-test-arm64:
  <<: *ubi8_12_3_2_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_3_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.3.2
      artifacts: true
    - job: ubi8-v12.3.2-cudnn9
      optional: true

ubi8-v12.3.2-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_12_3_2_only
  needs:
    - job: ubi8-v12.3.2
    - job: ubi8-v12.3.2-test-arm64
      optional: true
  variables:
    <<: *ubi8_12_3_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_3_2 == "true"'
    - if: '$all == "true"'

ubi8-v12.3.2-test-x86_64:
  <<: *ubi8_12_3_2_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_3_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.3.2
      artifacts: true
    - job: ubi8-v12.3.2-cudnn9
      optional: true

ubi8-v12.3.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_12_3_2_only
  needs:
    - job: ubi8-v12.3.2
    - job: ubi8-v12.3.2-test-x86_64
      optional: true
  variables:
    <<: *ubi8_12_3_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_3_2 == "true"'
    - if: '$all == "true"'

ubi8-v12.3.2-deploy:
  <<: *deploy_definition
  <<: *ubi8_12_3_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.3.2
      artifacts: true
    - job: ubi8-v12.3.2-cudnn9
      optional: true
    - job: ubi8-v12.3.2-test-arm64
      optional: true
    - job: ubi8-v12.3.2-scan-arm64
      optional: true
    - job: ubi8-v12.3.2-test-x86_64
      optional: true
    - job: ubi8-v12.3.2-scan-x86_64
      optional: true


.ubi9_12_3_2_variables: &ubi9_12_3_2_variables
  DIST_BASE_PATH: "dist/12.3.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi9"
  OS_NAME: "ubi"
  OS_VERSION: "9"
  CUDA_VERSION: "12.3.2"

.ubi9_12_3_2_only: &ubi9_12_3_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi9_12_3_2_variables
  rules:
    - if: '$ubi9_12_3_2 == "true"'
    - if: '$all == "true"'

ubi9-v12.3.2:
  <<: *cuda_base_definition
  <<: *ubi9_12_3_2_only

ubi9-v12.3.2-cudnn9:
  <<: *cudnn_definition
  <<: *ubi9_12_3_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi9_12_3_2_variables
    CUDNN_VERSION: "cudnn9"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubi9-v12.3.2
      artifacts: true

ubi9-v12.3.2-test-arm64:
  <<: *ubi9_12_3_2_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_3_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.3.2
      artifacts: true
    - job: ubi9-v12.3.2-cudnn9
      optional: true

ubi9-v12.3.2-scan-arm64:
  <<: *scan_definition
  <<: *ubi9_12_3_2_only
  needs:
    - job: ubi9-v12.3.2
    - job: ubi9-v12.3.2-test-arm64
      optional: true
  variables:
    <<: *ubi9_12_3_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_3_2 == "true"'
    - if: '$all == "true"'

ubi9-v12.3.2-test-x86_64:
  <<: *ubi9_12_3_2_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_3_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.3.2
      artifacts: true
    - job: ubi9-v12.3.2-cudnn9
      optional: true

ubi9-v12.3.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubi9_12_3_2_only
  needs:
    - job: ubi9-v12.3.2
    - job: ubi9-v12.3.2-test-x86_64
      optional: true
  variables:
    <<: *ubi9_12_3_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_3_2 == "true"'
    - if: '$all == "true"'

ubi9-v12.3.2-deploy:
  <<: *deploy_definition
  <<: *ubi9_12_3_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi9_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.3.2
      artifacts: true
    - job: ubi9-v12.3.2-cudnn9
      optional: true
    - job: ubi9-v12.3.2-test-arm64
      optional: true
    - job: ubi9-v12.3.2-scan-arm64
      optional: true
    - job: ubi9-v12.3.2-test-x86_64
      optional: true
    - job: ubi9-v12.3.2-scan-x86_64
      optional: true


.ubuntu20_04_12_3_2_variables: &ubuntu20_04_12_3_2_variables
  DIST_BASE_PATH: "dist/12.3.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "12.3.2"

.ubuntu20_04_12_3_2_only: &ubuntu20_04_12_3_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_12_3_2_variables
  rules:
    - if: '$ubuntu20_04_12_3_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.3.2:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_12_3_2_only

ubuntu20.04-v12.3.2-cudnn9:
  <<: *cudnn_definition
  <<: *ubuntu20_04_12_3_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_12_3_2_variables
    CUDNN_VERSION: "cudnn9"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu20.04-v12.3.2
      artifacts: true

ubuntu20.04-v12.3.2-test-arm64:
  <<: *ubuntu20_04_12_3_2_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_3_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.3.2
      artifacts: true
    - job: ubuntu20.04-v12.3.2-cudnn9
      optional: true

ubuntu20.04-v12.3.2-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_3_2_only
  needs:
    - job: ubuntu20.04-v12.3.2
    - job: ubuntu20.04-v12.3.2-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_12_3_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_3_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.3.2-test-x86_64:
  <<: *ubuntu20_04_12_3_2_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_3_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.3.2
      artifacts: true
    - job: ubuntu20.04-v12.3.2-cudnn9
      optional: true

ubuntu20.04-v12.3.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_3_2_only
  needs:
    - job: ubuntu20.04-v12.3.2
    - job: ubuntu20.04-v12.3.2-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_12_3_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_3_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.3.2-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_12_3_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.3.2
      artifacts: true
    - job: ubuntu20.04-v12.3.2-cudnn9
      optional: true
    - job: ubuntu20.04-v12.3.2-test-arm64
      optional: true
    - job: ubuntu20.04-v12.3.2-scan-arm64
      optional: true
    - job: ubuntu20.04-v12.3.2-test-x86_64
      optional: true
    - job: ubuntu20.04-v12.3.2-scan-x86_64
      optional: true


.ubuntu22_04_12_3_2_variables: &ubuntu22_04_12_3_2_variables
  DIST_BASE_PATH: "dist/12.3.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu22.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "22.04"
  CUDA_VERSION: "12.3.2"

.ubuntu22_04_12_3_2_only: &ubuntu22_04_12_3_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu22_04_12_3_2_variables
  rules:
    - if: '$ubuntu22_04_12_3_2 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.3.2:
  <<: *cuda_base_definition
  <<: *ubuntu22_04_12_3_2_only

ubuntu22.04-v12.3.2-cudnn9:
  <<: *cudnn_definition
  <<: *ubuntu22_04_12_3_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu22_04_12_3_2_variables
    CUDNN_VERSION: "cudnn9"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu22.04-v12.3.2
      artifacts: true

ubuntu22.04-v12.3.2-test-arm64:
  <<: *ubuntu22_04_12_3_2_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_3_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.3.2
      artifacts: true
    - job: ubuntu22.04-v12.3.2-cudnn9
      optional: true

ubuntu22.04-v12.3.2-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_3_2_only
  needs:
    - job: ubuntu22.04-v12.3.2
    - job: ubuntu22.04-v12.3.2-test-arm64
      optional: true
  variables:
    <<: *ubuntu22_04_12_3_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_3_2 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.3.2-test-x86_64:
  <<: *ubuntu22_04_12_3_2_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_3_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.3.2
      artifacts: true
    - job: ubuntu22.04-v12.3.2-cudnn9
      optional: true

ubuntu22.04-v12.3.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_3_2_only
  needs:
    - job: ubuntu22.04-v12.3.2
    - job: ubuntu22.04-v12.3.2-test-x86_64
      optional: true
  variables:
    <<: *ubuntu22_04_12_3_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_3_2 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.3.2-deploy:
  <<: *deploy_definition
  <<: *ubuntu22_04_12_3_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu22_04_12_3_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.3.2
      artifacts: true
    - job: ubuntu22.04-v12.3.2-cudnn9
      optional: true
    - job: ubuntu22.04-v12.3.2-test-arm64
      optional: true
    - job: ubuntu22.04-v12.3.2-scan-arm64
      optional: true
    - job: ubuntu22.04-v12.3.2-test-x86_64
      optional: true
    - job: ubuntu22.04-v12.3.2-scan-x86_64
      optional: true


.centos7_12_3_1_variables: &centos7_12_3_1_variables
  DIST_BASE_PATH: "dist/12.3.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "12.3.1"

.centos7_12_3_1_only: &centos7_12_3_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_12_3_1_variables
  rules:
    - if: '$centos7_12_3_1 == "true"'
    - if: '$all == "true"'

centos7-v12.3.1:
  <<: *cuda_base_definition
  <<: *centos7_12_3_1_only

centos7-v12.3.1-test-x86_64:
  <<: *centos7_12_3_1_only
  <<: *test_definition
  variables:
    <<: *centos7_12_3_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.3.1
      artifacts: true

centos7-v12.3.1-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_12_3_1_only
  needs:
    - job: centos7-v12.3.1
    - job: centos7-v12.3.1-test-x86_64
      optional: true
  variables:
    <<: *centos7_12_3_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_12_3_1 == "true"'
    - if: '$all == "true"'

centos7-v12.3.1-deploy:
  <<: *deploy_definition
  <<: *centos7_12_3_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.3.1
      artifacts: true
    - job: centos7-v12.3.1-test-x86_64
      optional: true
    - job: centos7-v12.3.1-scan-x86_64
      optional: true


.rockylinux8_12_3_1_variables: &rockylinux8_12_3_1_variables
  DIST_BASE_PATH: "dist/12.3.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "12.3.1"

.rockylinux8_12_3_1_only: &rockylinux8_12_3_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_12_3_1_variables
  rules:
    - if: '$rockylinux8_12_3_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.3.1:
  <<: *cuda_base_definition
  <<: *rockylinux8_12_3_1_only

rockylinux8-v12.3.1-test-arm64:
  <<: *rockylinux8_12_3_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_3_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.3.1
      artifacts: true

rockylinux8-v12.3.1-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_12_3_1_only
  needs:
    - job: rockylinux8-v12.3.1
    - job: rockylinux8-v12.3.1-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_12_3_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_3_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.3.1-test-x86_64:
  <<: *rockylinux8_12_3_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_3_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.3.1
      artifacts: true

rockylinux8-v12.3.1-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_12_3_1_only
  needs:
    - job: rockylinux8-v12.3.1
    - job: rockylinux8-v12.3.1-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_12_3_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_3_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.3.1-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_12_3_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.3.1
      artifacts: true
    - job: rockylinux8-v12.3.1-test-arm64
      optional: true
    - job: rockylinux8-v12.3.1-scan-arm64
      optional: true
    - job: rockylinux8-v12.3.1-test-x86_64
      optional: true
    - job: rockylinux8-v12.3.1-scan-x86_64
      optional: true


.rockylinux9_12_3_1_variables: &rockylinux9_12_3_1_variables
  DIST_BASE_PATH: "dist/12.3.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux9"
  OS_NAME: "rockylinux"
  OS_VERSION: "9"
  CUDA_VERSION: "12.3.1"

.rockylinux9_12_3_1_only: &rockylinux9_12_3_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux9_12_3_1_variables
  rules:
    - if: '$rockylinux9_12_3_1 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.3.1:
  <<: *cuda_base_definition
  <<: *rockylinux9_12_3_1_only

rockylinux9-v12.3.1-test-arm64:
  <<: *rockylinux9_12_3_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_3_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.3.1
      artifacts: true

rockylinux9-v12.3.1-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux9_12_3_1_only
  needs:
    - job: rockylinux9-v12.3.1
    - job: rockylinux9-v12.3.1-test-arm64
      optional: true
  variables:
    <<: *rockylinux9_12_3_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_3_1 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.3.1-test-x86_64:
  <<: *rockylinux9_12_3_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_3_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.3.1
      artifacts: true

rockylinux9-v12.3.1-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux9_12_3_1_only
  needs:
    - job: rockylinux9-v12.3.1
    - job: rockylinux9-v12.3.1-test-x86_64
      optional: true
  variables:
    <<: *rockylinux9_12_3_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_3_1 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.3.1-deploy:
  <<: *deploy_definition
  <<: *rockylinux9_12_3_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux9_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.3.1
      artifacts: true
    - job: rockylinux9-v12.3.1-test-arm64
      optional: true
    - job: rockylinux9-v12.3.1-scan-arm64
      optional: true
    - job: rockylinux9-v12.3.1-test-x86_64
      optional: true
    - job: rockylinux9-v12.3.1-scan-x86_64
      optional: true


.ubi7_12_3_1_variables: &ubi7_12_3_1_variables
  DIST_BASE_PATH: "dist/12.3.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "12.3.1"

.ubi7_12_3_1_only: &ubi7_12_3_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_12_3_1_variables
  rules:
    - if: '$ubi7_12_3_1 == "true"'
    - if: '$all == "true"'

ubi7-v12.3.1:
  <<: *cuda_base_definition
  <<: *ubi7_12_3_1_only

ubi7-v12.3.1-test-x86_64:
  <<: *ubi7_12_3_1_only
  <<: *test_definition
  variables:
    <<: *ubi7_12_3_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.3.1
      artifacts: true

ubi7-v12.3.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_12_3_1_only
  needs:
    - job: ubi7-v12.3.1
    - job: ubi7-v12.3.1-test-x86_64
      optional: true
  variables:
    <<: *ubi7_12_3_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_3_1 == "true"'
    - if: '$all == "true"'

ubi7-v12.3.1-deploy:
  <<: *deploy_definition
  <<: *ubi7_12_3_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.3.1
      artifacts: true
    - job: ubi7-v12.3.1-test-x86_64
      optional: true
    - job: ubi7-v12.3.1-scan-x86_64
      optional: true


.ubi8_12_3_1_variables: &ubi8_12_3_1_variables
  DIST_BASE_PATH: "dist/12.3.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "12.3.1"

.ubi8_12_3_1_only: &ubi8_12_3_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_12_3_1_variables
  rules:
    - if: '$ubi8_12_3_1 == "true"'
    - if: '$all == "true"'

ubi8-v12.3.1:
  <<: *cuda_base_definition
  <<: *ubi8_12_3_1_only

ubi8-v12.3.1-test-arm64:
  <<: *ubi8_12_3_1_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_3_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.3.1
      artifacts: true

ubi8-v12.3.1-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_12_3_1_only
  needs:
    - job: ubi8-v12.3.1
    - job: ubi8-v12.3.1-test-arm64
      optional: true
  variables:
    <<: *ubi8_12_3_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_3_1 == "true"'
    - if: '$all == "true"'

ubi8-v12.3.1-test-x86_64:
  <<: *ubi8_12_3_1_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_3_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.3.1
      artifacts: true

ubi8-v12.3.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_12_3_1_only
  needs:
    - job: ubi8-v12.3.1
    - job: ubi8-v12.3.1-test-x86_64
      optional: true
  variables:
    <<: *ubi8_12_3_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_3_1 == "true"'
    - if: '$all == "true"'

ubi8-v12.3.1-deploy:
  <<: *deploy_definition
  <<: *ubi8_12_3_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.3.1
      artifacts: true
    - job: ubi8-v12.3.1-test-arm64
      optional: true
    - job: ubi8-v12.3.1-scan-arm64
      optional: true
    - job: ubi8-v12.3.1-test-x86_64
      optional: true
    - job: ubi8-v12.3.1-scan-x86_64
      optional: true


.ubi9_12_3_1_variables: &ubi9_12_3_1_variables
  DIST_BASE_PATH: "dist/12.3.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi9"
  OS_NAME: "ubi"
  OS_VERSION: "9"
  CUDA_VERSION: "12.3.1"

.ubi9_12_3_1_only: &ubi9_12_3_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi9_12_3_1_variables
  rules:
    - if: '$ubi9_12_3_1 == "true"'
    - if: '$all == "true"'

ubi9-v12.3.1:
  <<: *cuda_base_definition
  <<: *ubi9_12_3_1_only

ubi9-v12.3.1-test-arm64:
  <<: *ubi9_12_3_1_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_3_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.3.1
      artifacts: true

ubi9-v12.3.1-scan-arm64:
  <<: *scan_definition
  <<: *ubi9_12_3_1_only
  needs:
    - job: ubi9-v12.3.1
    - job: ubi9-v12.3.1-test-arm64
      optional: true
  variables:
    <<: *ubi9_12_3_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_3_1 == "true"'
    - if: '$all == "true"'

ubi9-v12.3.1-test-x86_64:
  <<: *ubi9_12_3_1_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_3_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.3.1
      artifacts: true

ubi9-v12.3.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi9_12_3_1_only
  needs:
    - job: ubi9-v12.3.1
    - job: ubi9-v12.3.1-test-x86_64
      optional: true
  variables:
    <<: *ubi9_12_3_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_3_1 == "true"'
    - if: '$all == "true"'

ubi9-v12.3.1-deploy:
  <<: *deploy_definition
  <<: *ubi9_12_3_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi9_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.3.1
      artifacts: true
    - job: ubi9-v12.3.1-test-arm64
      optional: true
    - job: ubi9-v12.3.1-scan-arm64
      optional: true
    - job: ubi9-v12.3.1-test-x86_64
      optional: true
    - job: ubi9-v12.3.1-scan-x86_64
      optional: true


.ubuntu20_04_12_3_1_variables: &ubuntu20_04_12_3_1_variables
  DIST_BASE_PATH: "dist/12.3.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "12.3.1"

.ubuntu20_04_12_3_1_only: &ubuntu20_04_12_3_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_12_3_1_variables
  rules:
    - if: '$ubuntu20_04_12_3_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.3.1:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_12_3_1_only

ubuntu20.04-v12.3.1-test-arm64:
  <<: *ubuntu20_04_12_3_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_3_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.3.1
      artifacts: true

ubuntu20.04-v12.3.1-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_3_1_only
  needs:
    - job: ubuntu20.04-v12.3.1
    - job: ubuntu20.04-v12.3.1-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_12_3_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_3_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.3.1-test-x86_64:
  <<: *ubuntu20_04_12_3_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_3_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.3.1
      artifacts: true

ubuntu20.04-v12.3.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_3_1_only
  needs:
    - job: ubuntu20.04-v12.3.1
    - job: ubuntu20.04-v12.3.1-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_12_3_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_3_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.3.1-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_12_3_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.3.1
      artifacts: true
    - job: ubuntu20.04-v12.3.1-test-arm64
      optional: true
    - job: ubuntu20.04-v12.3.1-scan-arm64
      optional: true
    - job: ubuntu20.04-v12.3.1-test-x86_64
      optional: true
    - job: ubuntu20.04-v12.3.1-scan-x86_64
      optional: true


.ubuntu22_04_12_3_1_variables: &ubuntu22_04_12_3_1_variables
  DIST_BASE_PATH: "dist/12.3.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu22.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "22.04"
  CUDA_VERSION: "12.3.1"

.ubuntu22_04_12_3_1_only: &ubuntu22_04_12_3_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu22_04_12_3_1_variables
  rules:
    - if: '$ubuntu22_04_12_3_1 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.3.1:
  <<: *cuda_base_definition
  <<: *ubuntu22_04_12_3_1_only

ubuntu22.04-v12.3.1-test-arm64:
  <<: *ubuntu22_04_12_3_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_3_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.3.1
      artifacts: true

ubuntu22.04-v12.3.1-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_3_1_only
  needs:
    - job: ubuntu22.04-v12.3.1
    - job: ubuntu22.04-v12.3.1-test-arm64
      optional: true
  variables:
    <<: *ubuntu22_04_12_3_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_3_1 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.3.1-test-x86_64:
  <<: *ubuntu22_04_12_3_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_3_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.3.1
      artifacts: true

ubuntu22.04-v12.3.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_3_1_only
  needs:
    - job: ubuntu22.04-v12.3.1
    - job: ubuntu22.04-v12.3.1-test-x86_64
      optional: true
  variables:
    <<: *ubuntu22_04_12_3_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_3_1 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.3.1-deploy:
  <<: *deploy_definition
  <<: *ubuntu22_04_12_3_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu22_04_12_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.3.1
      artifacts: true
    - job: ubuntu22.04-v12.3.1-test-arm64
      optional: true
    - job: ubuntu22.04-v12.3.1-scan-arm64
      optional: true
    - job: ubuntu22.04-v12.3.1-test-x86_64
      optional: true
    - job: ubuntu22.04-v12.3.1-scan-x86_64
      optional: true


.centos7_12_3_0_variables: &centos7_12_3_0_variables
  DIST_BASE_PATH: "dist/12.3.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "12.3.0"

.centos7_12_3_0_only: &centos7_12_3_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_12_3_0_variables
  rules:
    - if: '$centos7_12_3_0 == "true"'
    - if: '$all == "true"'

centos7-v12.3.0:
  <<: *cuda_base_definition
  <<: *centos7_12_3_0_only

centos7-v12.3.0-test-x86_64:
  <<: *centos7_12_3_0_only
  <<: *test_definition
  variables:
    <<: *centos7_12_3_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.3.0
      artifacts: true

centos7-v12.3.0-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_12_3_0_only
  needs:
    - job: centos7-v12.3.0
    - job: centos7-v12.3.0-test-x86_64
      optional: true
  variables:
    <<: *centos7_12_3_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_12_3_0 == "true"'
    - if: '$all == "true"'

centos7-v12.3.0-deploy:
  <<: *deploy_definition
  <<: *centos7_12_3_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.3.0
      artifacts: true
    - job: centos7-v12.3.0-test-x86_64
      optional: true
    - job: centos7-v12.3.0-scan-x86_64
      optional: true


.rockylinux8_12_3_0_variables: &rockylinux8_12_3_0_variables
  DIST_BASE_PATH: "dist/12.3.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "12.3.0"

.rockylinux8_12_3_0_only: &rockylinux8_12_3_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_12_3_0_variables
  rules:
    - if: '$rockylinux8_12_3_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.3.0:
  <<: *cuda_base_definition
  <<: *rockylinux8_12_3_0_only

rockylinux8-v12.3.0-test-arm64:
  <<: *rockylinux8_12_3_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_3_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.3.0
      artifacts: true

rockylinux8-v12.3.0-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_12_3_0_only
  needs:
    - job: rockylinux8-v12.3.0
    - job: rockylinux8-v12.3.0-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_12_3_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_3_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.3.0-test-x86_64:
  <<: *rockylinux8_12_3_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_3_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.3.0
      artifacts: true

rockylinux8-v12.3.0-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_12_3_0_only
  needs:
    - job: rockylinux8-v12.3.0
    - job: rockylinux8-v12.3.0-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_12_3_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_3_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.3.0-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_12_3_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.3.0
      artifacts: true
    - job: rockylinux8-v12.3.0-test-arm64
      optional: true
    - job: rockylinux8-v12.3.0-scan-arm64
      optional: true
    - job: rockylinux8-v12.3.0-test-x86_64
      optional: true
    - job: rockylinux8-v12.3.0-scan-x86_64
      optional: true


.rockylinux9_12_3_0_variables: &rockylinux9_12_3_0_variables
  DIST_BASE_PATH: "dist/12.3.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux9"
  OS_NAME: "rockylinux"
  OS_VERSION: "9"
  CUDA_VERSION: "12.3.0"

.rockylinux9_12_3_0_only: &rockylinux9_12_3_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux9_12_3_0_variables
  rules:
    - if: '$rockylinux9_12_3_0 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.3.0:
  <<: *cuda_base_definition
  <<: *rockylinux9_12_3_0_only

rockylinux9-v12.3.0-test-arm64:
  <<: *rockylinux9_12_3_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_3_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.3.0
      artifacts: true

rockylinux9-v12.3.0-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux9_12_3_0_only
  needs:
    - job: rockylinux9-v12.3.0
    - job: rockylinux9-v12.3.0-test-arm64
      optional: true
  variables:
    <<: *rockylinux9_12_3_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_3_0 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.3.0-test-x86_64:
  <<: *rockylinux9_12_3_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_3_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.3.0
      artifacts: true

rockylinux9-v12.3.0-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux9_12_3_0_only
  needs:
    - job: rockylinux9-v12.3.0
    - job: rockylinux9-v12.3.0-test-x86_64
      optional: true
  variables:
    <<: *rockylinux9_12_3_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_3_0 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.3.0-deploy:
  <<: *deploy_definition
  <<: *rockylinux9_12_3_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux9_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.3.0
      artifacts: true
    - job: rockylinux9-v12.3.0-test-arm64
      optional: true
    - job: rockylinux9-v12.3.0-scan-arm64
      optional: true
    - job: rockylinux9-v12.3.0-test-x86_64
      optional: true
    - job: rockylinux9-v12.3.0-scan-x86_64
      optional: true


.ubi7_12_3_0_variables: &ubi7_12_3_0_variables
  DIST_BASE_PATH: "dist/12.3.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "12.3.0"

.ubi7_12_3_0_only: &ubi7_12_3_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_12_3_0_variables
  rules:
    - if: '$ubi7_12_3_0 == "true"'
    - if: '$all == "true"'

ubi7-v12.3.0:
  <<: *cuda_base_definition
  <<: *ubi7_12_3_0_only

ubi7-v12.3.0-test-x86_64:
  <<: *ubi7_12_3_0_only
  <<: *test_definition
  variables:
    <<: *ubi7_12_3_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.3.0
      artifacts: true

ubi7-v12.3.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_12_3_0_only
  needs:
    - job: ubi7-v12.3.0
    - job: ubi7-v12.3.0-test-x86_64
      optional: true
  variables:
    <<: *ubi7_12_3_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_3_0 == "true"'
    - if: '$all == "true"'

ubi7-v12.3.0-deploy:
  <<: *deploy_definition
  <<: *ubi7_12_3_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.3.0
      artifacts: true
    - job: ubi7-v12.3.0-test-x86_64
      optional: true
    - job: ubi7-v12.3.0-scan-x86_64
      optional: true


.ubi8_12_3_0_variables: &ubi8_12_3_0_variables
  DIST_BASE_PATH: "dist/12.3.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "12.3.0"

.ubi8_12_3_0_only: &ubi8_12_3_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_12_3_0_variables
  rules:
    - if: '$ubi8_12_3_0 == "true"'
    - if: '$all == "true"'

ubi8-v12.3.0:
  <<: *cuda_base_definition
  <<: *ubi8_12_3_0_only

ubi8-v12.3.0-test-arm64:
  <<: *ubi8_12_3_0_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_3_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.3.0
      artifacts: true

ubi8-v12.3.0-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_12_3_0_only
  needs:
    - job: ubi8-v12.3.0
    - job: ubi8-v12.3.0-test-arm64
      optional: true
  variables:
    <<: *ubi8_12_3_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_3_0 == "true"'
    - if: '$all == "true"'

ubi8-v12.3.0-test-x86_64:
  <<: *ubi8_12_3_0_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_3_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.3.0
      artifacts: true

ubi8-v12.3.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_12_3_0_only
  needs:
    - job: ubi8-v12.3.0
    - job: ubi8-v12.3.0-test-x86_64
      optional: true
  variables:
    <<: *ubi8_12_3_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_3_0 == "true"'
    - if: '$all == "true"'

ubi8-v12.3.0-deploy:
  <<: *deploy_definition
  <<: *ubi8_12_3_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.3.0
      artifacts: true
    - job: ubi8-v12.3.0-test-arm64
      optional: true
    - job: ubi8-v12.3.0-scan-arm64
      optional: true
    - job: ubi8-v12.3.0-test-x86_64
      optional: true
    - job: ubi8-v12.3.0-scan-x86_64
      optional: true


.ubi9_12_3_0_variables: &ubi9_12_3_0_variables
  DIST_BASE_PATH: "dist/12.3.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi9"
  OS_NAME: "ubi"
  OS_VERSION: "9"
  CUDA_VERSION: "12.3.0"

.ubi9_12_3_0_only: &ubi9_12_3_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi9_12_3_0_variables
  rules:
    - if: '$ubi9_12_3_0 == "true"'
    - if: '$all == "true"'

ubi9-v12.3.0:
  <<: *cuda_base_definition
  <<: *ubi9_12_3_0_only

ubi9-v12.3.0-test-arm64:
  <<: *ubi9_12_3_0_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_3_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.3.0
      artifacts: true

ubi9-v12.3.0-scan-arm64:
  <<: *scan_definition
  <<: *ubi9_12_3_0_only
  needs:
    - job: ubi9-v12.3.0
    - job: ubi9-v12.3.0-test-arm64
      optional: true
  variables:
    <<: *ubi9_12_3_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_3_0 == "true"'
    - if: '$all == "true"'

ubi9-v12.3.0-test-x86_64:
  <<: *ubi9_12_3_0_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_3_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.3.0
      artifacts: true

ubi9-v12.3.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubi9_12_3_0_only
  needs:
    - job: ubi9-v12.3.0
    - job: ubi9-v12.3.0-test-x86_64
      optional: true
  variables:
    <<: *ubi9_12_3_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_3_0 == "true"'
    - if: '$all == "true"'

ubi9-v12.3.0-deploy:
  <<: *deploy_definition
  <<: *ubi9_12_3_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi9_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.3.0
      artifacts: true
    - job: ubi9-v12.3.0-test-arm64
      optional: true
    - job: ubi9-v12.3.0-scan-arm64
      optional: true
    - job: ubi9-v12.3.0-test-x86_64
      optional: true
    - job: ubi9-v12.3.0-scan-x86_64
      optional: true


.ubuntu20_04_12_3_0_variables: &ubuntu20_04_12_3_0_variables
  DIST_BASE_PATH: "dist/12.3.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "12.3.0"

.ubuntu20_04_12_3_0_only: &ubuntu20_04_12_3_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_12_3_0_variables
  rules:
    - if: '$ubuntu20_04_12_3_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.3.0:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_12_3_0_only

ubuntu20.04-v12.3.0-test-arm64:
  <<: *ubuntu20_04_12_3_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_3_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.3.0
      artifacts: true

ubuntu20.04-v12.3.0-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_3_0_only
  needs:
    - job: ubuntu20.04-v12.3.0
    - job: ubuntu20.04-v12.3.0-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_12_3_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_3_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.3.0-test-x86_64:
  <<: *ubuntu20_04_12_3_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_3_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.3.0
      artifacts: true

ubuntu20.04-v12.3.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_3_0_only
  needs:
    - job: ubuntu20.04-v12.3.0
    - job: ubuntu20.04-v12.3.0-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_12_3_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_3_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.3.0-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_12_3_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.3.0
      artifacts: true
    - job: ubuntu20.04-v12.3.0-test-arm64
      optional: true
    - job: ubuntu20.04-v12.3.0-scan-arm64
      optional: true
    - job: ubuntu20.04-v12.3.0-test-x86_64
      optional: true
    - job: ubuntu20.04-v12.3.0-scan-x86_64
      optional: true


.ubuntu22_04_12_3_0_variables: &ubuntu22_04_12_3_0_variables
  DIST_BASE_PATH: "dist/12.3.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda/release-candidate/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu22.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "22.04"
  CUDA_VERSION: "12.3.0"

.ubuntu22_04_12_3_0_only: &ubuntu22_04_12_3_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu22_04_12_3_0_variables
  rules:
    - if: '$ubuntu22_04_12_3_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.3.0:
  <<: *cuda_base_definition
  <<: *ubuntu22_04_12_3_0_only

ubuntu22.04-v12.3.0-test-arm64:
  <<: *ubuntu22_04_12_3_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_3_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.3.0
      artifacts: true

ubuntu22.04-v12.3.0-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_3_0_only
  needs:
    - job: ubuntu22.04-v12.3.0
    - job: ubuntu22.04-v12.3.0-test-arm64
      optional: true
  variables:
    <<: *ubuntu22_04_12_3_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_3_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.3.0-test-x86_64:
  <<: *ubuntu22_04_12_3_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_3_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.3.0
      artifacts: true

ubuntu22.04-v12.3.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_3_0_only
  needs:
    - job: ubuntu22.04-v12.3.0
    - job: ubuntu22.04-v12.3.0-test-x86_64
      optional: true
  variables:
    <<: *ubuntu22_04_12_3_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_3_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.3.0-deploy:
  <<: *deploy_definition
  <<: *ubuntu22_04_12_3_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu22_04_12_3_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.3.0
      artifacts: true
    - job: ubuntu22.04-v12.3.0-test-arm64
      optional: true
    - job: ubuntu22.04-v12.3.0-scan-arm64
      optional: true
    - job: ubuntu22.04-v12.3.0-test-x86_64
      optional: true
    - job: ubuntu22.04-v12.3.0-scan-x86_64
      optional: true


.centos7_12_2_2_variables: &centos7_12_2_2_variables
  DIST_BASE_PATH: "dist/12.2.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "12.2.2"

.centos7_12_2_2_only: &centos7_12_2_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_12_2_2_variables
  rules:
    - if: '$centos7_12_2_2 == "true"'
    - if: '$all == "true"'

centos7-v12.2.2:
  <<: *cuda_base_definition
  <<: *centos7_12_2_2_only

centos7-v12.2.2-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_12_2_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_12_2_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v12.2.2
      artifacts: true

centos7-v12.2.2-test-x86_64:
  <<: *centos7_12_2_2_only
  <<: *test_definition
  variables:
    <<: *centos7_12_2_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.2.2
      artifacts: true
    - job: centos7-v12.2.2-cudnn8
      optional: true

centos7-v12.2.2-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_12_2_2_only
  needs:
    - job: centos7-v12.2.2
    - job: centos7-v12.2.2-test-x86_64
      optional: true
  variables:
    <<: *centos7_12_2_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_12_2_2 == "true"'
    - if: '$all == "true"'

centos7-v12.2.2-deploy:
  <<: *deploy_definition
  <<: *centos7_12_2_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.2.2
      artifacts: true
    - job: centos7-v12.2.2-cudnn8
      optional: true
    - job: centos7-v12.2.2-test-x86_64
      optional: true
    - job: centos7-v12.2.2-scan-x86_64
      optional: true


.rockylinux8_12_2_2_variables: &rockylinux8_12_2_2_variables
  DIST_BASE_PATH: "dist/12.2.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "12.2.2"

.rockylinux8_12_2_2_only: &rockylinux8_12_2_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_12_2_2_variables
  rules:
    - if: '$rockylinux8_12_2_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.2.2:
  <<: *cuda_base_definition
  <<: *rockylinux8_12_2_2_only

rockylinux8-v12.2.2-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_12_2_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_12_2_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: rockylinux8-v12.2.2
      artifacts: true

rockylinux8-v12.2.2-test-arm64:
  <<: *rockylinux8_12_2_2_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_2_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.2.2
      artifacts: true
    - job: rockylinux8-v12.2.2-cudnn8
      optional: true

rockylinux8-v12.2.2-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_12_2_2_only
  needs:
    - job: rockylinux8-v12.2.2
    - job: rockylinux8-v12.2.2-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_12_2_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_2_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.2.2-test-x86_64:
  <<: *rockylinux8_12_2_2_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_2_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.2.2
      artifacts: true
    - job: rockylinux8-v12.2.2-cudnn8
      optional: true

rockylinux8-v12.2.2-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_12_2_2_only
  needs:
    - job: rockylinux8-v12.2.2
    - job: rockylinux8-v12.2.2-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_12_2_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_2_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.2.2-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_12_2_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.2.2
      artifacts: true
    - job: rockylinux8-v12.2.2-cudnn8
      optional: true
    - job: rockylinux8-v12.2.2-test-arm64
      optional: true
    - job: rockylinux8-v12.2.2-scan-arm64
      optional: true
    - job: rockylinux8-v12.2.2-test-x86_64
      optional: true
    - job: rockylinux8-v12.2.2-scan-x86_64
      optional: true


.rockylinux9_12_2_2_variables: &rockylinux9_12_2_2_variables
  DIST_BASE_PATH: "dist/12.2.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux9"
  OS_NAME: "rockylinux"
  OS_VERSION: "9"
  CUDA_VERSION: "12.2.2"

.rockylinux9_12_2_2_only: &rockylinux9_12_2_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux9_12_2_2_variables
  rules:
    - if: '$rockylinux9_12_2_2 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.2.2:
  <<: *cuda_base_definition
  <<: *rockylinux9_12_2_2_only

rockylinux9-v12.2.2-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux9_12_2_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux9_12_2_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: rockylinux9-v12.2.2
      artifacts: true

rockylinux9-v12.2.2-test-arm64:
  <<: *rockylinux9_12_2_2_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_2_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.2.2
      artifacts: true
    - job: rockylinux9-v12.2.2-cudnn8
      optional: true

rockylinux9-v12.2.2-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux9_12_2_2_only
  needs:
    - job: rockylinux9-v12.2.2
    - job: rockylinux9-v12.2.2-test-arm64
      optional: true
  variables:
    <<: *rockylinux9_12_2_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_2_2 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.2.2-test-x86_64:
  <<: *rockylinux9_12_2_2_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_2_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.2.2
      artifacts: true
    - job: rockylinux9-v12.2.2-cudnn8
      optional: true

rockylinux9-v12.2.2-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux9_12_2_2_only
  needs:
    - job: rockylinux9-v12.2.2
    - job: rockylinux9-v12.2.2-test-x86_64
      optional: true
  variables:
    <<: *rockylinux9_12_2_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_2_2 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.2.2-deploy:
  <<: *deploy_definition
  <<: *rockylinux9_12_2_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux9_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.2.2
      artifacts: true
    - job: rockylinux9-v12.2.2-cudnn8
      optional: true
    - job: rockylinux9-v12.2.2-test-arm64
      optional: true
    - job: rockylinux9-v12.2.2-scan-arm64
      optional: true
    - job: rockylinux9-v12.2.2-test-x86_64
      optional: true
    - job: rockylinux9-v12.2.2-scan-x86_64
      optional: true


.ubi7_12_2_2_variables: &ubi7_12_2_2_variables
  DIST_BASE_PATH: "dist/12.2.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "12.2.2"

.ubi7_12_2_2_only: &ubi7_12_2_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_12_2_2_variables
  rules:
    - if: '$ubi7_12_2_2 == "true"'
    - if: '$all == "true"'

ubi7-v12.2.2:
  <<: *cuda_base_definition
  <<: *ubi7_12_2_2_only

ubi7-v12.2.2-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_12_2_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_12_2_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v12.2.2
      artifacts: true

ubi7-v12.2.2-test-x86_64:
  <<: *ubi7_12_2_2_only
  <<: *test_definition
  variables:
    <<: *ubi7_12_2_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.2.2
      artifacts: true
    - job: ubi7-v12.2.2-cudnn8
      optional: true

ubi7-v12.2.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_12_2_2_only
  needs:
    - job: ubi7-v12.2.2
    - job: ubi7-v12.2.2-test-x86_64
      optional: true
  variables:
    <<: *ubi7_12_2_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_2_2 == "true"'
    - if: '$all == "true"'

ubi7-v12.2.2-deploy:
  <<: *deploy_definition
  <<: *ubi7_12_2_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.2.2
      artifacts: true
    - job: ubi7-v12.2.2-cudnn8
      optional: true
    - job: ubi7-v12.2.2-test-x86_64
      optional: true
    - job: ubi7-v12.2.2-scan-x86_64
      optional: true


.ubi8_12_2_2_variables: &ubi8_12_2_2_variables
  DIST_BASE_PATH: "dist/12.2.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "12.2.2"

.ubi8_12_2_2_only: &ubi8_12_2_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_12_2_2_variables
  rules:
    - if: '$ubi8_12_2_2 == "true"'
    - if: '$all == "true"'

ubi8-v12.2.2:
  <<: *cuda_base_definition
  <<: *ubi8_12_2_2_only

ubi8-v12.2.2-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_12_2_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_12_2_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubi8-v12.2.2
      artifacts: true

ubi8-v12.2.2-test-arm64:
  <<: *ubi8_12_2_2_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_2_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.2.2
      artifacts: true
    - job: ubi8-v12.2.2-cudnn8
      optional: true

ubi8-v12.2.2-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_12_2_2_only
  needs:
    - job: ubi8-v12.2.2
    - job: ubi8-v12.2.2-test-arm64
      optional: true
  variables:
    <<: *ubi8_12_2_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_2_2 == "true"'
    - if: '$all == "true"'

ubi8-v12.2.2-test-x86_64:
  <<: *ubi8_12_2_2_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_2_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.2.2
      artifacts: true
    - job: ubi8-v12.2.2-cudnn8
      optional: true

ubi8-v12.2.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_12_2_2_only
  needs:
    - job: ubi8-v12.2.2
    - job: ubi8-v12.2.2-test-x86_64
      optional: true
  variables:
    <<: *ubi8_12_2_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_2_2 == "true"'
    - if: '$all == "true"'

ubi8-v12.2.2-deploy:
  <<: *deploy_definition
  <<: *ubi8_12_2_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.2.2
      artifacts: true
    - job: ubi8-v12.2.2-cudnn8
      optional: true
    - job: ubi8-v12.2.2-test-arm64
      optional: true
    - job: ubi8-v12.2.2-scan-arm64
      optional: true
    - job: ubi8-v12.2.2-test-x86_64
      optional: true
    - job: ubi8-v12.2.2-scan-x86_64
      optional: true


.ubi9_12_2_2_variables: &ubi9_12_2_2_variables
  DIST_BASE_PATH: "dist/12.2.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi9"
  OS_NAME: "ubi"
  OS_VERSION: "9"
  CUDA_VERSION: "12.2.2"

.ubi9_12_2_2_only: &ubi9_12_2_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi9_12_2_2_variables
  rules:
    - if: '$ubi9_12_2_2 == "true"'
    - if: '$all == "true"'

ubi9-v12.2.2:
  <<: *cuda_base_definition
  <<: *ubi9_12_2_2_only

ubi9-v12.2.2-cudnn8:
  <<: *cudnn_definition
  <<: *ubi9_12_2_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi9_12_2_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi9-v12.2.2
      artifacts: true

ubi9-v12.2.2-test-arm64:
  <<: *ubi9_12_2_2_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_2_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.2.2
      artifacts: true
    - job: ubi9-v12.2.2-cudnn8
      optional: true

ubi9-v12.2.2-scan-arm64:
  <<: *scan_definition
  <<: *ubi9_12_2_2_only
  needs:
    - job: ubi9-v12.2.2
    - job: ubi9-v12.2.2-test-arm64
      optional: true
  variables:
    <<: *ubi9_12_2_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_2_2 == "true"'
    - if: '$all == "true"'

ubi9-v12.2.2-test-x86_64:
  <<: *ubi9_12_2_2_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_2_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.2.2
      artifacts: true
    - job: ubi9-v12.2.2-cudnn8
      optional: true

ubi9-v12.2.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubi9_12_2_2_only
  needs:
    - job: ubi9-v12.2.2
    - job: ubi9-v12.2.2-test-x86_64
      optional: true
  variables:
    <<: *ubi9_12_2_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_2_2 == "true"'
    - if: '$all == "true"'

ubi9-v12.2.2-deploy:
  <<: *deploy_definition
  <<: *ubi9_12_2_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi9_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.2.2
      artifacts: true
    - job: ubi9-v12.2.2-cudnn8
      optional: true
    - job: ubi9-v12.2.2-test-arm64
      optional: true
    - job: ubi9-v12.2.2-scan-arm64
      optional: true
    - job: ubi9-v12.2.2-test-x86_64
      optional: true
    - job: ubi9-v12.2.2-scan-x86_64
      optional: true


.ubuntu20_04_12_2_2_variables: &ubuntu20_04_12_2_2_variables
  DIST_BASE_PATH: "dist/12.2.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "12.2.2"

.ubuntu20_04_12_2_2_only: &ubuntu20_04_12_2_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_12_2_2_variables
  rules:
    - if: '$ubuntu20_04_12_2_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.2.2:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_12_2_2_only

ubuntu20.04-v12.2.2-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_12_2_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_12_2_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu20.04-v12.2.2
      artifacts: true

ubuntu20.04-v12.2.2-test-arm64:
  <<: *ubuntu20_04_12_2_2_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_2_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.2.2
      artifacts: true
    - job: ubuntu20.04-v12.2.2-cudnn8
      optional: true

ubuntu20.04-v12.2.2-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_2_2_only
  needs:
    - job: ubuntu20.04-v12.2.2
    - job: ubuntu20.04-v12.2.2-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_12_2_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_2_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.2.2-test-x86_64:
  <<: *ubuntu20_04_12_2_2_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_2_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.2.2
      artifacts: true
    - job: ubuntu20.04-v12.2.2-cudnn8
      optional: true

ubuntu20.04-v12.2.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_2_2_only
  needs:
    - job: ubuntu20.04-v12.2.2
    - job: ubuntu20.04-v12.2.2-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_12_2_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_2_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.2.2-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_12_2_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.2.2
      artifacts: true
    - job: ubuntu20.04-v12.2.2-cudnn8
      optional: true
    - job: ubuntu20.04-v12.2.2-test-arm64
      optional: true
    - job: ubuntu20.04-v12.2.2-scan-arm64
      optional: true
    - job: ubuntu20.04-v12.2.2-test-x86_64
      optional: true
    - job: ubuntu20.04-v12.2.2-scan-x86_64
      optional: true


.ubuntu22_04_12_2_2_variables: &ubuntu22_04_12_2_2_variables
  DIST_BASE_PATH: "dist/12.2.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu22.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "22.04"
  CUDA_VERSION: "12.2.2"

.ubuntu22_04_12_2_2_only: &ubuntu22_04_12_2_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu22_04_12_2_2_variables
  rules:
    - if: '$ubuntu22_04_12_2_2 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.2.2:
  <<: *cuda_base_definition
  <<: *ubuntu22_04_12_2_2_only

ubuntu22.04-v12.2.2-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu22_04_12_2_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu22_04_12_2_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu22.04-v12.2.2
      artifacts: true

ubuntu22.04-v12.2.2-test-arm64:
  <<: *ubuntu22_04_12_2_2_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_2_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.2.2
      artifacts: true
    - job: ubuntu22.04-v12.2.2-cudnn8
      optional: true

ubuntu22.04-v12.2.2-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_2_2_only
  needs:
    - job: ubuntu22.04-v12.2.2
    - job: ubuntu22.04-v12.2.2-test-arm64
      optional: true
  variables:
    <<: *ubuntu22_04_12_2_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_2_2 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.2.2-test-x86_64:
  <<: *ubuntu22_04_12_2_2_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_2_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.2.2
      artifacts: true
    - job: ubuntu22.04-v12.2.2-cudnn8
      optional: true

ubuntu22.04-v12.2.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_2_2_only
  needs:
    - job: ubuntu22.04-v12.2.2
    - job: ubuntu22.04-v12.2.2-test-x86_64
      optional: true
  variables:
    <<: *ubuntu22_04_12_2_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_2_2 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.2.2-deploy:
  <<: *deploy_definition
  <<: *ubuntu22_04_12_2_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu22_04_12_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.2.2
      artifacts: true
    - job: ubuntu22.04-v12.2.2-cudnn8
      optional: true
    - job: ubuntu22.04-v12.2.2-test-arm64
      optional: true
    - job: ubuntu22.04-v12.2.2-scan-arm64
      optional: true
    - job: ubuntu22.04-v12.2.2-test-x86_64
      optional: true
    - job: ubuntu22.04-v12.2.2-scan-x86_64
      optional: true


.centos7_12_2_0_variables: &centos7_12_2_0_variables
  DIST_BASE_PATH: "dist/12.2.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "12.2.0"

.centos7_12_2_0_only: &centos7_12_2_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_12_2_0_variables
  rules:
    - if: '$centos7_12_2_0 == "true"'
    - if: '$all == "true"'

centos7-v12.2.0:
  <<: *cuda_base_definition
  <<: *centos7_12_2_0_only

centos7-v12.2.0-test-x86_64:
  <<: *centos7_12_2_0_only
  <<: *test_definition
  variables:
    <<: *centos7_12_2_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.2.0
      artifacts: true

centos7-v12.2.0-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_12_2_0_only
  needs:
    - job: centos7-v12.2.0
    - job: centos7-v12.2.0-test-x86_64
      optional: true
  variables:
    <<: *centos7_12_2_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_12_2_0 == "true"'
    - if: '$all == "true"'

centos7-v12.2.0-deploy:
  <<: *deploy_definition
  <<: *centos7_12_2_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.2.0
      artifacts: true
    - job: centos7-v12.2.0-test-x86_64
      optional: true
    - job: centos7-v12.2.0-scan-x86_64
      optional: true


.rockylinux8_12_2_0_variables: &rockylinux8_12_2_0_variables
  DIST_BASE_PATH: "dist/12.2.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "12.2.0"

.rockylinux8_12_2_0_only: &rockylinux8_12_2_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_12_2_0_variables
  rules:
    - if: '$rockylinux8_12_2_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.2.0:
  <<: *cuda_base_definition
  <<: *rockylinux8_12_2_0_only

rockylinux8-v12.2.0-test-arm64:
  <<: *rockylinux8_12_2_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_2_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.2.0
      artifacts: true

rockylinux8-v12.2.0-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_12_2_0_only
  needs:
    - job: rockylinux8-v12.2.0
    - job: rockylinux8-v12.2.0-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_12_2_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_2_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.2.0-test-x86_64:
  <<: *rockylinux8_12_2_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_2_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.2.0
      artifacts: true

rockylinux8-v12.2.0-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_12_2_0_only
  needs:
    - job: rockylinux8-v12.2.0
    - job: rockylinux8-v12.2.0-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_12_2_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_2_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.2.0-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_12_2_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.2.0
      artifacts: true
    - job: rockylinux8-v12.2.0-test-arm64
      optional: true
    - job: rockylinux8-v12.2.0-scan-arm64
      optional: true
    - job: rockylinux8-v12.2.0-test-x86_64
      optional: true
    - job: rockylinux8-v12.2.0-scan-x86_64
      optional: true


.rockylinux9_12_2_0_variables: &rockylinux9_12_2_0_variables
  DIST_BASE_PATH: "dist/12.2.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux9"
  OS_NAME: "rockylinux"
  OS_VERSION: "9"
  CUDA_VERSION: "12.2.0"

.rockylinux9_12_2_0_only: &rockylinux9_12_2_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux9_12_2_0_variables
  rules:
    - if: '$rockylinux9_12_2_0 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.2.0:
  <<: *cuda_base_definition
  <<: *rockylinux9_12_2_0_only

rockylinux9-v12.2.0-test-arm64:
  <<: *rockylinux9_12_2_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_2_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.2.0
      artifacts: true

rockylinux9-v12.2.0-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux9_12_2_0_only
  needs:
    - job: rockylinux9-v12.2.0
    - job: rockylinux9-v12.2.0-test-arm64
      optional: true
  variables:
    <<: *rockylinux9_12_2_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_2_0 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.2.0-test-x86_64:
  <<: *rockylinux9_12_2_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_2_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.2.0
      artifacts: true

rockylinux9-v12.2.0-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux9_12_2_0_only
  needs:
    - job: rockylinux9-v12.2.0
    - job: rockylinux9-v12.2.0-test-x86_64
      optional: true
  variables:
    <<: *rockylinux9_12_2_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_2_0 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.2.0-deploy:
  <<: *deploy_definition
  <<: *rockylinux9_12_2_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux9_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.2.0
      artifacts: true
    - job: rockylinux9-v12.2.0-test-arm64
      optional: true
    - job: rockylinux9-v12.2.0-scan-arm64
      optional: true
    - job: rockylinux9-v12.2.0-test-x86_64
      optional: true
    - job: rockylinux9-v12.2.0-scan-x86_64
      optional: true


.ubi7_12_2_0_variables: &ubi7_12_2_0_variables
  DIST_BASE_PATH: "dist/12.2.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "12.2.0"

.ubi7_12_2_0_only: &ubi7_12_2_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_12_2_0_variables
  rules:
    - if: '$ubi7_12_2_0 == "true"'
    - if: '$all == "true"'

ubi7-v12.2.0:
  <<: *cuda_base_definition
  <<: *ubi7_12_2_0_only

ubi7-v12.2.0-test-x86_64:
  <<: *ubi7_12_2_0_only
  <<: *test_definition
  variables:
    <<: *ubi7_12_2_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.2.0
      artifacts: true

ubi7-v12.2.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_12_2_0_only
  needs:
    - job: ubi7-v12.2.0
    - job: ubi7-v12.2.0-test-x86_64
      optional: true
  variables:
    <<: *ubi7_12_2_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_2_0 == "true"'
    - if: '$all == "true"'

ubi7-v12.2.0-deploy:
  <<: *deploy_definition
  <<: *ubi7_12_2_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.2.0
      artifacts: true
    - job: ubi7-v12.2.0-test-x86_64
      optional: true
    - job: ubi7-v12.2.0-scan-x86_64
      optional: true


.ubi8_12_2_0_variables: &ubi8_12_2_0_variables
  DIST_BASE_PATH: "dist/12.2.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "12.2.0"

.ubi8_12_2_0_only: &ubi8_12_2_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_12_2_0_variables
  rules:
    - if: '$ubi8_12_2_0 == "true"'
    - if: '$all == "true"'

ubi8-v12.2.0:
  <<: *cuda_base_definition
  <<: *ubi8_12_2_0_only

ubi8-v12.2.0-test-arm64:
  <<: *ubi8_12_2_0_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_2_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.2.0
      artifacts: true

ubi8-v12.2.0-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_12_2_0_only
  needs:
    - job: ubi8-v12.2.0
    - job: ubi8-v12.2.0-test-arm64
      optional: true
  variables:
    <<: *ubi8_12_2_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_2_0 == "true"'
    - if: '$all == "true"'

ubi8-v12.2.0-test-x86_64:
  <<: *ubi8_12_2_0_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_2_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.2.0
      artifacts: true

ubi8-v12.2.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_12_2_0_only
  needs:
    - job: ubi8-v12.2.0
    - job: ubi8-v12.2.0-test-x86_64
      optional: true
  variables:
    <<: *ubi8_12_2_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_2_0 == "true"'
    - if: '$all == "true"'

ubi8-v12.2.0-deploy:
  <<: *deploy_definition
  <<: *ubi8_12_2_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.2.0
      artifacts: true
    - job: ubi8-v12.2.0-test-arm64
      optional: true
    - job: ubi8-v12.2.0-scan-arm64
      optional: true
    - job: ubi8-v12.2.0-test-x86_64
      optional: true
    - job: ubi8-v12.2.0-scan-x86_64
      optional: true


.ubi9_12_2_0_variables: &ubi9_12_2_0_variables
  DIST_BASE_PATH: "dist/12.2.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi9"
  OS_NAME: "ubi"
  OS_VERSION: "9"
  CUDA_VERSION: "12.2.0"

.ubi9_12_2_0_only: &ubi9_12_2_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi9_12_2_0_variables
  rules:
    - if: '$ubi9_12_2_0 == "true"'
    - if: '$all == "true"'

ubi9-v12.2.0:
  <<: *cuda_base_definition
  <<: *ubi9_12_2_0_only

ubi9-v12.2.0-test-arm64:
  <<: *ubi9_12_2_0_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_2_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.2.0
      artifacts: true

ubi9-v12.2.0-scan-arm64:
  <<: *scan_definition
  <<: *ubi9_12_2_0_only
  needs:
    - job: ubi9-v12.2.0
    - job: ubi9-v12.2.0-test-arm64
      optional: true
  variables:
    <<: *ubi9_12_2_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_2_0 == "true"'
    - if: '$all == "true"'

ubi9-v12.2.0-test-x86_64:
  <<: *ubi9_12_2_0_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_2_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.2.0
      artifacts: true

ubi9-v12.2.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubi9_12_2_0_only
  needs:
    - job: ubi9-v12.2.0
    - job: ubi9-v12.2.0-test-x86_64
      optional: true
  variables:
    <<: *ubi9_12_2_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_2_0 == "true"'
    - if: '$all == "true"'

ubi9-v12.2.0-deploy:
  <<: *deploy_definition
  <<: *ubi9_12_2_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi9_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.2.0
      artifacts: true
    - job: ubi9-v12.2.0-test-arm64
      optional: true
    - job: ubi9-v12.2.0-scan-arm64
      optional: true
    - job: ubi9-v12.2.0-test-x86_64
      optional: true
    - job: ubi9-v12.2.0-scan-x86_64
      optional: true


.ubuntu20_04_12_2_0_variables: &ubuntu20_04_12_2_0_variables
  DIST_BASE_PATH: "dist/12.2.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "12.2.0"

.ubuntu20_04_12_2_0_only: &ubuntu20_04_12_2_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_12_2_0_variables
  rules:
    - if: '$ubuntu20_04_12_2_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.2.0:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_12_2_0_only

ubuntu20.04-v12.2.0-test-arm64:
  <<: *ubuntu20_04_12_2_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_2_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.2.0
      artifacts: true

ubuntu20.04-v12.2.0-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_2_0_only
  needs:
    - job: ubuntu20.04-v12.2.0
    - job: ubuntu20.04-v12.2.0-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_12_2_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_2_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.2.0-test-x86_64:
  <<: *ubuntu20_04_12_2_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_2_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.2.0
      artifacts: true

ubuntu20.04-v12.2.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_2_0_only
  needs:
    - job: ubuntu20.04-v12.2.0
    - job: ubuntu20.04-v12.2.0-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_12_2_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_2_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.2.0-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_12_2_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.2.0
      artifacts: true
    - job: ubuntu20.04-v12.2.0-test-arm64
      optional: true
    - job: ubuntu20.04-v12.2.0-scan-arm64
      optional: true
    - job: ubuntu20.04-v12.2.0-test-x86_64
      optional: true
    - job: ubuntu20.04-v12.2.0-scan-x86_64
      optional: true


.ubuntu22_04_12_2_0_variables: &ubuntu22_04_12_2_0_variables
  DIST_BASE_PATH: "dist/12.2.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu22.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "22.04"
  CUDA_VERSION: "12.2.0"

.ubuntu22_04_12_2_0_only: &ubuntu22_04_12_2_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu22_04_12_2_0_variables
  rules:
    - if: '$ubuntu22_04_12_2_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.2.0:
  <<: *cuda_base_definition
  <<: *ubuntu22_04_12_2_0_only

ubuntu22.04-v12.2.0-test-arm64:
  <<: *ubuntu22_04_12_2_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_2_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.2.0
      artifacts: true

ubuntu22.04-v12.2.0-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_2_0_only
  needs:
    - job: ubuntu22.04-v12.2.0
    - job: ubuntu22.04-v12.2.0-test-arm64
      optional: true
  variables:
    <<: *ubuntu22_04_12_2_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_2_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.2.0-test-x86_64:
  <<: *ubuntu22_04_12_2_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_2_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.2.0
      artifacts: true

ubuntu22.04-v12.2.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_2_0_only
  needs:
    - job: ubuntu22.04-v12.2.0
    - job: ubuntu22.04-v12.2.0-test-x86_64
      optional: true
  variables:
    <<: *ubuntu22_04_12_2_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_2_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.2.0-deploy:
  <<: *deploy_definition
  <<: *ubuntu22_04_12_2_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu22_04_12_2_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.2.0
      artifacts: true
    - job: ubuntu22.04-v12.2.0-test-arm64
      optional: true
    - job: ubuntu22.04-v12.2.0-scan-arm64
      optional: true
    - job: ubuntu22.04-v12.2.0-test-x86_64
      optional: true
    - job: ubuntu22.04-v12.2.0-scan-x86_64
      optional: true


.centos7_12_1_1_variables: &centos7_12_1_1_variables
  DIST_BASE_PATH: "dist/12.1.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "12.1.1"

.centos7_12_1_1_only: &centos7_12_1_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_12_1_1_variables
  rules:
    - if: '$centos7_12_1_1 == "true"'
    - if: '$all == "true"'

centos7-v12.1.1:
  <<: *cuda_base_definition
  <<: *centos7_12_1_1_only

centos7-v12.1.1-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_12_1_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_12_1_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v12.1.1
      artifacts: true

centos7-v12.1.1-test-x86_64:
  <<: *centos7_12_1_1_only
  <<: *test_definition
  variables:
    <<: *centos7_12_1_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.1.1
      artifacts: true
    - job: centos7-v12.1.1-cudnn8
      optional: true

centos7-v12.1.1-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_12_1_1_only
  needs:
    - job: centos7-v12.1.1
    - job: centos7-v12.1.1-test-x86_64
      optional: true
  variables:
    <<: *centos7_12_1_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_12_1_1 == "true"'
    - if: '$all == "true"'

centos7-v12.1.1-deploy:
  <<: *deploy_definition
  <<: *centos7_12_1_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.1.1
      artifacts: true
    - job: centos7-v12.1.1-cudnn8
      optional: true
    - job: centos7-v12.1.1-test-x86_64
      optional: true
    - job: centos7-v12.1.1-scan-x86_64
      optional: true


.rockylinux8_12_1_1_variables: &rockylinux8_12_1_1_variables
  DIST_BASE_PATH: "dist/12.1.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "12.1.1"

.rockylinux8_12_1_1_only: &rockylinux8_12_1_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_12_1_1_variables
  rules:
    - if: '$rockylinux8_12_1_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.1.1:
  <<: *cuda_base_definition
  <<: *rockylinux8_12_1_1_only

rockylinux8-v12.1.1-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_12_1_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_12_1_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: rockylinux8-v12.1.1
      artifacts: true

rockylinux8-v12.1.1-test-arm64:
  <<: *rockylinux8_12_1_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_1_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.1.1
      artifacts: true
    - job: rockylinux8-v12.1.1-cudnn8
      optional: true

rockylinux8-v12.1.1-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_12_1_1_only
  needs:
    - job: rockylinux8-v12.1.1
    - job: rockylinux8-v12.1.1-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_12_1_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_1_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.1.1-test-x86_64:
  <<: *rockylinux8_12_1_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_1_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.1.1
      artifacts: true
    - job: rockylinux8-v12.1.1-cudnn8
      optional: true

rockylinux8-v12.1.1-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_12_1_1_only
  needs:
    - job: rockylinux8-v12.1.1
    - job: rockylinux8-v12.1.1-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_12_1_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_1_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.1.1-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_12_1_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.1.1
      artifacts: true
    - job: rockylinux8-v12.1.1-cudnn8
      optional: true
    - job: rockylinux8-v12.1.1-test-arm64
      optional: true
    - job: rockylinux8-v12.1.1-scan-arm64
      optional: true
    - job: rockylinux8-v12.1.1-test-x86_64
      optional: true
    - job: rockylinux8-v12.1.1-scan-x86_64
      optional: true


.rockylinux9_12_1_1_variables: &rockylinux9_12_1_1_variables
  DIST_BASE_PATH: "dist/12.1.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux9"
  OS_NAME: "rockylinux"
  OS_VERSION: "9"
  CUDA_VERSION: "12.1.1"

.rockylinux9_12_1_1_only: &rockylinux9_12_1_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux9_12_1_1_variables
  rules:
    - if: '$rockylinux9_12_1_1 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.1.1:
  <<: *cuda_base_definition
  <<: *rockylinux9_12_1_1_only

rockylinux9-v12.1.1-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux9_12_1_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux9_12_1_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: rockylinux9-v12.1.1
      artifacts: true

rockylinux9-v12.1.1-test-arm64:
  <<: *rockylinux9_12_1_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_1_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.1.1
      artifacts: true
    - job: rockylinux9-v12.1.1-cudnn8
      optional: true

rockylinux9-v12.1.1-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux9_12_1_1_only
  needs:
    - job: rockylinux9-v12.1.1
    - job: rockylinux9-v12.1.1-test-arm64
      optional: true
  variables:
    <<: *rockylinux9_12_1_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_1_1 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.1.1-test-x86_64:
  <<: *rockylinux9_12_1_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_1_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.1.1
      artifacts: true
    - job: rockylinux9-v12.1.1-cudnn8
      optional: true

rockylinux9-v12.1.1-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux9_12_1_1_only
  needs:
    - job: rockylinux9-v12.1.1
    - job: rockylinux9-v12.1.1-test-x86_64
      optional: true
  variables:
    <<: *rockylinux9_12_1_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_1_1 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.1.1-deploy:
  <<: *deploy_definition
  <<: *rockylinux9_12_1_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux9_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.1.1
      artifacts: true
    - job: rockylinux9-v12.1.1-cudnn8
      optional: true
    - job: rockylinux9-v12.1.1-test-arm64
      optional: true
    - job: rockylinux9-v12.1.1-scan-arm64
      optional: true
    - job: rockylinux9-v12.1.1-test-x86_64
      optional: true
    - job: rockylinux9-v12.1.1-scan-x86_64
      optional: true


.ubi7_12_1_1_variables: &ubi7_12_1_1_variables
  DIST_BASE_PATH: "dist/12.1.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "12.1.1"

.ubi7_12_1_1_only: &ubi7_12_1_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_12_1_1_variables
  rules:
    - if: '$ubi7_12_1_1 == "true"'
    - if: '$all == "true"'

ubi7-v12.1.1:
  <<: *cuda_base_definition
  <<: *ubi7_12_1_1_only

ubi7-v12.1.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_12_1_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_12_1_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v12.1.1
      artifacts: true

ubi7-v12.1.1-test-x86_64:
  <<: *ubi7_12_1_1_only
  <<: *test_definition
  variables:
    <<: *ubi7_12_1_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.1.1
      artifacts: true
    - job: ubi7-v12.1.1-cudnn8
      optional: true

ubi7-v12.1.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_12_1_1_only
  needs:
    - job: ubi7-v12.1.1
    - job: ubi7-v12.1.1-test-x86_64
      optional: true
  variables:
    <<: *ubi7_12_1_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_1_1 == "true"'
    - if: '$all == "true"'

ubi7-v12.1.1-deploy:
  <<: *deploy_definition
  <<: *ubi7_12_1_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.1.1
      artifacts: true
    - job: ubi7-v12.1.1-cudnn8
      optional: true
    - job: ubi7-v12.1.1-test-x86_64
      optional: true
    - job: ubi7-v12.1.1-scan-x86_64
      optional: true


.ubi8_12_1_1_variables: &ubi8_12_1_1_variables
  DIST_BASE_PATH: "dist/12.1.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "12.1.1"

.ubi8_12_1_1_only: &ubi8_12_1_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_12_1_1_variables
  rules:
    - if: '$ubi8_12_1_1 == "true"'
    - if: '$all == "true"'

ubi8-v12.1.1:
  <<: *cuda_base_definition
  <<: *ubi8_12_1_1_only

ubi8-v12.1.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_12_1_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_12_1_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubi8-v12.1.1
      artifacts: true

ubi8-v12.1.1-test-arm64:
  <<: *ubi8_12_1_1_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_1_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.1.1
      artifacts: true
    - job: ubi8-v12.1.1-cudnn8
      optional: true

ubi8-v12.1.1-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_12_1_1_only
  needs:
    - job: ubi8-v12.1.1
    - job: ubi8-v12.1.1-test-arm64
      optional: true
  variables:
    <<: *ubi8_12_1_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_1_1 == "true"'
    - if: '$all == "true"'

ubi8-v12.1.1-test-x86_64:
  <<: *ubi8_12_1_1_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_1_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.1.1
      artifacts: true
    - job: ubi8-v12.1.1-cudnn8
      optional: true

ubi8-v12.1.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_12_1_1_only
  needs:
    - job: ubi8-v12.1.1
    - job: ubi8-v12.1.1-test-x86_64
      optional: true
  variables:
    <<: *ubi8_12_1_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_1_1 == "true"'
    - if: '$all == "true"'

ubi8-v12.1.1-deploy:
  <<: *deploy_definition
  <<: *ubi8_12_1_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.1.1
      artifacts: true
    - job: ubi8-v12.1.1-cudnn8
      optional: true
    - job: ubi8-v12.1.1-test-arm64
      optional: true
    - job: ubi8-v12.1.1-scan-arm64
      optional: true
    - job: ubi8-v12.1.1-test-x86_64
      optional: true
    - job: ubi8-v12.1.1-scan-x86_64
      optional: true


.ubi9_12_1_1_variables: &ubi9_12_1_1_variables
  DIST_BASE_PATH: "dist/12.1.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi9"
  OS_NAME: "ubi"
  OS_VERSION: "9"
  CUDA_VERSION: "12.1.1"

.ubi9_12_1_1_only: &ubi9_12_1_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi9_12_1_1_variables
  rules:
    - if: '$ubi9_12_1_1 == "true"'
    - if: '$all == "true"'

ubi9-v12.1.1:
  <<: *cuda_base_definition
  <<: *ubi9_12_1_1_only

ubi9-v12.1.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubi9_12_1_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi9_12_1_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi9-v12.1.1
      artifacts: true

ubi9-v12.1.1-test-arm64:
  <<: *ubi9_12_1_1_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_1_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.1.1
      artifacts: true
    - job: ubi9-v12.1.1-cudnn8
      optional: true

ubi9-v12.1.1-scan-arm64:
  <<: *scan_definition
  <<: *ubi9_12_1_1_only
  needs:
    - job: ubi9-v12.1.1
    - job: ubi9-v12.1.1-test-arm64
      optional: true
  variables:
    <<: *ubi9_12_1_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_1_1 == "true"'
    - if: '$all == "true"'

ubi9-v12.1.1-test-x86_64:
  <<: *ubi9_12_1_1_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_1_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.1.1
      artifacts: true
    - job: ubi9-v12.1.1-cudnn8
      optional: true

ubi9-v12.1.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi9_12_1_1_only
  needs:
    - job: ubi9-v12.1.1
    - job: ubi9-v12.1.1-test-x86_64
      optional: true
  variables:
    <<: *ubi9_12_1_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_1_1 == "true"'
    - if: '$all == "true"'

ubi9-v12.1.1-deploy:
  <<: *deploy_definition
  <<: *ubi9_12_1_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi9_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.1.1
      artifacts: true
    - job: ubi9-v12.1.1-cudnn8
      optional: true
    - job: ubi9-v12.1.1-test-arm64
      optional: true
    - job: ubi9-v12.1.1-scan-arm64
      optional: true
    - job: ubi9-v12.1.1-test-x86_64
      optional: true
    - job: ubi9-v12.1.1-scan-x86_64
      optional: true


.ubuntu20_04_12_1_1_variables: &ubuntu20_04_12_1_1_variables
  DIST_BASE_PATH: "dist/12.1.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "12.1.1"

.ubuntu20_04_12_1_1_only: &ubuntu20_04_12_1_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_12_1_1_variables
  rules:
    - if: '$ubuntu20_04_12_1_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.1.1:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_12_1_1_only

ubuntu20.04-v12.1.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_12_1_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_12_1_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu20.04-v12.1.1
      artifacts: true

ubuntu20.04-v12.1.1-test-arm64:
  <<: *ubuntu20_04_12_1_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_1_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.1.1
      artifacts: true
    - job: ubuntu20.04-v12.1.1-cudnn8
      optional: true

ubuntu20.04-v12.1.1-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_1_1_only
  needs:
    - job: ubuntu20.04-v12.1.1
    - job: ubuntu20.04-v12.1.1-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_12_1_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_1_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.1.1-test-x86_64:
  <<: *ubuntu20_04_12_1_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_1_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.1.1
      artifacts: true
    - job: ubuntu20.04-v12.1.1-cudnn8
      optional: true

ubuntu20.04-v12.1.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_1_1_only
  needs:
    - job: ubuntu20.04-v12.1.1
    - job: ubuntu20.04-v12.1.1-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_12_1_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_1_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.1.1-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_12_1_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.1.1
      artifacts: true
    - job: ubuntu20.04-v12.1.1-cudnn8
      optional: true
    - job: ubuntu20.04-v12.1.1-test-arm64
      optional: true
    - job: ubuntu20.04-v12.1.1-scan-arm64
      optional: true
    - job: ubuntu20.04-v12.1.1-test-x86_64
      optional: true
    - job: ubuntu20.04-v12.1.1-scan-x86_64
      optional: true


.ubuntu22_04_12_1_1_variables: &ubuntu22_04_12_1_1_variables
  DIST_BASE_PATH: "dist/12.1.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu22.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "22.04"
  CUDA_VERSION: "12.1.1"

.ubuntu22_04_12_1_1_only: &ubuntu22_04_12_1_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu22_04_12_1_1_variables
  rules:
    - if: '$ubuntu22_04_12_1_1 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.1.1:
  <<: *cuda_base_definition
  <<: *ubuntu22_04_12_1_1_only

ubuntu22.04-v12.1.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu22_04_12_1_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu22_04_12_1_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu22.04-v12.1.1
      artifacts: true

ubuntu22.04-v12.1.1-test-arm64:
  <<: *ubuntu22_04_12_1_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_1_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.1.1
      artifacts: true
    - job: ubuntu22.04-v12.1.1-cudnn8
      optional: true

ubuntu22.04-v12.1.1-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_1_1_only
  needs:
    - job: ubuntu22.04-v12.1.1
    - job: ubuntu22.04-v12.1.1-test-arm64
      optional: true
  variables:
    <<: *ubuntu22_04_12_1_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_1_1 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.1.1-test-x86_64:
  <<: *ubuntu22_04_12_1_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_1_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.1.1
      artifacts: true
    - job: ubuntu22.04-v12.1.1-cudnn8
      optional: true

ubuntu22.04-v12.1.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_1_1_only
  needs:
    - job: ubuntu22.04-v12.1.1
    - job: ubuntu22.04-v12.1.1-test-x86_64
      optional: true
  variables:
    <<: *ubuntu22_04_12_1_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_1_1 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.1.1-deploy:
  <<: *deploy_definition
  <<: *ubuntu22_04_12_1_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu22_04_12_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.1.1
      artifacts: true
    - job: ubuntu22.04-v12.1.1-cudnn8
      optional: true
    - job: ubuntu22.04-v12.1.1-test-arm64
      optional: true
    - job: ubuntu22.04-v12.1.1-scan-arm64
      optional: true
    - job: ubuntu22.04-v12.1.1-test-x86_64
      optional: true
    - job: ubuntu22.04-v12.1.1-scan-x86_64
      optional: true


.centos7_12_1_0_variables: &centos7_12_1_0_variables
  DIST_BASE_PATH: "dist/12.1.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "12.1.0"

.centos7_12_1_0_only: &centos7_12_1_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_12_1_0_variables
  rules:
    - if: '$centos7_12_1_0 == "true"'
    - if: '$all == "true"'

centos7-v12.1.0:
  <<: *cuda_base_definition
  <<: *centos7_12_1_0_only

centos7-v12.1.0-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_12_1_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_12_1_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v12.1.0
      artifacts: true

centos7-v12.1.0-test-x86_64:
  <<: *centos7_12_1_0_only
  <<: *test_definition
  variables:
    <<: *centos7_12_1_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.1.0
      artifacts: true
    - job: centos7-v12.1.0-cudnn8
      optional: true

centos7-v12.1.0-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_12_1_0_only
  needs:
    - job: centos7-v12.1.0
    - job: centos7-v12.1.0-test-x86_64
      optional: true
  variables:
    <<: *centos7_12_1_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_12_1_0 == "true"'
    - if: '$all == "true"'

centos7-v12.1.0-deploy:
  <<: *deploy_definition
  <<: *centos7_12_1_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.1.0
      artifacts: true
    - job: centos7-v12.1.0-cudnn8
      optional: true
    - job: centos7-v12.1.0-test-x86_64
      optional: true
    - job: centos7-v12.1.0-scan-x86_64
      optional: true


.rockylinux8_12_1_0_variables: &rockylinux8_12_1_0_variables
  DIST_BASE_PATH: "dist/12.1.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "12.1.0"

.rockylinux8_12_1_0_only: &rockylinux8_12_1_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_12_1_0_variables
  rules:
    - if: '$rockylinux8_12_1_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.1.0:
  <<: *cuda_base_definition
  <<: *rockylinux8_12_1_0_only

rockylinux8-v12.1.0-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_12_1_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_12_1_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: rockylinux8-v12.1.0
      artifacts: true

rockylinux8-v12.1.0-test-arm64:
  <<: *rockylinux8_12_1_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_1_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.1.0
      artifacts: true
    - job: rockylinux8-v12.1.0-cudnn8
      optional: true

rockylinux8-v12.1.0-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_12_1_0_only
  needs:
    - job: rockylinux8-v12.1.0
    - job: rockylinux8-v12.1.0-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_12_1_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_1_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.1.0-test-x86_64:
  <<: *rockylinux8_12_1_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_1_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.1.0
      artifacts: true
    - job: rockylinux8-v12.1.0-cudnn8
      optional: true

rockylinux8-v12.1.0-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_12_1_0_only
  needs:
    - job: rockylinux8-v12.1.0
    - job: rockylinux8-v12.1.0-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_12_1_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_1_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.1.0-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_12_1_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.1.0
      artifacts: true
    - job: rockylinux8-v12.1.0-cudnn8
      optional: true
    - job: rockylinux8-v12.1.0-test-arm64
      optional: true
    - job: rockylinux8-v12.1.0-scan-arm64
      optional: true
    - job: rockylinux8-v12.1.0-test-x86_64
      optional: true
    - job: rockylinux8-v12.1.0-scan-x86_64
      optional: true


.rockylinux9_12_1_0_variables: &rockylinux9_12_1_0_variables
  DIST_BASE_PATH: "dist/12.1.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux9"
  OS_NAME: "rockylinux"
  OS_VERSION: "9"
  CUDA_VERSION: "12.1.0"

.rockylinux9_12_1_0_only: &rockylinux9_12_1_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux9_12_1_0_variables
  rules:
    - if: '$rockylinux9_12_1_0 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.1.0:
  <<: *cuda_base_definition
  <<: *rockylinux9_12_1_0_only

rockylinux9-v12.1.0-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux9_12_1_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux9_12_1_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: rockylinux9-v12.1.0
      artifacts: true

rockylinux9-v12.1.0-test-arm64:
  <<: *rockylinux9_12_1_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_1_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.1.0
      artifacts: true
    - job: rockylinux9-v12.1.0-cudnn8
      optional: true

rockylinux9-v12.1.0-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux9_12_1_0_only
  needs:
    - job: rockylinux9-v12.1.0
    - job: rockylinux9-v12.1.0-test-arm64
      optional: true
  variables:
    <<: *rockylinux9_12_1_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_1_0 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.1.0-test-x86_64:
  <<: *rockylinux9_12_1_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_1_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.1.0
      artifacts: true
    - job: rockylinux9-v12.1.0-cudnn8
      optional: true

rockylinux9-v12.1.0-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux9_12_1_0_only
  needs:
    - job: rockylinux9-v12.1.0
    - job: rockylinux9-v12.1.0-test-x86_64
      optional: true
  variables:
    <<: *rockylinux9_12_1_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_1_0 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.1.0-deploy:
  <<: *deploy_definition
  <<: *rockylinux9_12_1_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux9_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.1.0
      artifacts: true
    - job: rockylinux9-v12.1.0-cudnn8
      optional: true
    - job: rockylinux9-v12.1.0-test-arm64
      optional: true
    - job: rockylinux9-v12.1.0-scan-arm64
      optional: true
    - job: rockylinux9-v12.1.0-test-x86_64
      optional: true
    - job: rockylinux9-v12.1.0-scan-x86_64
      optional: true


.ubi7_12_1_0_variables: &ubi7_12_1_0_variables
  DIST_BASE_PATH: "dist/12.1.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "12.1.0"

.ubi7_12_1_0_only: &ubi7_12_1_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_12_1_0_variables
  rules:
    - if: '$ubi7_12_1_0 == "true"'
    - if: '$all == "true"'

ubi7-v12.1.0:
  <<: *cuda_base_definition
  <<: *ubi7_12_1_0_only

ubi7-v12.1.0-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_12_1_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_12_1_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v12.1.0
      artifacts: true

ubi7-v12.1.0-test-x86_64:
  <<: *ubi7_12_1_0_only
  <<: *test_definition
  variables:
    <<: *ubi7_12_1_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.1.0
      artifacts: true
    - job: ubi7-v12.1.0-cudnn8
      optional: true

ubi7-v12.1.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_12_1_0_only
  needs:
    - job: ubi7-v12.1.0
    - job: ubi7-v12.1.0-test-x86_64
      optional: true
  variables:
    <<: *ubi7_12_1_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_1_0 == "true"'
    - if: '$all == "true"'

ubi7-v12.1.0-deploy:
  <<: *deploy_definition
  <<: *ubi7_12_1_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.1.0
      artifacts: true
    - job: ubi7-v12.1.0-cudnn8
      optional: true
    - job: ubi7-v12.1.0-test-x86_64
      optional: true
    - job: ubi7-v12.1.0-scan-x86_64
      optional: true


.ubi8_12_1_0_variables: &ubi8_12_1_0_variables
  DIST_BASE_PATH: "dist/12.1.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "12.1.0"

.ubi8_12_1_0_only: &ubi8_12_1_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_12_1_0_variables
  rules:
    - if: '$ubi8_12_1_0 == "true"'
    - if: '$all == "true"'

ubi8-v12.1.0:
  <<: *cuda_base_definition
  <<: *ubi8_12_1_0_only

ubi8-v12.1.0-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_12_1_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_12_1_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubi8-v12.1.0
      artifacts: true

ubi8-v12.1.0-test-arm64:
  <<: *ubi8_12_1_0_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_1_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.1.0
      artifacts: true
    - job: ubi8-v12.1.0-cudnn8
      optional: true

ubi8-v12.1.0-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_12_1_0_only
  needs:
    - job: ubi8-v12.1.0
    - job: ubi8-v12.1.0-test-arm64
      optional: true
  variables:
    <<: *ubi8_12_1_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_1_0 == "true"'
    - if: '$all == "true"'

ubi8-v12.1.0-test-x86_64:
  <<: *ubi8_12_1_0_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_1_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.1.0
      artifacts: true
    - job: ubi8-v12.1.0-cudnn8
      optional: true

ubi8-v12.1.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_12_1_0_only
  needs:
    - job: ubi8-v12.1.0
    - job: ubi8-v12.1.0-test-x86_64
      optional: true
  variables:
    <<: *ubi8_12_1_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_1_0 == "true"'
    - if: '$all == "true"'

ubi8-v12.1.0-deploy:
  <<: *deploy_definition
  <<: *ubi8_12_1_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.1.0
      artifacts: true
    - job: ubi8-v12.1.0-cudnn8
      optional: true
    - job: ubi8-v12.1.0-test-arm64
      optional: true
    - job: ubi8-v12.1.0-scan-arm64
      optional: true
    - job: ubi8-v12.1.0-test-x86_64
      optional: true
    - job: ubi8-v12.1.0-scan-x86_64
      optional: true


.ubi9_12_1_0_variables: &ubi9_12_1_0_variables
  DIST_BASE_PATH: "dist/12.1.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi9"
  OS_NAME: "ubi"
  OS_VERSION: "9"
  CUDA_VERSION: "12.1.0"

.ubi9_12_1_0_only: &ubi9_12_1_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi9_12_1_0_variables
  rules:
    - if: '$ubi9_12_1_0 == "true"'
    - if: '$all == "true"'

ubi9-v12.1.0:
  <<: *cuda_base_definition
  <<: *ubi9_12_1_0_only

ubi9-v12.1.0-cudnn8:
  <<: *cudnn_definition
  <<: *ubi9_12_1_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi9_12_1_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi9-v12.1.0
      artifacts: true

ubi9-v12.1.0-test-arm64:
  <<: *ubi9_12_1_0_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_1_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.1.0
      artifacts: true
    - job: ubi9-v12.1.0-cudnn8
      optional: true

ubi9-v12.1.0-scan-arm64:
  <<: *scan_definition
  <<: *ubi9_12_1_0_only
  needs:
    - job: ubi9-v12.1.0
    - job: ubi9-v12.1.0-test-arm64
      optional: true
  variables:
    <<: *ubi9_12_1_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_1_0 == "true"'
    - if: '$all == "true"'

ubi9-v12.1.0-test-x86_64:
  <<: *ubi9_12_1_0_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_1_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.1.0
      artifacts: true
    - job: ubi9-v12.1.0-cudnn8
      optional: true

ubi9-v12.1.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubi9_12_1_0_only
  needs:
    - job: ubi9-v12.1.0
    - job: ubi9-v12.1.0-test-x86_64
      optional: true
  variables:
    <<: *ubi9_12_1_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_1_0 == "true"'
    - if: '$all == "true"'

ubi9-v12.1.0-deploy:
  <<: *deploy_definition
  <<: *ubi9_12_1_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi9_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.1.0
      artifacts: true
    - job: ubi9-v12.1.0-cudnn8
      optional: true
    - job: ubi9-v12.1.0-test-arm64
      optional: true
    - job: ubi9-v12.1.0-scan-arm64
      optional: true
    - job: ubi9-v12.1.0-test-x86_64
      optional: true
    - job: ubi9-v12.1.0-scan-x86_64
      optional: true


.ubuntu20_04_12_1_0_variables: &ubuntu20_04_12_1_0_variables
  DIST_BASE_PATH: "dist/12.1.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "12.1.0"

.ubuntu20_04_12_1_0_only: &ubuntu20_04_12_1_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_12_1_0_variables
  rules:
    - if: '$ubuntu20_04_12_1_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.1.0:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_12_1_0_only

ubuntu20.04-v12.1.0-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_12_1_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_12_1_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu20.04-v12.1.0
      artifacts: true

ubuntu20.04-v12.1.0-test-arm64:
  <<: *ubuntu20_04_12_1_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_1_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.1.0
      artifacts: true
    - job: ubuntu20.04-v12.1.0-cudnn8
      optional: true

ubuntu20.04-v12.1.0-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_1_0_only
  needs:
    - job: ubuntu20.04-v12.1.0
    - job: ubuntu20.04-v12.1.0-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_12_1_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_1_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.1.0-test-x86_64:
  <<: *ubuntu20_04_12_1_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_1_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.1.0
      artifacts: true
    - job: ubuntu20.04-v12.1.0-cudnn8
      optional: true

ubuntu20.04-v12.1.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_1_0_only
  needs:
    - job: ubuntu20.04-v12.1.0
    - job: ubuntu20.04-v12.1.0-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_12_1_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_1_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.1.0-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_12_1_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.1.0
      artifacts: true
    - job: ubuntu20.04-v12.1.0-cudnn8
      optional: true
    - job: ubuntu20.04-v12.1.0-test-arm64
      optional: true
    - job: ubuntu20.04-v12.1.0-scan-arm64
      optional: true
    - job: ubuntu20.04-v12.1.0-test-x86_64
      optional: true
    - job: ubuntu20.04-v12.1.0-scan-x86_64
      optional: true


.ubuntu22_04_12_1_0_variables: &ubuntu22_04_12_1_0_variables
  DIST_BASE_PATH: "dist/12.1.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu22.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "22.04"
  CUDA_VERSION: "12.1.0"

.ubuntu22_04_12_1_0_only: &ubuntu22_04_12_1_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu22_04_12_1_0_variables
  rules:
    - if: '$ubuntu22_04_12_1_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.1.0:
  <<: *cuda_base_definition
  <<: *ubuntu22_04_12_1_0_only

ubuntu22.04-v12.1.0-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu22_04_12_1_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu22_04_12_1_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu22.04-v12.1.0
      artifacts: true

ubuntu22.04-v12.1.0-test-arm64:
  <<: *ubuntu22_04_12_1_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_1_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.1.0
      artifacts: true
    - job: ubuntu22.04-v12.1.0-cudnn8
      optional: true

ubuntu22.04-v12.1.0-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_1_0_only
  needs:
    - job: ubuntu22.04-v12.1.0
    - job: ubuntu22.04-v12.1.0-test-arm64
      optional: true
  variables:
    <<: *ubuntu22_04_12_1_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_1_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.1.0-test-x86_64:
  <<: *ubuntu22_04_12_1_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_1_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.1.0
      artifacts: true
    - job: ubuntu22.04-v12.1.0-cudnn8
      optional: true

ubuntu22.04-v12.1.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_1_0_only
  needs:
    - job: ubuntu22.04-v12.1.0
    - job: ubuntu22.04-v12.1.0-test-x86_64
      optional: true
  variables:
    <<: *ubuntu22_04_12_1_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_1_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.1.0-deploy:
  <<: *deploy_definition
  <<: *ubuntu22_04_12_1_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu22_04_12_1_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.1.0
      artifacts: true
    - job: ubuntu22.04-v12.1.0-cudnn8
      optional: true
    - job: ubuntu22.04-v12.1.0-test-arm64
      optional: true
    - job: ubuntu22.04-v12.1.0-scan-arm64
      optional: true
    - job: ubuntu22.04-v12.1.0-test-x86_64
      optional: true
    - job: ubuntu22.04-v12.1.0-scan-x86_64
      optional: true


.centos7_12_0_1_variables: &centos7_12_0_1_variables
  DIST_BASE_PATH: "dist/12.0.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "12.0.1"

.centos7_12_0_1_only: &centos7_12_0_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_12_0_1_variables
  rules:
    - if: '$centos7_12_0_1 == "true"'
    - if: '$all == "true"'

centos7-v12.0.1:
  <<: *cuda_base_definition
  <<: *centos7_12_0_1_only

centos7-v12.0.1-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_12_0_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_12_0_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v12.0.1
      artifacts: true

centos7-v12.0.1-test-x86_64:
  <<: *centos7_12_0_1_only
  <<: *test_definition
  variables:
    <<: *centos7_12_0_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.0.1
      artifacts: true
    - job: centos7-v12.0.1-cudnn8
      optional: true

centos7-v12.0.1-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_12_0_1_only
  needs:
    - job: centos7-v12.0.1
    - job: centos7-v12.0.1-test-x86_64
      optional: true
  variables:
    <<: *centos7_12_0_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_12_0_1 == "true"'
    - if: '$all == "true"'

centos7-v12.0.1-deploy:
  <<: *deploy_definition
  <<: *centos7_12_0_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.0.1
      artifacts: true
    - job: centos7-v12.0.1-cudnn8
      optional: true
    - job: centos7-v12.0.1-test-x86_64
      optional: true
    - job: centos7-v12.0.1-scan-x86_64
      optional: true


.rockylinux8_12_0_1_variables: &rockylinux8_12_0_1_variables
  DIST_BASE_PATH: "dist/12.0.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "12.0.1"

.rockylinux8_12_0_1_only: &rockylinux8_12_0_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_12_0_1_variables
  rules:
    - if: '$rockylinux8_12_0_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.0.1:
  <<: *cuda_base_definition
  <<: *rockylinux8_12_0_1_only

rockylinux8-v12.0.1-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_12_0_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_12_0_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: rockylinux8-v12.0.1
      artifacts: true

rockylinux8-v12.0.1-test-arm64:
  <<: *rockylinux8_12_0_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_0_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.0.1
      artifacts: true
    - job: rockylinux8-v12.0.1-cudnn8
      optional: true

rockylinux8-v12.0.1-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_12_0_1_only
  needs:
    - job: rockylinux8-v12.0.1
    - job: rockylinux8-v12.0.1-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_12_0_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_0_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.0.1-test-x86_64:
  <<: *rockylinux8_12_0_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_0_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.0.1
      artifacts: true
    - job: rockylinux8-v12.0.1-cudnn8
      optional: true

rockylinux8-v12.0.1-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_12_0_1_only
  needs:
    - job: rockylinux8-v12.0.1
    - job: rockylinux8-v12.0.1-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_12_0_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_0_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.0.1-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_12_0_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.0.1
      artifacts: true
    - job: rockylinux8-v12.0.1-cudnn8
      optional: true
    - job: rockylinux8-v12.0.1-test-arm64
      optional: true
    - job: rockylinux8-v12.0.1-scan-arm64
      optional: true
    - job: rockylinux8-v12.0.1-test-x86_64
      optional: true
    - job: rockylinux8-v12.0.1-scan-x86_64
      optional: true


.rockylinux9_12_0_1_variables: &rockylinux9_12_0_1_variables
  DIST_BASE_PATH: "dist/12.0.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux9"
  OS_NAME: "rockylinux"
  OS_VERSION: "9"
  CUDA_VERSION: "12.0.1"

.rockylinux9_12_0_1_only: &rockylinux9_12_0_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux9_12_0_1_variables
  rules:
    - if: '$rockylinux9_12_0_1 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.0.1:
  <<: *cuda_base_definition
  <<: *rockylinux9_12_0_1_only

rockylinux9-v12.0.1-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux9_12_0_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux9_12_0_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: rockylinux9-v12.0.1
      artifacts: true

rockylinux9-v12.0.1-test-arm64:
  <<: *rockylinux9_12_0_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_0_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.0.1
      artifacts: true
    - job: rockylinux9-v12.0.1-cudnn8
      optional: true

rockylinux9-v12.0.1-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux9_12_0_1_only
  needs:
    - job: rockylinux9-v12.0.1
    - job: rockylinux9-v12.0.1-test-arm64
      optional: true
  variables:
    <<: *rockylinux9_12_0_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_0_1 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.0.1-test-x86_64:
  <<: *rockylinux9_12_0_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux9_12_0_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.0.1
      artifacts: true
    - job: rockylinux9-v12.0.1-cudnn8
      optional: true

rockylinux9-v12.0.1-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux9_12_0_1_only
  needs:
    - job: rockylinux9-v12.0.1
    - job: rockylinux9-v12.0.1-test-x86_64
      optional: true
  variables:
    <<: *rockylinux9_12_0_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux9_12_0_1 == "true"'
    - if: '$all == "true"'

rockylinux9-v12.0.1-deploy:
  <<: *deploy_definition
  <<: *rockylinux9_12_0_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux9_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux9-v12.0.1
      artifacts: true
    - job: rockylinux9-v12.0.1-cudnn8
      optional: true
    - job: rockylinux9-v12.0.1-test-arm64
      optional: true
    - job: rockylinux9-v12.0.1-scan-arm64
      optional: true
    - job: rockylinux9-v12.0.1-test-x86_64
      optional: true
    - job: rockylinux9-v12.0.1-scan-x86_64
      optional: true


.ubi7_12_0_1_variables: &ubi7_12_0_1_variables
  DIST_BASE_PATH: "dist/12.0.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "12.0.1"

.ubi7_12_0_1_only: &ubi7_12_0_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_12_0_1_variables
  rules:
    - if: '$ubi7_12_0_1 == "true"'
    - if: '$all == "true"'

ubi7-v12.0.1:
  <<: *cuda_base_definition
  <<: *ubi7_12_0_1_only

ubi7-v12.0.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_12_0_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_12_0_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v12.0.1
      artifacts: true

ubi7-v12.0.1-test-x86_64:
  <<: *ubi7_12_0_1_only
  <<: *test_definition
  variables:
    <<: *ubi7_12_0_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.0.1
      artifacts: true
    - job: ubi7-v12.0.1-cudnn8
      optional: true

ubi7-v12.0.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_12_0_1_only
  needs:
    - job: ubi7-v12.0.1
    - job: ubi7-v12.0.1-test-x86_64
      optional: true
  variables:
    <<: *ubi7_12_0_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_0_1 == "true"'
    - if: '$all == "true"'

ubi7-v12.0.1-deploy:
  <<: *deploy_definition
  <<: *ubi7_12_0_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.0.1
      artifacts: true
    - job: ubi7-v12.0.1-cudnn8
      optional: true
    - job: ubi7-v12.0.1-test-x86_64
      optional: true
    - job: ubi7-v12.0.1-scan-x86_64
      optional: true


.ubi8_12_0_1_variables: &ubi8_12_0_1_variables
  DIST_BASE_PATH: "dist/12.0.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "12.0.1"

.ubi8_12_0_1_only: &ubi8_12_0_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_12_0_1_variables
  rules:
    - if: '$ubi8_12_0_1 == "true"'
    - if: '$all == "true"'

ubi8-v12.0.1:
  <<: *cuda_base_definition
  <<: *ubi8_12_0_1_only

ubi8-v12.0.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_12_0_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_12_0_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubi8-v12.0.1
      artifacts: true

ubi8-v12.0.1-test-arm64:
  <<: *ubi8_12_0_1_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_0_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.0.1
      artifacts: true
    - job: ubi8-v12.0.1-cudnn8
      optional: true

ubi8-v12.0.1-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_12_0_1_only
  needs:
    - job: ubi8-v12.0.1
    - job: ubi8-v12.0.1-test-arm64
      optional: true
  variables:
    <<: *ubi8_12_0_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_0_1 == "true"'
    - if: '$all == "true"'

ubi8-v12.0.1-test-x86_64:
  <<: *ubi8_12_0_1_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_0_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.0.1
      artifacts: true
    - job: ubi8-v12.0.1-cudnn8
      optional: true

ubi8-v12.0.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_12_0_1_only
  needs:
    - job: ubi8-v12.0.1
    - job: ubi8-v12.0.1-test-x86_64
      optional: true
  variables:
    <<: *ubi8_12_0_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_0_1 == "true"'
    - if: '$all == "true"'

ubi8-v12.0.1-deploy:
  <<: *deploy_definition
  <<: *ubi8_12_0_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.0.1
      artifacts: true
    - job: ubi8-v12.0.1-cudnn8
      optional: true
    - job: ubi8-v12.0.1-test-arm64
      optional: true
    - job: ubi8-v12.0.1-scan-arm64
      optional: true
    - job: ubi8-v12.0.1-test-x86_64
      optional: true
    - job: ubi8-v12.0.1-scan-x86_64
      optional: true


.ubi9_12_0_1_variables: &ubi9_12_0_1_variables
  DIST_BASE_PATH: "dist/12.0.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi9"
  OS_NAME: "ubi"
  OS_VERSION: "9"
  CUDA_VERSION: "12.0.1"

.ubi9_12_0_1_only: &ubi9_12_0_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi9_12_0_1_variables
  rules:
    - if: '$ubi9_12_0_1 == "true"'
    - if: '$all == "true"'

ubi9-v12.0.1:
  <<: *cuda_base_definition
  <<: *ubi9_12_0_1_only

ubi9-v12.0.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubi9_12_0_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi9_12_0_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi9-v12.0.1
      artifacts: true

ubi9-v12.0.1-test-arm64:
  <<: *ubi9_12_0_1_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_0_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.0.1
      artifacts: true
    - job: ubi9-v12.0.1-cudnn8
      optional: true

ubi9-v12.0.1-scan-arm64:
  <<: *scan_definition
  <<: *ubi9_12_0_1_only
  needs:
    - job: ubi9-v12.0.1
    - job: ubi9-v12.0.1-test-arm64
      optional: true
  variables:
    <<: *ubi9_12_0_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_0_1 == "true"'
    - if: '$all == "true"'

ubi9-v12.0.1-test-x86_64:
  <<: *ubi9_12_0_1_only
  <<: *test_definition
  variables:
    <<: *ubi9_12_0_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.0.1
      artifacts: true
    - job: ubi9-v12.0.1-cudnn8
      optional: true

ubi9-v12.0.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi9_12_0_1_only
  needs:
    - job: ubi9-v12.0.1
    - job: ubi9-v12.0.1-test-x86_64
      optional: true
  variables:
    <<: *ubi9_12_0_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi9_12_0_1 == "true"'
    - if: '$all == "true"'

ubi9-v12.0.1-deploy:
  <<: *deploy_definition
  <<: *ubi9_12_0_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi9_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi9-v12.0.1
      artifacts: true
    - job: ubi9-v12.0.1-cudnn8
      optional: true
    - job: ubi9-v12.0.1-test-arm64
      optional: true
    - job: ubi9-v12.0.1-scan-arm64
      optional: true
    - job: ubi9-v12.0.1-test-x86_64
      optional: true
    - job: ubi9-v12.0.1-scan-x86_64
      optional: true


.ubuntu20_04_12_0_1_variables: &ubuntu20_04_12_0_1_variables
  DIST_BASE_PATH: "dist/12.0.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "12.0.1"

.ubuntu20_04_12_0_1_only: &ubuntu20_04_12_0_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_12_0_1_variables
  rules:
    - if: '$ubuntu20_04_12_0_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.0.1:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_12_0_1_only

ubuntu20.04-v12.0.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_12_0_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_12_0_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu20.04-v12.0.1
      artifacts: true

ubuntu20.04-v12.0.1-test-arm64:
  <<: *ubuntu20_04_12_0_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_0_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.0.1
      artifacts: true
    - job: ubuntu20.04-v12.0.1-cudnn8
      optional: true

ubuntu20.04-v12.0.1-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_0_1_only
  needs:
    - job: ubuntu20.04-v12.0.1
    - job: ubuntu20.04-v12.0.1-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_12_0_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_0_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.0.1-test-x86_64:
  <<: *ubuntu20_04_12_0_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_0_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.0.1
      artifacts: true
    - job: ubuntu20.04-v12.0.1-cudnn8
      optional: true

ubuntu20.04-v12.0.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_0_1_only
  needs:
    - job: ubuntu20.04-v12.0.1
    - job: ubuntu20.04-v12.0.1-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_12_0_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_0_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.0.1-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_12_0_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.0.1
      artifacts: true
    - job: ubuntu20.04-v12.0.1-cudnn8
      optional: true
    - job: ubuntu20.04-v12.0.1-test-arm64
      optional: true
    - job: ubuntu20.04-v12.0.1-scan-arm64
      optional: true
    - job: ubuntu20.04-v12.0.1-test-x86_64
      optional: true
    - job: ubuntu20.04-v12.0.1-scan-x86_64
      optional: true


.ubuntu22_04_12_0_1_variables: &ubuntu22_04_12_0_1_variables
  DIST_BASE_PATH: "dist/12.0.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu22.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "22.04"
  CUDA_VERSION: "12.0.1"

.ubuntu22_04_12_0_1_only: &ubuntu22_04_12_0_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu22_04_12_0_1_variables
  rules:
    - if: '$ubuntu22_04_12_0_1 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.0.1:
  <<: *cuda_base_definition
  <<: *ubuntu22_04_12_0_1_only

ubuntu22.04-v12.0.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu22_04_12_0_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu22_04_12_0_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu22.04-v12.0.1
      artifacts: true

ubuntu22.04-v12.0.1-test-arm64:
  <<: *ubuntu22_04_12_0_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_0_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.0.1
      artifacts: true
    - job: ubuntu22.04-v12.0.1-cudnn8
      optional: true

ubuntu22.04-v12.0.1-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_0_1_only
  needs:
    - job: ubuntu22.04-v12.0.1
    - job: ubuntu22.04-v12.0.1-test-arm64
      optional: true
  variables:
    <<: *ubuntu22_04_12_0_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_0_1 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.0.1-test-x86_64:
  <<: *ubuntu22_04_12_0_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_0_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.0.1
      artifacts: true
    - job: ubuntu22.04-v12.0.1-cudnn8
      optional: true

ubuntu22.04-v12.0.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_0_1_only
  needs:
    - job: ubuntu22.04-v12.0.1
    - job: ubuntu22.04-v12.0.1-test-x86_64
      optional: true
  variables:
    <<: *ubuntu22_04_12_0_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_0_1 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.0.1-deploy:
  <<: *deploy_definition
  <<: *ubuntu22_04_12_0_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu22_04_12_0_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.0.1
      artifacts: true
    - job: ubuntu22.04-v12.0.1-cudnn8
      optional: true
    - job: ubuntu22.04-v12.0.1-test-arm64
      optional: true
    - job: ubuntu22.04-v12.0.1-scan-arm64
      optional: true
    - job: ubuntu22.04-v12.0.1-test-x86_64
      optional: true
    - job: ubuntu22.04-v12.0.1-scan-x86_64
      optional: true


.centos7_12_0_0_variables: &centos7_12_0_0_variables
  DIST_BASE_PATH: "dist/12.0.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "12.0.0"

.centos7_12_0_0_only: &centos7_12_0_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_12_0_0_variables
  rules:
    - if: '$centos7_12_0_0 == "true"'
    - if: '$all == "true"'

centos7-v12.0.0:
  <<: *cuda_base_definition
  <<: *centos7_12_0_0_only

centos7-v12.0.0-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_12_0_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_12_0_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v12.0.0
      artifacts: true

centos7-v12.0.0-test-x86_64:
  <<: *centos7_12_0_0_only
  <<: *test_definition
  variables:
    <<: *centos7_12_0_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.0.0
      artifacts: true
    - job: centos7-v12.0.0-cudnn8
      optional: true

centos7-v12.0.0-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_12_0_0_only
  needs:
    - job: centos7-v12.0.0
    - job: centos7-v12.0.0-test-x86_64
      optional: true
  variables:
    <<: *centos7_12_0_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_12_0_0 == "true"'
    - if: '$all == "true"'

centos7-v12.0.0-deploy:
  <<: *deploy_definition
  <<: *centos7_12_0_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v12.0.0
      artifacts: true
    - job: centos7-v12.0.0-cudnn8
      optional: true
    - job: centos7-v12.0.0-test-x86_64
      optional: true
    - job: centos7-v12.0.0-scan-x86_64
      optional: true


.rockylinux8_12_0_0_variables: &rockylinux8_12_0_0_variables
  DIST_BASE_PATH: "dist/12.0.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "12.0.0"

.rockylinux8_12_0_0_only: &rockylinux8_12_0_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_12_0_0_variables
  rules:
    - if: '$rockylinux8_12_0_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.0.0:
  <<: *cuda_base_definition
  <<: *rockylinux8_12_0_0_only

rockylinux8-v12.0.0-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_12_0_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_12_0_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: rockylinux8-v12.0.0
      artifacts: true

rockylinux8-v12.0.0-test-arm64:
  <<: *rockylinux8_12_0_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_0_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.0.0
      artifacts: true
    - job: rockylinux8-v12.0.0-cudnn8
      optional: true

rockylinux8-v12.0.0-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_12_0_0_only
  needs:
    - job: rockylinux8-v12.0.0
    - job: rockylinux8-v12.0.0-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_12_0_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_0_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.0.0-test-x86_64:
  <<: *rockylinux8_12_0_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_12_0_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.0.0
      artifacts: true
    - job: rockylinux8-v12.0.0-cudnn8
      optional: true

rockylinux8-v12.0.0-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_12_0_0_only
  needs:
    - job: rockylinux8-v12.0.0
    - job: rockylinux8-v12.0.0-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_12_0_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_12_0_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v12.0.0-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_12_0_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v12.0.0
      artifacts: true
    - job: rockylinux8-v12.0.0-cudnn8
      optional: true
    - job: rockylinux8-v12.0.0-test-arm64
      optional: true
    - job: rockylinux8-v12.0.0-scan-arm64
      optional: true
    - job: rockylinux8-v12.0.0-test-x86_64
      optional: true
    - job: rockylinux8-v12.0.0-scan-x86_64
      optional: true


.ubi7_12_0_0_variables: &ubi7_12_0_0_variables
  DIST_BASE_PATH: "dist/12.0.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "12.0.0"

.ubi7_12_0_0_only: &ubi7_12_0_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_12_0_0_variables
  rules:
    - if: '$ubi7_12_0_0 == "true"'
    - if: '$all == "true"'

ubi7-v12.0.0:
  <<: *cuda_base_definition
  <<: *ubi7_12_0_0_only

ubi7-v12.0.0-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_12_0_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_12_0_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v12.0.0
      artifacts: true

ubi7-v12.0.0-test-x86_64:
  <<: *ubi7_12_0_0_only
  <<: *test_definition
  variables:
    <<: *ubi7_12_0_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.0.0
      artifacts: true
    - job: ubi7-v12.0.0-cudnn8
      optional: true

ubi7-v12.0.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_12_0_0_only
  needs:
    - job: ubi7-v12.0.0
    - job: ubi7-v12.0.0-test-x86_64
      optional: true
  variables:
    <<: *ubi7_12_0_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_12_0_0 == "true"'
    - if: '$all == "true"'

ubi7-v12.0.0-deploy:
  <<: *deploy_definition
  <<: *ubi7_12_0_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v12.0.0
      artifacts: true
    - job: ubi7-v12.0.0-cudnn8
      optional: true
    - job: ubi7-v12.0.0-test-x86_64
      optional: true
    - job: ubi7-v12.0.0-scan-x86_64
      optional: true


.ubi8_12_0_0_variables: &ubi8_12_0_0_variables
  DIST_BASE_PATH: "dist/12.0.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "12.0.0"

.ubi8_12_0_0_only: &ubi8_12_0_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_12_0_0_variables
  rules:
    - if: '$ubi8_12_0_0 == "true"'
    - if: '$all == "true"'

ubi8-v12.0.0:
  <<: *cuda_base_definition
  <<: *ubi8_12_0_0_only

ubi8-v12.0.0-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_12_0_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_12_0_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubi8-v12.0.0
      artifacts: true

ubi8-v12.0.0-test-arm64:
  <<: *ubi8_12_0_0_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_0_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.0.0
      artifacts: true
    - job: ubi8-v12.0.0-cudnn8
      optional: true

ubi8-v12.0.0-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_12_0_0_only
  needs:
    - job: ubi8-v12.0.0
    - job: ubi8-v12.0.0-test-arm64
      optional: true
  variables:
    <<: *ubi8_12_0_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_0_0 == "true"'
    - if: '$all == "true"'

ubi8-v12.0.0-test-x86_64:
  <<: *ubi8_12_0_0_only
  <<: *test_definition
  variables:
    <<: *ubi8_12_0_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.0.0
      artifacts: true
    - job: ubi8-v12.0.0-cudnn8
      optional: true

ubi8-v12.0.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_12_0_0_only
  needs:
    - job: ubi8-v12.0.0
    - job: ubi8-v12.0.0-test-x86_64
      optional: true
  variables:
    <<: *ubi8_12_0_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_12_0_0 == "true"'
    - if: '$all == "true"'

ubi8-v12.0.0-deploy:
  <<: *deploy_definition
  <<: *ubi8_12_0_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v12.0.0
      artifacts: true
    - job: ubi8-v12.0.0-cudnn8
      optional: true
    - job: ubi8-v12.0.0-test-arm64
      optional: true
    - job: ubi8-v12.0.0-scan-arm64
      optional: true
    - job: ubi8-v12.0.0-test-x86_64
      optional: true
    - job: ubi8-v12.0.0-scan-x86_64
      optional: true


.ubuntu20_04_12_0_0_variables: &ubuntu20_04_12_0_0_variables
  DIST_BASE_PATH: "dist/12.0.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "12.0.0"

.ubuntu20_04_12_0_0_only: &ubuntu20_04_12_0_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_12_0_0_variables
  rules:
    - if: '$ubuntu20_04_12_0_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.0.0:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_12_0_0_only

ubuntu20.04-v12.0.0-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_12_0_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_12_0_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu20.04-v12.0.0
      artifacts: true

ubuntu20.04-v12.0.0-test-arm64:
  <<: *ubuntu20_04_12_0_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_0_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.0.0
      artifacts: true
    - job: ubuntu20.04-v12.0.0-cudnn8
      optional: true

ubuntu20.04-v12.0.0-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_0_0_only
  needs:
    - job: ubuntu20.04-v12.0.0
    - job: ubuntu20.04-v12.0.0-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_12_0_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_0_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.0.0-test-x86_64:
  <<: *ubuntu20_04_12_0_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_12_0_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.0.0
      artifacts: true
    - job: ubuntu20.04-v12.0.0-cudnn8
      optional: true

ubuntu20.04-v12.0.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_12_0_0_only
  needs:
    - job: ubuntu20.04-v12.0.0
    - job: ubuntu20.04-v12.0.0-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_12_0_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_12_0_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v12.0.0-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_12_0_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v12.0.0
      artifacts: true
    - job: ubuntu20.04-v12.0.0-cudnn8
      optional: true
    - job: ubuntu20.04-v12.0.0-test-arm64
      optional: true
    - job: ubuntu20.04-v12.0.0-scan-arm64
      optional: true
    - job: ubuntu20.04-v12.0.0-test-x86_64
      optional: true
    - job: ubuntu20.04-v12.0.0-scan-x86_64
      optional: true


.ubuntu22_04_12_0_0_variables: &ubuntu22_04_12_0_0_variables
  DIST_BASE_PATH: "dist/12.0.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu22.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "22.04"
  CUDA_VERSION: "12.0.0"

.ubuntu22_04_12_0_0_only: &ubuntu22_04_12_0_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu22_04_12_0_0_variables
  rules:
    - if: '$ubuntu22_04_12_0_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.0.0:
  <<: *cuda_base_definition
  <<: *ubuntu22_04_12_0_0_only

ubuntu22.04-v12.0.0-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu22_04_12_0_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu22_04_12_0_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu22.04-v12.0.0
      artifacts: true

ubuntu22.04-v12.0.0-test-arm64:
  <<: *ubuntu22_04_12_0_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_0_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.0.0
      artifacts: true
    - job: ubuntu22.04-v12.0.0-cudnn8
      optional: true

ubuntu22.04-v12.0.0-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_0_0_only
  needs:
    - job: ubuntu22.04-v12.0.0
    - job: ubuntu22.04-v12.0.0-test-arm64
      optional: true
  variables:
    <<: *ubuntu22_04_12_0_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_0_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.0.0-test-x86_64:
  <<: *ubuntu22_04_12_0_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_12_0_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.0.0
      artifacts: true
    - job: ubuntu22.04-v12.0.0-cudnn8
      optional: true

ubuntu22.04-v12.0.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu22_04_12_0_0_only
  needs:
    - job: ubuntu22.04-v12.0.0
    - job: ubuntu22.04-v12.0.0-test-x86_64
      optional: true
  variables:
    <<: *ubuntu22_04_12_0_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_12_0_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v12.0.0-deploy:
  <<: *deploy_definition
  <<: *ubuntu22_04_12_0_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu22_04_12_0_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v12.0.0
      artifacts: true
    - job: ubuntu22.04-v12.0.0-cudnn8
      optional: true
    - job: ubuntu22.04-v12.0.0-test-arm64
      optional: true
    - job: ubuntu22.04-v12.0.0-scan-arm64
      optional: true
    - job: ubuntu22.04-v12.0.0-test-x86_64
      optional: true
    - job: ubuntu22.04-v12.0.0-scan-x86_64
      optional: true


.centos7_11_8_0_variables: &centos7_11_8_0_variables
  DIST_BASE_PATH: "dist/11.8.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "11.8.0"

.centos7_11_8_0_only: &centos7_11_8_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_11_8_0_variables
  rules:
    - if: '$centos7_11_8_0 == "true"'
    - if: '$all == "true"'

centos7-v11.8.0:
  <<: *cuda_base_definition
  <<: *centos7_11_8_0_only

centos7-v11.8.0-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_11_8_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_11_8_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v11.8.0
      artifacts: true

centos7-v11.8.0-test-x86_64:
  <<: *centos7_11_8_0_only
  <<: *test_definition
  variables:
    <<: *centos7_11_8_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.8.0
      artifacts: true
    - job: centos7-v11.8.0-cudnn8
      optional: true

centos7-v11.8.0-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_11_8_0_only
  needs:
    - job: centos7-v11.8.0
    - job: centos7-v11.8.0-test-x86_64
      optional: true
  variables:
    <<: *centos7_11_8_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_11_8_0 == "true"'
    - if: '$all == "true"'

centos7-v11.8.0-deploy:
  <<: *deploy_definition
  <<: *centos7_11_8_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.8.0
      artifacts: true
    - job: centos7-v11.8.0-cudnn8
      optional: true
    - job: centos7-v11.8.0-test-x86_64
      optional: true
    - job: centos7-v11.8.0-scan-x86_64
      optional: true


.rockylinux8_11_8_0_variables: &rockylinux8_11_8_0_variables
  DIST_BASE_PATH: "dist/11.8.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "11.8.0"

.rockylinux8_11_8_0_only: &rockylinux8_11_8_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_11_8_0_variables
  rules:
    - if: '$rockylinux8_11_8_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.8.0:
  <<: *cuda_base_definition
  <<: *rockylinux8_11_8_0_only

rockylinux8-v11.8.0-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_11_8_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_11_8_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: rockylinux8-v11.8.0
      artifacts: true

rockylinux8-v11.8.0-test-arm64:
  <<: *rockylinux8_11_8_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_8_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.8.0
      artifacts: true
    - job: rockylinux8-v11.8.0-cudnn8
      optional: true

rockylinux8-v11.8.0-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_11_8_0_only
  needs:
    - job: rockylinux8-v11.8.0
    - job: rockylinux8-v11.8.0-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_11_8_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_8_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.8.0-test-x86_64:
  <<: *rockylinux8_11_8_0_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_8_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.8.0
      artifacts: true
    - job: rockylinux8-v11.8.0-cudnn8
      optional: true

rockylinux8-v11.8.0-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_11_8_0_only
  needs:
    - job: rockylinux8-v11.8.0
    - job: rockylinux8-v11.8.0-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_11_8_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_8_0 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.8.0-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_11_8_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.8.0
      artifacts: true
    - job: rockylinux8-v11.8.0-cudnn8
      optional: true
    - job: rockylinux8-v11.8.0-test-arm64
      optional: true
    - job: rockylinux8-v11.8.0-scan-arm64
      optional: true
    - job: rockylinux8-v11.8.0-test-x86_64
      optional: true
    - job: rockylinux8-v11.8.0-scan-x86_64
      optional: true


.ubi7_11_8_0_variables: &ubi7_11_8_0_variables
  DIST_BASE_PATH: "dist/11.8.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "11.8.0"

.ubi7_11_8_0_only: &ubi7_11_8_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_11_8_0_variables
  rules:
    - if: '$ubi7_11_8_0 == "true"'
    - if: '$all == "true"'

ubi7-v11.8.0:
  <<: *cuda_base_definition
  <<: *ubi7_11_8_0_only

ubi7-v11.8.0-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_11_8_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_11_8_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v11.8.0
      artifacts: true

ubi7-v11.8.0-test-x86_64:
  <<: *ubi7_11_8_0_only
  <<: *test_definition
  variables:
    <<: *ubi7_11_8_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.8.0
      artifacts: true
    - job: ubi7-v11.8.0-cudnn8
      optional: true

ubi7-v11.8.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_11_8_0_only
  needs:
    - job: ubi7-v11.8.0
    - job: ubi7-v11.8.0-test-x86_64
      optional: true
  variables:
    <<: *ubi7_11_8_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_8_0 == "true"'
    - if: '$all == "true"'

ubi7-v11.8.0-deploy:
  <<: *deploy_definition
  <<: *ubi7_11_8_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.8.0
      artifacts: true
    - job: ubi7-v11.8.0-cudnn8
      optional: true
    - job: ubi7-v11.8.0-test-x86_64
      optional: true
    - job: ubi7-v11.8.0-scan-x86_64
      optional: true


.ubi8_11_8_0_variables: &ubi8_11_8_0_variables
  DIST_BASE_PATH: "dist/11.8.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "11.8.0"

.ubi8_11_8_0_only: &ubi8_11_8_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_11_8_0_variables
  rules:
    - if: '$ubi8_11_8_0 == "true"'
    - if: '$all == "true"'

ubi8-v11.8.0:
  <<: *cuda_base_definition
  <<: *ubi8_11_8_0_only

ubi8-v11.8.0-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_11_8_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_11_8_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubi8-v11.8.0
      artifacts: true

ubi8-v11.8.0-test-arm64:
  <<: *ubi8_11_8_0_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_8_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.8.0
      artifacts: true
    - job: ubi8-v11.8.0-cudnn8
      optional: true

ubi8-v11.8.0-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_11_8_0_only
  needs:
    - job: ubi8-v11.8.0
    - job: ubi8-v11.8.0-test-arm64
      optional: true
  variables:
    <<: *ubi8_11_8_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_8_0 == "true"'
    - if: '$all == "true"'

ubi8-v11.8.0-test-x86_64:
  <<: *ubi8_11_8_0_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_8_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.8.0
      artifacts: true
    - job: ubi8-v11.8.0-cudnn8
      optional: true

ubi8-v11.8.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_11_8_0_only
  needs:
    - job: ubi8-v11.8.0
    - job: ubi8-v11.8.0-test-x86_64
      optional: true
  variables:
    <<: *ubi8_11_8_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_8_0 == "true"'
    - if: '$all == "true"'

ubi8-v11.8.0-deploy:
  <<: *deploy_definition
  <<: *ubi8_11_8_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.8.0
      artifacts: true
    - job: ubi8-v11.8.0-cudnn8
      optional: true
    - job: ubi8-v11.8.0-test-arm64
      optional: true
    - job: ubi8-v11.8.0-scan-arm64
      optional: true
    - job: ubi8-v11.8.0-test-x86_64
      optional: true
    - job: ubi8-v11.8.0-scan-x86_64
      optional: true


.ubuntu20_04_11_8_0_variables: &ubuntu20_04_11_8_0_variables
  DIST_BASE_PATH: "dist/11.8.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "11.8.0"

.ubuntu20_04_11_8_0_only: &ubuntu20_04_11_8_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_11_8_0_variables
  rules:
    - if: '$ubuntu20_04_11_8_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.8.0:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_11_8_0_only

ubuntu20.04-v11.8.0-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_11_8_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_11_8_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu20.04-v11.8.0
      artifacts: true

ubuntu20.04-v11.8.0-test-arm64:
  <<: *ubuntu20_04_11_8_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_8_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.8.0
      artifacts: true
    - job: ubuntu20.04-v11.8.0-cudnn8
      optional: true

ubuntu20.04-v11.8.0-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_8_0_only
  needs:
    - job: ubuntu20.04-v11.8.0
    - job: ubuntu20.04-v11.8.0-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_11_8_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_8_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.8.0-test-x86_64:
  <<: *ubuntu20_04_11_8_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_8_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.8.0
      artifacts: true
    - job: ubuntu20.04-v11.8.0-cudnn8
      optional: true

ubuntu20.04-v11.8.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_8_0_only
  needs:
    - job: ubuntu20.04-v11.8.0
    - job: ubuntu20.04-v11.8.0-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_11_8_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_8_0 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.8.0-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_11_8_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.8.0
      artifacts: true
    - job: ubuntu20.04-v11.8.0-cudnn8
      optional: true
    - job: ubuntu20.04-v11.8.0-test-arm64
      optional: true
    - job: ubuntu20.04-v11.8.0-scan-arm64
      optional: true
    - job: ubuntu20.04-v11.8.0-test-x86_64
      optional: true
    - job: ubuntu20.04-v11.8.0-scan-x86_64
      optional: true


.ubuntu22_04_11_8_0_variables: &ubuntu22_04_11_8_0_variables
  DIST_BASE_PATH: "dist/11.8.0"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu22.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "22.04"
  CUDA_VERSION: "11.8.0"

.ubuntu22_04_11_8_0_only: &ubuntu22_04_11_8_0_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu22_04_11_8_0_variables
  rules:
    - if: '$ubuntu22_04_11_8_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v11.8.0:
  <<: *cuda_base_definition
  <<: *ubuntu22_04_11_8_0_only

ubuntu22.04-v11.8.0-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu22_04_11_8_0_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu22_04_11_8_0_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu22.04-v11.8.0
      artifacts: true

ubuntu22.04-v11.8.0-test-arm64:
  <<: *ubuntu22_04_11_8_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_11_8_0_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v11.8.0
      artifacts: true
    - job: ubuntu22.04-v11.8.0-cudnn8
      optional: true

ubuntu22.04-v11.8.0-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu22_04_11_8_0_only
  needs:
    - job: ubuntu22.04-v11.8.0
    - job: ubuntu22.04-v11.8.0-test-arm64
      optional: true
  variables:
    <<: *ubuntu22_04_11_8_0_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_11_8_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v11.8.0-test-x86_64:
  <<: *ubuntu22_04_11_8_0_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_11_8_0_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v11.8.0
      artifacts: true
    - job: ubuntu22.04-v11.8.0-cudnn8
      optional: true

ubuntu22.04-v11.8.0-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu22_04_11_8_0_only
  needs:
    - job: ubuntu22.04-v11.8.0
    - job: ubuntu22.04-v11.8.0-test-x86_64
      optional: true
  variables:
    <<: *ubuntu22_04_11_8_0_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_11_8_0 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v11.8.0-deploy:
  <<: *deploy_definition
  <<: *ubuntu22_04_11_8_0_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu22_04_11_8_0 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v11.8.0
      artifacts: true
    - job: ubuntu22.04-v11.8.0-cudnn8
      optional: true
    - job: ubuntu22.04-v11.8.0-test-arm64
      optional: true
    - job: ubuntu22.04-v11.8.0-scan-arm64
      optional: true
    - job: ubuntu22.04-v11.8.0-test-x86_64
      optional: true
    - job: ubuntu22.04-v11.8.0-scan-x86_64
      optional: true


.centos7_11_7_1_variables: &centos7_11_7_1_variables
  DIST_BASE_PATH: "dist/11.7.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "11.7.1"

.centos7_11_7_1_only: &centos7_11_7_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_11_7_1_variables
  rules:
    - if: '$centos7_11_7_1 == "true"'
    - if: '$all == "true"'

centos7-v11.7.1:
  <<: *cuda_base_definition
  <<: *centos7_11_7_1_only

centos7-v11.7.1-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_11_7_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_11_7_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v11.7.1
      artifacts: true

centos7-v11.7.1-test-x86_64:
  <<: *centos7_11_7_1_only
  <<: *test_definition
  variables:
    <<: *centos7_11_7_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.7.1
      artifacts: true
    - job: centos7-v11.7.1-cudnn8
      optional: true

centos7-v11.7.1-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_11_7_1_only
  needs:
    - job: centos7-v11.7.1
    - job: centos7-v11.7.1-test-x86_64
      optional: true
  variables:
    <<: *centos7_11_7_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_11_7_1 == "true"'
    - if: '$all == "true"'

centos7-v11.7.1-deploy:
  <<: *deploy_definition
  <<: *centos7_11_7_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.7.1
      artifacts: true
    - job: centos7-v11.7.1-cudnn8
      optional: true
    - job: centos7-v11.7.1-test-x86_64
      optional: true
    - job: centos7-v11.7.1-scan-x86_64
      optional: true


.rockylinux8_11_7_1_variables: &rockylinux8_11_7_1_variables
  DIST_BASE_PATH: "dist/11.7.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "11.7.1"

.rockylinux8_11_7_1_only: &rockylinux8_11_7_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_11_7_1_variables
  rules:
    - if: '$rockylinux8_11_7_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.7.1:
  <<: *cuda_base_definition
  <<: *rockylinux8_11_7_1_only

rockylinux8-v11.7.1-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_11_7_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_11_7_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: rockylinux8-v11.7.1
      artifacts: true

rockylinux8-v11.7.1-test-arm64:
  <<: *rockylinux8_11_7_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_7_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.7.1
      artifacts: true
    - job: rockylinux8-v11.7.1-cudnn8
      optional: true

rockylinux8-v11.7.1-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_11_7_1_only
  needs:
    - job: rockylinux8-v11.7.1
    - job: rockylinux8-v11.7.1-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_11_7_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_7_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.7.1-test-x86_64:
  <<: *rockylinux8_11_7_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_7_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.7.1
      artifacts: true
    - job: rockylinux8-v11.7.1-cudnn8
      optional: true

rockylinux8-v11.7.1-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_11_7_1_only
  needs:
    - job: rockylinux8-v11.7.1
    - job: rockylinux8-v11.7.1-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_11_7_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_7_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.7.1-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_11_7_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.7.1
      artifacts: true
    - job: rockylinux8-v11.7.1-cudnn8
      optional: true
    - job: rockylinux8-v11.7.1-test-arm64
      optional: true
    - job: rockylinux8-v11.7.1-scan-arm64
      optional: true
    - job: rockylinux8-v11.7.1-test-x86_64
      optional: true
    - job: rockylinux8-v11.7.1-scan-x86_64
      optional: true


.ubi7_11_7_1_variables: &ubi7_11_7_1_variables
  DIST_BASE_PATH: "dist/11.7.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "11.7.1"

.ubi7_11_7_1_only: &ubi7_11_7_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_11_7_1_variables
  rules:
    - if: '$ubi7_11_7_1 == "true"'
    - if: '$all == "true"'

ubi7-v11.7.1:
  <<: *cuda_base_definition
  <<: *ubi7_11_7_1_only

ubi7-v11.7.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_11_7_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_11_7_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v11.7.1
      artifacts: true

ubi7-v11.7.1-test-x86_64:
  <<: *ubi7_11_7_1_only
  <<: *test_definition
  variables:
    <<: *ubi7_11_7_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.7.1
      artifacts: true
    - job: ubi7-v11.7.1-cudnn8
      optional: true

ubi7-v11.7.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_11_7_1_only
  needs:
    - job: ubi7-v11.7.1
    - job: ubi7-v11.7.1-test-x86_64
      optional: true
  variables:
    <<: *ubi7_11_7_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_7_1 == "true"'
    - if: '$all == "true"'

ubi7-v11.7.1-deploy:
  <<: *deploy_definition
  <<: *ubi7_11_7_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.7.1
      artifacts: true
    - job: ubi7-v11.7.1-cudnn8
      optional: true
    - job: ubi7-v11.7.1-test-x86_64
      optional: true
    - job: ubi7-v11.7.1-scan-x86_64
      optional: true


.ubi8_11_7_1_variables: &ubi8_11_7_1_variables
  DIST_BASE_PATH: "dist/11.7.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "11.7.1"

.ubi8_11_7_1_only: &ubi8_11_7_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_11_7_1_variables
  rules:
    - if: '$ubi8_11_7_1 == "true"'
    - if: '$all == "true"'

ubi8-v11.7.1:
  <<: *cuda_base_definition
  <<: *ubi8_11_7_1_only

ubi8-v11.7.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_11_7_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_11_7_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubi8-v11.7.1
      artifacts: true

ubi8-v11.7.1-test-arm64:
  <<: *ubi8_11_7_1_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_7_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.7.1
      artifacts: true
    - job: ubi8-v11.7.1-cudnn8
      optional: true

ubi8-v11.7.1-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_11_7_1_only
  needs:
    - job: ubi8-v11.7.1
    - job: ubi8-v11.7.1-test-arm64
      optional: true
  variables:
    <<: *ubi8_11_7_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_7_1 == "true"'
    - if: '$all == "true"'

ubi8-v11.7.1-test-x86_64:
  <<: *ubi8_11_7_1_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_7_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.7.1
      artifacts: true
    - job: ubi8-v11.7.1-cudnn8
      optional: true

ubi8-v11.7.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_11_7_1_only
  needs:
    - job: ubi8-v11.7.1
    - job: ubi8-v11.7.1-test-x86_64
      optional: true
  variables:
    <<: *ubi8_11_7_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_7_1 == "true"'
    - if: '$all == "true"'

ubi8-v11.7.1-deploy:
  <<: *deploy_definition
  <<: *ubi8_11_7_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.7.1
      artifacts: true
    - job: ubi8-v11.7.1-cudnn8
      optional: true
    - job: ubi8-v11.7.1-test-arm64
      optional: true
    - job: ubi8-v11.7.1-scan-arm64
      optional: true
    - job: ubi8-v11.7.1-test-x86_64
      optional: true
    - job: ubi8-v11.7.1-scan-x86_64
      optional: true


.ubuntu20_04_11_7_1_variables: &ubuntu20_04_11_7_1_variables
  DIST_BASE_PATH: "dist/11.7.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "11.7.1"

.ubuntu20_04_11_7_1_only: &ubuntu20_04_11_7_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_11_7_1_variables
  rules:
    - if: '$ubuntu20_04_11_7_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.7.1:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_11_7_1_only

ubuntu20.04-v11.7.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_11_7_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_11_7_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu20.04-v11.7.1
      artifacts: true

ubuntu20.04-v11.7.1-test-arm64:
  <<: *ubuntu20_04_11_7_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_7_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.7.1
      artifacts: true
    - job: ubuntu20.04-v11.7.1-cudnn8
      optional: true

ubuntu20.04-v11.7.1-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_7_1_only
  needs:
    - job: ubuntu20.04-v11.7.1
    - job: ubuntu20.04-v11.7.1-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_11_7_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_7_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.7.1-test-x86_64:
  <<: *ubuntu20_04_11_7_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_7_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.7.1
      artifacts: true
    - job: ubuntu20.04-v11.7.1-cudnn8
      optional: true

ubuntu20.04-v11.7.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_7_1_only
  needs:
    - job: ubuntu20.04-v11.7.1
    - job: ubuntu20.04-v11.7.1-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_11_7_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_7_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.7.1-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_11_7_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.7.1
      artifacts: true
    - job: ubuntu20.04-v11.7.1-cudnn8
      optional: true
    - job: ubuntu20.04-v11.7.1-test-arm64
      optional: true
    - job: ubuntu20.04-v11.7.1-scan-arm64
      optional: true
    - job: ubuntu20.04-v11.7.1-test-x86_64
      optional: true
    - job: ubuntu20.04-v11.7.1-scan-x86_64
      optional: true


.ubuntu22_04_11_7_1_variables: &ubuntu22_04_11_7_1_variables
  DIST_BASE_PATH: "dist/11.7.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu22.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "22.04"
  CUDA_VERSION: "11.7.1"

.ubuntu22_04_11_7_1_only: &ubuntu22_04_11_7_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu22_04_11_7_1_variables
  rules:
    - if: '$ubuntu22_04_11_7_1 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v11.7.1:
  <<: *cuda_base_definition
  <<: *ubuntu22_04_11_7_1_only

ubuntu22.04-v11.7.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu22_04_11_7_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu22_04_11_7_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu22.04-v11.7.1
      artifacts: true

ubuntu22.04-v11.7.1-test-arm64:
  <<: *ubuntu22_04_11_7_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_11_7_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v11.7.1
      artifacts: true
    - job: ubuntu22.04-v11.7.1-cudnn8
      optional: true

ubuntu22.04-v11.7.1-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu22_04_11_7_1_only
  needs:
    - job: ubuntu22.04-v11.7.1
    - job: ubuntu22.04-v11.7.1-test-arm64
      optional: true
  variables:
    <<: *ubuntu22_04_11_7_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_11_7_1 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v11.7.1-test-x86_64:
  <<: *ubuntu22_04_11_7_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu22_04_11_7_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v11.7.1
      artifacts: true
    - job: ubuntu22.04-v11.7.1-cudnn8
      optional: true

ubuntu22.04-v11.7.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu22_04_11_7_1_only
  needs:
    - job: ubuntu22.04-v11.7.1
    - job: ubuntu22.04-v11.7.1-test-x86_64
      optional: true
  variables:
    <<: *ubuntu22_04_11_7_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu22_04_11_7_1 == "true"'
    - if: '$all == "true"'

ubuntu22.04-v11.7.1-deploy:
  <<: *deploy_definition
  <<: *ubuntu22_04_11_7_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu22_04_11_7_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu22.04-v11.7.1
      artifacts: true
    - job: ubuntu22.04-v11.7.1-cudnn8
      optional: true
    - job: ubuntu22.04-v11.7.1-test-arm64
      optional: true
    - job: ubuntu22.04-v11.7.1-scan-arm64
      optional: true
    - job: ubuntu22.04-v11.7.1-test-x86_64
      optional: true
    - job: ubuntu22.04-v11.7.1-scan-x86_64
      optional: true


.centos7_11_6_2_variables: &centos7_11_6_2_variables
  DIST_BASE_PATH: "dist/11.6.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "11.6.2"

.centos7_11_6_2_only: &centos7_11_6_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_11_6_2_variables
  rules:
    - if: '$centos7_11_6_2 == "true"'
    - if: '$all == "true"'

centos7-v11.6.2:
  <<: *cuda_base_definition
  <<: *centos7_11_6_2_only

centos7-v11.6.2-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_11_6_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_11_6_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v11.6.2
      artifacts: true

centos7-v11.6.2-test-x86_64:
  <<: *centos7_11_6_2_only
  <<: *test_definition
  variables:
    <<: *centos7_11_6_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_11_6_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.6.2
      artifacts: true
    - job: centos7-v11.6.2-cudnn8
      optional: true

centos7-v11.6.2-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_11_6_2_only
  needs:
    - job: centos7-v11.6.2
    - job: centos7-v11.6.2-test-x86_64
      optional: true
  variables:
    <<: *centos7_11_6_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_11_6_2 == "true"'
    - if: '$all == "true"'

centos7-v11.6.2-deploy:
  <<: *deploy_definition
  <<: *centos7_11_6_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_11_6_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.6.2
      artifacts: true
    - job: centos7-v11.6.2-cudnn8
      optional: true
    - job: centos7-v11.6.2-test-x86_64
      optional: true
    - job: centos7-v11.6.2-scan-x86_64
      optional: true


.rockylinux8_11_6_2_variables: &rockylinux8_11_6_2_variables
  DIST_BASE_PATH: "dist/11.6.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "11.6.2"

.rockylinux8_11_6_2_only: &rockylinux8_11_6_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_11_6_2_variables
  rules:
    - if: '$rockylinux8_11_6_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.6.2:
  <<: *cuda_base_definition
  <<: *rockylinux8_11_6_2_only

rockylinux8-v11.6.2-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_11_6_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_11_6_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: rockylinux8-v11.6.2
      artifacts: true

rockylinux8-v11.6.2-test-arm64:
  <<: *rockylinux8_11_6_2_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_6_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_6_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.6.2
      artifacts: true
    - job: rockylinux8-v11.6.2-cudnn8
      optional: true

rockylinux8-v11.6.2-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_11_6_2_only
  needs:
    - job: rockylinux8-v11.6.2
    - job: rockylinux8-v11.6.2-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_11_6_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_6_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.6.2-test-x86_64:
  <<: *rockylinux8_11_6_2_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_6_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_6_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.6.2
      artifacts: true
    - job: rockylinux8-v11.6.2-cudnn8
      optional: true

rockylinux8-v11.6.2-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_11_6_2_only
  needs:
    - job: rockylinux8-v11.6.2
    - job: rockylinux8-v11.6.2-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_11_6_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_6_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.6.2-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_11_6_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_11_6_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.6.2
      artifacts: true
    - job: rockylinux8-v11.6.2-cudnn8
      optional: true
    - job: rockylinux8-v11.6.2-test-arm64
      optional: true
    - job: rockylinux8-v11.6.2-scan-arm64
      optional: true
    - job: rockylinux8-v11.6.2-test-x86_64
      optional: true
    - job: rockylinux8-v11.6.2-scan-x86_64
      optional: true


.ubi7_11_6_2_variables: &ubi7_11_6_2_variables
  DIST_BASE_PATH: "dist/11.6.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "11.6.2"

.ubi7_11_6_2_only: &ubi7_11_6_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_11_6_2_variables
  rules:
    - if: '$ubi7_11_6_2 == "true"'
    - if: '$all == "true"'

ubi7-v11.6.2:
  <<: *cuda_base_definition
  <<: *ubi7_11_6_2_only

ubi7-v11.6.2-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_11_6_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_11_6_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v11.6.2
      artifacts: true

ubi7-v11.6.2-test-x86_64:
  <<: *ubi7_11_6_2_only
  <<: *test_definition
  variables:
    <<: *ubi7_11_6_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_6_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.6.2
      artifacts: true
    - job: ubi7-v11.6.2-cudnn8
      optional: true

ubi7-v11.6.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_11_6_2_only
  needs:
    - job: ubi7-v11.6.2
    - job: ubi7-v11.6.2-test-x86_64
      optional: true
  variables:
    <<: *ubi7_11_6_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_6_2 == "true"'
    - if: '$all == "true"'

ubi7-v11.6.2-deploy:
  <<: *deploy_definition
  <<: *ubi7_11_6_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_11_6_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.6.2
      artifacts: true
    - job: ubi7-v11.6.2-cudnn8
      optional: true
    - job: ubi7-v11.6.2-test-x86_64
      optional: true
    - job: ubi7-v11.6.2-scan-x86_64
      optional: true


.ubi8_11_6_2_variables: &ubi8_11_6_2_variables
  DIST_BASE_PATH: "dist/11.6.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "11.6.2"

.ubi8_11_6_2_only: &ubi8_11_6_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_11_6_2_variables
  rules:
    - if: '$ubi8_11_6_2 == "true"'
    - if: '$all == "true"'

ubi8-v11.6.2:
  <<: *cuda_base_definition
  <<: *ubi8_11_6_2_only

ubi8-v11.6.2-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_11_6_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_11_6_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubi8-v11.6.2
      artifacts: true

ubi8-v11.6.2-test-arm64:
  <<: *ubi8_11_6_2_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_6_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_6_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.6.2
      artifacts: true
    - job: ubi8-v11.6.2-cudnn8
      optional: true

ubi8-v11.6.2-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_11_6_2_only
  needs:
    - job: ubi8-v11.6.2
    - job: ubi8-v11.6.2-test-arm64
      optional: true
  variables:
    <<: *ubi8_11_6_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_6_2 == "true"'
    - if: '$all == "true"'

ubi8-v11.6.2-test-x86_64:
  <<: *ubi8_11_6_2_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_6_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_6_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.6.2
      artifacts: true
    - job: ubi8-v11.6.2-cudnn8
      optional: true

ubi8-v11.6.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_11_6_2_only
  needs:
    - job: ubi8-v11.6.2
    - job: ubi8-v11.6.2-test-x86_64
      optional: true
  variables:
    <<: *ubi8_11_6_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_6_2 == "true"'
    - if: '$all == "true"'

ubi8-v11.6.2-deploy:
  <<: *deploy_definition
  <<: *ubi8_11_6_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_11_6_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.6.2
      artifacts: true
    - job: ubi8-v11.6.2-cudnn8
      optional: true
    - job: ubi8-v11.6.2-test-arm64
      optional: true
    - job: ubi8-v11.6.2-scan-arm64
      optional: true
    - job: ubi8-v11.6.2-test-x86_64
      optional: true
    - job: ubi8-v11.6.2-scan-x86_64
      optional: true


.ubuntu20_04_11_6_2_variables: &ubuntu20_04_11_6_2_variables
  DIST_BASE_PATH: "dist/11.6.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "11.6.2"

.ubuntu20_04_11_6_2_only: &ubuntu20_04_11_6_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_11_6_2_variables
  rules:
    - if: '$ubuntu20_04_11_6_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.6.2:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_11_6_2_only

ubuntu20.04-v11.6.2-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_11_6_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_11_6_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu20.04-v11.6.2
      artifacts: true

ubuntu20.04-v11.6.2-test-arm64:
  <<: *ubuntu20_04_11_6_2_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_6_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_6_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.6.2
      artifacts: true
    - job: ubuntu20.04-v11.6.2-cudnn8
      optional: true

ubuntu20.04-v11.6.2-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_6_2_only
  needs:
    - job: ubuntu20.04-v11.6.2
    - job: ubuntu20.04-v11.6.2-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_11_6_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_6_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.6.2-test-x86_64:
  <<: *ubuntu20_04_11_6_2_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_6_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_6_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.6.2
      artifacts: true
    - job: ubuntu20.04-v11.6.2-cudnn8
      optional: true

ubuntu20.04-v11.6.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_6_2_only
  needs:
    - job: ubuntu20.04-v11.6.2
    - job: ubuntu20.04-v11.6.2-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_11_6_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_6_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.6.2-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_11_6_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_11_6_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.6.2
      artifacts: true
    - job: ubuntu20.04-v11.6.2-cudnn8
      optional: true
    - job: ubuntu20.04-v11.6.2-test-arm64
      optional: true
    - job: ubuntu20.04-v11.6.2-scan-arm64
      optional: true
    - job: ubuntu20.04-v11.6.2-test-x86_64
      optional: true
    - job: ubuntu20.04-v11.6.2-scan-x86_64
      optional: true


.centos7_11_6_1_variables: &centos7_11_6_1_variables
  DIST_BASE_PATH: "dist/11.6.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "11.6.1"

.centos7_11_6_1_only: &centos7_11_6_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_11_6_1_variables
  rules:
    - if: '$centos7_11_6_1 == "true"'
    - if: '$all == "true"'

centos7-v11.6.1:
  <<: *cuda_base_definition
  <<: *centos7_11_6_1_only

centos7-v11.6.1-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_11_6_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_11_6_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v11.6.1
      artifacts: true

centos7-v11.6.1-test-x86_64:
  <<: *centos7_11_6_1_only
  <<: *test_definition
  variables:
    <<: *centos7_11_6_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_11_6_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.6.1
      artifacts: true
    - job: centos7-v11.6.1-cudnn8
      optional: true

centos7-v11.6.1-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_11_6_1_only
  needs:
    - job: centos7-v11.6.1
    - job: centos7-v11.6.1-test-x86_64
      optional: true
  variables:
    <<: *centos7_11_6_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_11_6_1 == "true"'
    - if: '$all == "true"'

centos7-v11.6.1-deploy:
  <<: *deploy_definition
  <<: *centos7_11_6_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_11_6_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.6.1
      artifacts: true
    - job: centos7-v11.6.1-cudnn8
      optional: true
    - job: centos7-v11.6.1-test-x86_64
      optional: true
    - job: centos7-v11.6.1-scan-x86_64
      optional: true


.rockylinux8_11_6_1_variables: &rockylinux8_11_6_1_variables
  DIST_BASE_PATH: "dist/11.6.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "11.6.1"

.rockylinux8_11_6_1_only: &rockylinux8_11_6_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_11_6_1_variables
  rules:
    - if: '$rockylinux8_11_6_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.6.1:
  <<: *cuda_base_definition
  <<: *rockylinux8_11_6_1_only

rockylinux8-v11.6.1-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_11_6_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_11_6_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: rockylinux8-v11.6.1
      artifacts: true

rockylinux8-v11.6.1-test-arm64:
  <<: *rockylinux8_11_6_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_6_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_6_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.6.1
      artifacts: true
    - job: rockylinux8-v11.6.1-cudnn8
      optional: true

rockylinux8-v11.6.1-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_11_6_1_only
  needs:
    - job: rockylinux8-v11.6.1
    - job: rockylinux8-v11.6.1-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_11_6_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_6_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.6.1-test-x86_64:
  <<: *rockylinux8_11_6_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_6_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_6_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.6.1
      artifacts: true
    - job: rockylinux8-v11.6.1-cudnn8
      optional: true

rockylinux8-v11.6.1-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_11_6_1_only
  needs:
    - job: rockylinux8-v11.6.1
    - job: rockylinux8-v11.6.1-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_11_6_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_6_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.6.1-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_11_6_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_11_6_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.6.1
      artifacts: true
    - job: rockylinux8-v11.6.1-cudnn8
      optional: true
    - job: rockylinux8-v11.6.1-test-arm64
      optional: true
    - job: rockylinux8-v11.6.1-scan-arm64
      optional: true
    - job: rockylinux8-v11.6.1-test-x86_64
      optional: true
    - job: rockylinux8-v11.6.1-scan-x86_64
      optional: true


.ubi7_11_6_1_variables: &ubi7_11_6_1_variables
  DIST_BASE_PATH: "dist/11.6.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "11.6.1"

.ubi7_11_6_1_only: &ubi7_11_6_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_11_6_1_variables
  rules:
    - if: '$ubi7_11_6_1 == "true"'
    - if: '$all == "true"'

ubi7-v11.6.1:
  <<: *cuda_base_definition
  <<: *ubi7_11_6_1_only

ubi7-v11.6.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_11_6_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_11_6_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v11.6.1
      artifacts: true

ubi7-v11.6.1-test-x86_64:
  <<: *ubi7_11_6_1_only
  <<: *test_definition
  variables:
    <<: *ubi7_11_6_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_6_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.6.1
      artifacts: true
    - job: ubi7-v11.6.1-cudnn8
      optional: true

ubi7-v11.6.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_11_6_1_only
  needs:
    - job: ubi7-v11.6.1
    - job: ubi7-v11.6.1-test-x86_64
      optional: true
  variables:
    <<: *ubi7_11_6_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_6_1 == "true"'
    - if: '$all == "true"'

ubi7-v11.6.1-deploy:
  <<: *deploy_definition
  <<: *ubi7_11_6_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_11_6_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.6.1
      artifacts: true
    - job: ubi7-v11.6.1-cudnn8
      optional: true
    - job: ubi7-v11.6.1-test-x86_64
      optional: true
    - job: ubi7-v11.6.1-scan-x86_64
      optional: true


.ubi8_11_6_1_variables: &ubi8_11_6_1_variables
  DIST_BASE_PATH: "dist/11.6.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "11.6.1"

.ubi8_11_6_1_only: &ubi8_11_6_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_11_6_1_variables
  rules:
    - if: '$ubi8_11_6_1 == "true"'
    - if: '$all == "true"'

ubi8-v11.6.1:
  <<: *cuda_base_definition
  <<: *ubi8_11_6_1_only

ubi8-v11.6.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_11_6_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_11_6_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubi8-v11.6.1
      artifacts: true

ubi8-v11.6.1-test-arm64:
  <<: *ubi8_11_6_1_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_6_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_6_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.6.1
      artifacts: true
    - job: ubi8-v11.6.1-cudnn8
      optional: true

ubi8-v11.6.1-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_11_6_1_only
  needs:
    - job: ubi8-v11.6.1
    - job: ubi8-v11.6.1-test-arm64
      optional: true
  variables:
    <<: *ubi8_11_6_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_6_1 == "true"'
    - if: '$all == "true"'

ubi8-v11.6.1-test-x86_64:
  <<: *ubi8_11_6_1_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_6_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_6_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.6.1
      artifacts: true
    - job: ubi8-v11.6.1-cudnn8
      optional: true

ubi8-v11.6.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_11_6_1_only
  needs:
    - job: ubi8-v11.6.1
    - job: ubi8-v11.6.1-test-x86_64
      optional: true
  variables:
    <<: *ubi8_11_6_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_6_1 == "true"'
    - if: '$all == "true"'

ubi8-v11.6.1-deploy:
  <<: *deploy_definition
  <<: *ubi8_11_6_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_11_6_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.6.1
      artifacts: true
    - job: ubi8-v11.6.1-cudnn8
      optional: true
    - job: ubi8-v11.6.1-test-arm64
      optional: true
    - job: ubi8-v11.6.1-scan-arm64
      optional: true
    - job: ubi8-v11.6.1-test-x86_64
      optional: true
    - job: ubi8-v11.6.1-scan-x86_64
      optional: true


.ubuntu20_04_11_6_1_variables: &ubuntu20_04_11_6_1_variables
  DIST_BASE_PATH: "dist/11.6.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "11.6.1"

.ubuntu20_04_11_6_1_only: &ubuntu20_04_11_6_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_11_6_1_variables
  rules:
    - if: '$ubuntu20_04_11_6_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.6.1:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_11_6_1_only

ubuntu20.04-v11.6.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_11_6_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_11_6_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu20.04-v11.6.1
      artifacts: true

ubuntu20.04-v11.6.1-test-arm64:
  <<: *ubuntu20_04_11_6_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_6_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_6_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.6.1
      artifacts: true
    - job: ubuntu20.04-v11.6.1-cudnn8
      optional: true

ubuntu20.04-v11.6.1-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_6_1_only
  needs:
    - job: ubuntu20.04-v11.6.1
    - job: ubuntu20.04-v11.6.1-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_11_6_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_6_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.6.1-test-x86_64:
  <<: *ubuntu20_04_11_6_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_6_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_6_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.6.1
      artifacts: true
    - job: ubuntu20.04-v11.6.1-cudnn8
      optional: true

ubuntu20.04-v11.6.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_6_1_only
  needs:
    - job: ubuntu20.04-v11.6.1
    - job: ubuntu20.04-v11.6.1-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_11_6_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_6_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.6.1-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_11_6_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_11_6_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.6.1
      artifacts: true
    - job: ubuntu20.04-v11.6.1-cudnn8
      optional: true
    - job: ubuntu20.04-v11.6.1-test-arm64
      optional: true
    - job: ubuntu20.04-v11.6.1-scan-arm64
      optional: true
    - job: ubuntu20.04-v11.6.1-test-x86_64
      optional: true
    - job: ubuntu20.04-v11.6.1-scan-x86_64
      optional: true


.centos7_11_5_2_variables: &centos7_11_5_2_variables
  DIST_BASE_PATH: "dist/11.5.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "11.5.2"

.centos7_11_5_2_only: &centos7_11_5_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_11_5_2_variables
  rules:
    - if: '$centos7_11_5_2 == "true"'
    - if: '$all == "true"'

centos7-v11.5.2:
  <<: *cuda_base_definition
  <<: *centos7_11_5_2_only

centos7-v11.5.2-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_11_5_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_11_5_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v11.5.2
      artifacts: true

centos7-v11.5.2-test-x86_64:
  <<: *centos7_11_5_2_only
  <<: *test_definition
  variables:
    <<: *centos7_11_5_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_11_5_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.5.2
      artifacts: true
    - job: centos7-v11.5.2-cudnn8
      optional: true

centos7-v11.5.2-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_11_5_2_only
  needs:
    - job: centos7-v11.5.2
    - job: centos7-v11.5.2-test-x86_64
      optional: true
  variables:
    <<: *centos7_11_5_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_11_5_2 == "true"'
    - if: '$all == "true"'

centos7-v11.5.2-deploy:
  <<: *deploy_definition
  <<: *centos7_11_5_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_11_5_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.5.2
      artifacts: true
    - job: centos7-v11.5.2-cudnn8
      optional: true
    - job: centos7-v11.5.2-test-x86_64
      optional: true
    - job: centos7-v11.5.2-scan-x86_64
      optional: true


.rockylinux8_11_5_2_variables: &rockylinux8_11_5_2_variables
  DIST_BASE_PATH: "dist/11.5.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "11.5.2"

.rockylinux8_11_5_2_only: &rockylinux8_11_5_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_11_5_2_variables
  rules:
    - if: '$rockylinux8_11_5_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.5.2:
  <<: *cuda_base_definition
  <<: *rockylinux8_11_5_2_only

rockylinux8-v11.5.2-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_11_5_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_11_5_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: rockylinux8-v11.5.2
      artifacts: true

rockylinux8-v11.5.2-test-arm64:
  <<: *rockylinux8_11_5_2_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_5_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_5_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.5.2
      artifacts: true
    - job: rockylinux8-v11.5.2-cudnn8
      optional: true

rockylinux8-v11.5.2-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_11_5_2_only
  needs:
    - job: rockylinux8-v11.5.2
    - job: rockylinux8-v11.5.2-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_11_5_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_5_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.5.2-test-x86_64:
  <<: *rockylinux8_11_5_2_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_5_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_5_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.5.2
      artifacts: true
    - job: rockylinux8-v11.5.2-cudnn8
      optional: true

rockylinux8-v11.5.2-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_11_5_2_only
  needs:
    - job: rockylinux8-v11.5.2
    - job: rockylinux8-v11.5.2-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_11_5_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_5_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.5.2-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_11_5_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_11_5_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.5.2
      artifacts: true
    - job: rockylinux8-v11.5.2-cudnn8
      optional: true
    - job: rockylinux8-v11.5.2-test-arm64
      optional: true
    - job: rockylinux8-v11.5.2-scan-arm64
      optional: true
    - job: rockylinux8-v11.5.2-test-x86_64
      optional: true
    - job: rockylinux8-v11.5.2-scan-x86_64
      optional: true


.ubi7_11_5_2_variables: &ubi7_11_5_2_variables
  DIST_BASE_PATH: "dist/11.5.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "11.5.2"

.ubi7_11_5_2_only: &ubi7_11_5_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_11_5_2_variables
  rules:
    - if: '$ubi7_11_5_2 == "true"'
    - if: '$all == "true"'

ubi7-v11.5.2:
  <<: *cuda_base_definition
  <<: *ubi7_11_5_2_only

ubi7-v11.5.2-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_11_5_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_11_5_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v11.5.2
      artifacts: true

ubi7-v11.5.2-test-x86_64:
  <<: *ubi7_11_5_2_only
  <<: *test_definition
  variables:
    <<: *ubi7_11_5_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_5_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.5.2
      artifacts: true
    - job: ubi7-v11.5.2-cudnn8
      optional: true

ubi7-v11.5.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_11_5_2_only
  needs:
    - job: ubi7-v11.5.2
    - job: ubi7-v11.5.2-test-x86_64
      optional: true
  variables:
    <<: *ubi7_11_5_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_5_2 == "true"'
    - if: '$all == "true"'

ubi7-v11.5.2-deploy:
  <<: *deploy_definition
  <<: *ubi7_11_5_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_11_5_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.5.2
      artifacts: true
    - job: ubi7-v11.5.2-cudnn8
      optional: true
    - job: ubi7-v11.5.2-test-x86_64
      optional: true
    - job: ubi7-v11.5.2-scan-x86_64
      optional: true


.ubi8_11_5_2_variables: &ubi8_11_5_2_variables
  DIST_BASE_PATH: "dist/11.5.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "11.5.2"

.ubi8_11_5_2_only: &ubi8_11_5_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_11_5_2_variables
  rules:
    - if: '$ubi8_11_5_2 == "true"'
    - if: '$all == "true"'

ubi8-v11.5.2:
  <<: *cuda_base_definition
  <<: *ubi8_11_5_2_only

ubi8-v11.5.2-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_11_5_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_11_5_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubi8-v11.5.2
      artifacts: true

ubi8-v11.5.2-test-arm64:
  <<: *ubi8_11_5_2_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_5_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_5_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.5.2
      artifacts: true
    - job: ubi8-v11.5.2-cudnn8
      optional: true

ubi8-v11.5.2-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_11_5_2_only
  needs:
    - job: ubi8-v11.5.2
    - job: ubi8-v11.5.2-test-arm64
      optional: true
  variables:
    <<: *ubi8_11_5_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_5_2 == "true"'
    - if: '$all == "true"'

ubi8-v11.5.2-test-x86_64:
  <<: *ubi8_11_5_2_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_5_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_5_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.5.2
      artifacts: true
    - job: ubi8-v11.5.2-cudnn8
      optional: true

ubi8-v11.5.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_11_5_2_only
  needs:
    - job: ubi8-v11.5.2
    - job: ubi8-v11.5.2-test-x86_64
      optional: true
  variables:
    <<: *ubi8_11_5_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_5_2 == "true"'
    - if: '$all == "true"'

ubi8-v11.5.2-deploy:
  <<: *deploy_definition
  <<: *ubi8_11_5_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_11_5_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.5.2
      artifacts: true
    - job: ubi8-v11.5.2-cudnn8
      optional: true
    - job: ubi8-v11.5.2-test-arm64
      optional: true
    - job: ubi8-v11.5.2-scan-arm64
      optional: true
    - job: ubi8-v11.5.2-test-x86_64
      optional: true
    - job: ubi8-v11.5.2-scan-x86_64
      optional: true


.ubuntu20_04_11_5_2_variables: &ubuntu20_04_11_5_2_variables
  DIST_BASE_PATH: "dist/11.5.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "11.5.2"

.ubuntu20_04_11_5_2_only: &ubuntu20_04_11_5_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_11_5_2_variables
  rules:
    - if: '$ubuntu20_04_11_5_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.5.2:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_11_5_2_only

ubuntu20.04-v11.5.2-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_11_5_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_11_5_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu20.04-v11.5.2
      artifacts: true

ubuntu20.04-v11.5.2-test-arm64:
  <<: *ubuntu20_04_11_5_2_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_5_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_5_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.5.2
      artifacts: true
    - job: ubuntu20.04-v11.5.2-cudnn8
      optional: true

ubuntu20.04-v11.5.2-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_5_2_only
  needs:
    - job: ubuntu20.04-v11.5.2
    - job: ubuntu20.04-v11.5.2-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_11_5_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_5_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.5.2-test-x86_64:
  <<: *ubuntu20_04_11_5_2_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_5_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_5_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.5.2
      artifacts: true
    - job: ubuntu20.04-v11.5.2-cudnn8
      optional: true

ubuntu20.04-v11.5.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_5_2_only
  needs:
    - job: ubuntu20.04-v11.5.2
    - job: ubuntu20.04-v11.5.2-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_11_5_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_5_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.5.2-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_11_5_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_11_5_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.5.2
      artifacts: true
    - job: ubuntu20.04-v11.5.2-cudnn8
      optional: true
    - job: ubuntu20.04-v11.5.2-test-arm64
      optional: true
    - job: ubuntu20.04-v11.5.2-scan-arm64
      optional: true
    - job: ubuntu20.04-v11.5.2-test-x86_64
      optional: true
    - job: ubuntu20.04-v11.5.2-scan-x86_64
      optional: true


.centos7_11_4_3_variables: &centos7_11_4_3_variables
  DIST_BASE_PATH: "dist/11.4.3"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "11.4.3"

.centos7_11_4_3_only: &centos7_11_4_3_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_11_4_3_variables
  rules:
    - if: '$centos7_11_4_3 == "true"'
    - if: '$all == "true"'

centos7-v11.4.3:
  <<: *cuda_base_definition
  <<: *centos7_11_4_3_only

centos7-v11.4.3-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_11_4_3_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_11_4_3_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v11.4.3
      artifacts: true

centos7-v11.4.3-test-x86_64:
  <<: *centos7_11_4_3_only
  <<: *test_definition
  variables:
    <<: *centos7_11_4_3_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_11_4_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.4.3
      artifacts: true
    - job: centos7-v11.4.3-cudnn8
      optional: true

centos7-v11.4.3-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_11_4_3_only
  needs:
    - job: centos7-v11.4.3
    - job: centos7-v11.4.3-test-x86_64
      optional: true
  variables:
    <<: *centos7_11_4_3_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_11_4_3 == "true"'
    - if: '$all == "true"'

centos7-v11.4.3-deploy:
  <<: *deploy_definition
  <<: *centos7_11_4_3_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_11_4_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.4.3
      artifacts: true
    - job: centos7-v11.4.3-cudnn8
      optional: true
    - job: centos7-v11.4.3-test-x86_64
      optional: true
    - job: centos7-v11.4.3-scan-x86_64
      optional: true


.rockylinux8_11_4_3_variables: &rockylinux8_11_4_3_variables
  DIST_BASE_PATH: "dist/11.4.3"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "11.4.3"

.rockylinux8_11_4_3_only: &rockylinux8_11_4_3_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_11_4_3_variables
  rules:
    - if: '$rockylinux8_11_4_3 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.4.3:
  <<: *cuda_base_definition
  <<: *rockylinux8_11_4_3_only

rockylinux8-v11.4.3-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_11_4_3_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_11_4_3_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: rockylinux8-v11.4.3
      artifacts: true

rockylinux8-v11.4.3-test-arm64:
  <<: *rockylinux8_11_4_3_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_4_3_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_4_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.4.3
      artifacts: true
    - job: rockylinux8-v11.4.3-cudnn8
      optional: true

rockylinux8-v11.4.3-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_11_4_3_only
  needs:
    - job: rockylinux8-v11.4.3
    - job: rockylinux8-v11.4.3-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_11_4_3_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_4_3 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.4.3-test-x86_64:
  <<: *rockylinux8_11_4_3_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_4_3_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_4_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.4.3
      artifacts: true
    - job: rockylinux8-v11.4.3-cudnn8
      optional: true

rockylinux8-v11.4.3-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_11_4_3_only
  needs:
    - job: rockylinux8-v11.4.3
    - job: rockylinux8-v11.4.3-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_11_4_3_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_4_3 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.4.3-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_11_4_3_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_11_4_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.4.3
      artifacts: true
    - job: rockylinux8-v11.4.3-cudnn8
      optional: true
    - job: rockylinux8-v11.4.3-test-arm64
      optional: true
    - job: rockylinux8-v11.4.3-scan-arm64
      optional: true
    - job: rockylinux8-v11.4.3-test-x86_64
      optional: true
    - job: rockylinux8-v11.4.3-scan-x86_64
      optional: true


.ubi7_11_4_3_variables: &ubi7_11_4_3_variables
  DIST_BASE_PATH: "dist/11.4.3"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "11.4.3"

.ubi7_11_4_3_only: &ubi7_11_4_3_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_11_4_3_variables
  rules:
    - if: '$ubi7_11_4_3 == "true"'
    - if: '$all == "true"'

ubi7-v11.4.3:
  <<: *cuda_base_definition
  <<: *ubi7_11_4_3_only

ubi7-v11.4.3-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_11_4_3_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_11_4_3_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v11.4.3
      artifacts: true

ubi7-v11.4.3-test-x86_64:
  <<: *ubi7_11_4_3_only
  <<: *test_definition
  variables:
    <<: *ubi7_11_4_3_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_4_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.4.3
      artifacts: true
    - job: ubi7-v11.4.3-cudnn8
      optional: true

ubi7-v11.4.3-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_11_4_3_only
  needs:
    - job: ubi7-v11.4.3
    - job: ubi7-v11.4.3-test-x86_64
      optional: true
  variables:
    <<: *ubi7_11_4_3_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_4_3 == "true"'
    - if: '$all == "true"'

ubi7-v11.4.3-deploy:
  <<: *deploy_definition
  <<: *ubi7_11_4_3_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_11_4_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.4.3
      artifacts: true
    - job: ubi7-v11.4.3-cudnn8
      optional: true
    - job: ubi7-v11.4.3-test-x86_64
      optional: true
    - job: ubi7-v11.4.3-scan-x86_64
      optional: true


.ubi8_11_4_3_variables: &ubi8_11_4_3_variables
  DIST_BASE_PATH: "dist/11.4.3"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "11.4.3"

.ubi8_11_4_3_only: &ubi8_11_4_3_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_11_4_3_variables
  rules:
    - if: '$ubi8_11_4_3 == "true"'
    - if: '$all == "true"'

ubi8-v11.4.3:
  <<: *cuda_base_definition
  <<: *ubi8_11_4_3_only

ubi8-v11.4.3-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_11_4_3_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_11_4_3_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubi8-v11.4.3
      artifacts: true

ubi8-v11.4.3-test-arm64:
  <<: *ubi8_11_4_3_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_4_3_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_4_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.4.3
      artifacts: true
    - job: ubi8-v11.4.3-cudnn8
      optional: true

ubi8-v11.4.3-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_11_4_3_only
  needs:
    - job: ubi8-v11.4.3
    - job: ubi8-v11.4.3-test-arm64
      optional: true
  variables:
    <<: *ubi8_11_4_3_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_4_3 == "true"'
    - if: '$all == "true"'

ubi8-v11.4.3-test-x86_64:
  <<: *ubi8_11_4_3_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_4_3_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_4_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.4.3
      artifacts: true
    - job: ubi8-v11.4.3-cudnn8
      optional: true

ubi8-v11.4.3-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_11_4_3_only
  needs:
    - job: ubi8-v11.4.3
    - job: ubi8-v11.4.3-test-x86_64
      optional: true
  variables:
    <<: *ubi8_11_4_3_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_4_3 == "true"'
    - if: '$all == "true"'

ubi8-v11.4.3-deploy:
  <<: *deploy_definition
  <<: *ubi8_11_4_3_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_11_4_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.4.3
      artifacts: true
    - job: ubi8-v11.4.3-cudnn8
      optional: true
    - job: ubi8-v11.4.3-test-arm64
      optional: true
    - job: ubi8-v11.4.3-scan-arm64
      optional: true
    - job: ubi8-v11.4.3-test-x86_64
      optional: true
    - job: ubi8-v11.4.3-scan-x86_64
      optional: true


.ubuntu20_04_11_4_3_variables: &ubuntu20_04_11_4_3_variables
  DIST_BASE_PATH: "dist/11.4.3"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "arm64, x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "11.4.3"

.ubuntu20_04_11_4_3_only: &ubuntu20_04_11_4_3_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_11_4_3_variables
  rules:
    - if: '$ubuntu20_04_11_4_3 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.4.3:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_11_4_3_only

ubuntu20.04-v11.4.3-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_11_4_3_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_11_4_3_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "arm64, x86_64"
  needs:
    - job: ubuntu20.04-v11.4.3
      artifacts: true

ubuntu20.04-v11.4.3-test-arm64:
  <<: *ubuntu20_04_11_4_3_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_4_3_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_4_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.4.3
      artifacts: true
    - job: ubuntu20.04-v11.4.3-cudnn8
      optional: true

ubuntu20.04-v11.4.3-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_4_3_only
  needs:
    - job: ubuntu20.04-v11.4.3
    - job: ubuntu20.04-v11.4.3-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_11_4_3_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_4_3 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.4.3-test-x86_64:
  <<: *ubuntu20_04_11_4_3_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_4_3_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_4_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.4.3
      artifacts: true
    - job: ubuntu20.04-v11.4.3-cudnn8
      optional: true

ubuntu20.04-v11.4.3-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_4_3_only
  needs:
    - job: ubuntu20.04-v11.4.3
    - job: ubuntu20.04-v11.4.3-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_11_4_3_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_4_3 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.4.3-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_11_4_3_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_11_4_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.4.3
      artifacts: true
    - job: ubuntu20.04-v11.4.3-cudnn8
      optional: true
    - job: ubuntu20.04-v11.4.3-test-arm64
      optional: true
    - job: ubuntu20.04-v11.4.3-scan-arm64
      optional: true
    - job: ubuntu20.04-v11.4.3-test-x86_64
      optional: true
    - job: ubuntu20.04-v11.4.3-scan-x86_64
      optional: true


.ubuntu20_04_11_3_1_variables: &ubuntu20_04_11_3_1_variables
  DIST_BASE_PATH: "dist/11.3.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64, arm64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "11.3.1"

.ubuntu20_04_11_3_1_only: &ubuntu20_04_11_3_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_11_3_1_variables
  rules:
    - if: '$ubuntu20_04_11_3_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.3.1:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_11_3_1_only

ubuntu20.04-v11.3.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_11_3_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_11_3_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64, arm64"
  needs:
    - job: ubuntu20.04-v11.3.1
      artifacts: true

ubuntu20.04-v11.3.1-test-x86_64:
  <<: *ubuntu20_04_11_3_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_3_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.3.1
      artifacts: true
    - job: ubuntu20.04-v11.3.1-cudnn8
      optional: true

ubuntu20.04-v11.3.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_3_1_only
  needs:
    - job: ubuntu20.04-v11.3.1
    - job: ubuntu20.04-v11.3.1-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_11_3_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_3_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.3.1-test-arm64:
  <<: *ubuntu20_04_11_3_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_3_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.3.1
      artifacts: true
    - job: ubuntu20.04-v11.3.1-cudnn8
      optional: true

ubuntu20.04-v11.3.1-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_3_1_only
  needs:
    - job: ubuntu20.04-v11.3.1
    - job: ubuntu20.04-v11.3.1-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_11_3_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_3_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.3.1-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_11_3_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_11_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.3.1
      artifacts: true
    - job: ubuntu20.04-v11.3.1-cudnn8
      optional: true
    - job: ubuntu20.04-v11.3.1-test-x86_64
      optional: true
    - job: ubuntu20.04-v11.3.1-scan-x86_64
      optional: true
    - job: ubuntu20.04-v11.3.1-test-arm64
      optional: true
    - job: ubuntu20.04-v11.3.1-scan-arm64
      optional: true


.centos7_11_3_1_variables: &centos7_11_3_1_variables
  DIST_BASE_PATH: "dist/11.3.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "11.3.1"

.centos7_11_3_1_only: &centos7_11_3_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_11_3_1_variables
  rules:
    - if: '$centos7_11_3_1 == "true"'
    - if: '$all == "true"'

centos7-v11.3.1:
  <<: *cuda_base_definition
  <<: *centos7_11_3_1_only

centos7-v11.3.1-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_11_3_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_11_3_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v11.3.1
      artifacts: true

centos7-v11.3.1-test-x86_64:
  <<: *centos7_11_3_1_only
  <<: *test_definition
  variables:
    <<: *centos7_11_3_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_11_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.3.1
      artifacts: true
    - job: centos7-v11.3.1-cudnn8
      optional: true

centos7-v11.3.1-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_11_3_1_only
  needs:
    - job: centos7-v11.3.1
    - job: centos7-v11.3.1-test-x86_64
      optional: true
  variables:
    <<: *centos7_11_3_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_11_3_1 == "true"'
    - if: '$all == "true"'

centos7-v11.3.1-deploy:
  <<: *deploy_definition
  <<: *centos7_11_3_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_11_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.3.1
      artifacts: true
    - job: centos7-v11.3.1-cudnn8
      optional: true
    - job: centos7-v11.3.1-test-x86_64
      optional: true
    - job: centos7-v11.3.1-scan-x86_64
      optional: true


.rockylinux8_11_3_1_variables: &rockylinux8_11_3_1_variables
  DIST_BASE_PATH: "dist/11.3.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64, arm64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "11.3.1"

.rockylinux8_11_3_1_only: &rockylinux8_11_3_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_11_3_1_variables
  rules:
    - if: '$rockylinux8_11_3_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.3.1:
  <<: *cuda_base_definition
  <<: *rockylinux8_11_3_1_only

rockylinux8-v11.3.1-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_11_3_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_11_3_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64, arm64"
  needs:
    - job: rockylinux8-v11.3.1
      artifacts: true

rockylinux8-v11.3.1-test-x86_64:
  <<: *rockylinux8_11_3_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_3_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.3.1
      artifacts: true
    - job: rockylinux8-v11.3.1-cudnn8
      optional: true

rockylinux8-v11.3.1-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_11_3_1_only
  needs:
    - job: rockylinux8-v11.3.1
    - job: rockylinux8-v11.3.1-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_11_3_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_3_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.3.1-test-arm64:
  <<: *rockylinux8_11_3_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_3_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.3.1
      artifacts: true
    - job: rockylinux8-v11.3.1-cudnn8
      optional: true

rockylinux8-v11.3.1-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_11_3_1_only
  needs:
    - job: rockylinux8-v11.3.1
    - job: rockylinux8-v11.3.1-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_11_3_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_3_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.3.1-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_11_3_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_11_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.3.1
      artifacts: true
    - job: rockylinux8-v11.3.1-cudnn8
      optional: true
    - job: rockylinux8-v11.3.1-test-x86_64
      optional: true
    - job: rockylinux8-v11.3.1-scan-x86_64
      optional: true
    - job: rockylinux8-v11.3.1-test-arm64
      optional: true
    - job: rockylinux8-v11.3.1-scan-arm64
      optional: true


.ubi8_11_3_1_variables: &ubi8_11_3_1_variables
  DIST_BASE_PATH: "dist/11.3.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64, arm64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "11.3.1"

.ubi8_11_3_1_only: &ubi8_11_3_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_11_3_1_variables
  rules:
    - if: '$ubi8_11_3_1 == "true"'
    - if: '$all == "true"'

ubi8-v11.3.1:
  <<: *cuda_base_definition
  <<: *ubi8_11_3_1_only

ubi8-v11.3.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_11_3_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_11_3_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64, arm64"
  needs:
    - job: ubi8-v11.3.1
      artifacts: true

ubi8-v11.3.1-test-x86_64:
  <<: *ubi8_11_3_1_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_3_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.3.1
      artifacts: true
    - job: ubi8-v11.3.1-cudnn8
      optional: true

ubi8-v11.3.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_11_3_1_only
  needs:
    - job: ubi8-v11.3.1
    - job: ubi8-v11.3.1-test-x86_64
      optional: true
  variables:
    <<: *ubi8_11_3_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_3_1 == "true"'
    - if: '$all == "true"'

ubi8-v11.3.1-test-arm64:
  <<: *ubi8_11_3_1_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_3_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.3.1
      artifacts: true
    - job: ubi8-v11.3.1-cudnn8
      optional: true

ubi8-v11.3.1-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_11_3_1_only
  needs:
    - job: ubi8-v11.3.1
    - job: ubi8-v11.3.1-test-arm64
      optional: true
  variables:
    <<: *ubi8_11_3_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_3_1 == "true"'
    - if: '$all == "true"'

ubi8-v11.3.1-deploy:
  <<: *deploy_definition
  <<: *ubi8_11_3_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_11_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.3.1
      artifacts: true
    - job: ubi8-v11.3.1-cudnn8
      optional: true
    - job: ubi8-v11.3.1-test-x86_64
      optional: true
    - job: ubi8-v11.3.1-scan-x86_64
      optional: true
    - job: ubi8-v11.3.1-test-arm64
      optional: true
    - job: ubi8-v11.3.1-scan-arm64
      optional: true


.ubi7_11_3_1_variables: &ubi7_11_3_1_variables
  DIST_BASE_PATH: "dist/11.3.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "11.3.1"

.ubi7_11_3_1_only: &ubi7_11_3_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_11_3_1_variables
  rules:
    - if: '$ubi7_11_3_1 == "true"'
    - if: '$all == "true"'

ubi7-v11.3.1:
  <<: *cuda_base_definition
  <<: *ubi7_11_3_1_only

ubi7-v11.3.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_11_3_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_11_3_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v11.3.1
      artifacts: true

ubi7-v11.3.1-test-x86_64:
  <<: *ubi7_11_3_1_only
  <<: *test_definition
  variables:
    <<: *ubi7_11_3_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.3.1
      artifacts: true
    - job: ubi7-v11.3.1-cudnn8
      optional: true

ubi7-v11.3.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_11_3_1_only
  needs:
    - job: ubi7-v11.3.1
    - job: ubi7-v11.3.1-test-x86_64
      optional: true
  variables:
    <<: *ubi7_11_3_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_3_1 == "true"'
    - if: '$all == "true"'

ubi7-v11.3.1-deploy:
  <<: *deploy_definition
  <<: *ubi7_11_3_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_11_3_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.3.1
      artifacts: true
    - job: ubi7-v11.3.1-cudnn8
      optional: true
    - job: ubi7-v11.3.1-test-x86_64
      optional: true
    - job: ubi7-v11.3.1-scan-x86_64
      optional: true


.ubuntu20_04_11_2_2_variables: &ubuntu20_04_11_2_2_variables
  DIST_BASE_PATH: "dist/11.2.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64, arm64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "11.2.2"

.ubuntu20_04_11_2_2_only: &ubuntu20_04_11_2_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_11_2_2_variables
  rules:
    - if: '$ubuntu20_04_11_2_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.2.2:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_11_2_2_only

ubuntu20.04-v11.2.2-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_11_2_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_11_2_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64, arm64"
  needs:
    - job: ubuntu20.04-v11.2.2
      artifacts: true

ubuntu20.04-v11.2.2-test-x86_64:
  <<: *ubuntu20_04_11_2_2_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_2_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.2.2
      artifacts: true
    - job: ubuntu20.04-v11.2.2-cudnn8
      optional: true

ubuntu20.04-v11.2.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_2_2_only
  needs:
    - job: ubuntu20.04-v11.2.2
    - job: ubuntu20.04-v11.2.2-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_11_2_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_2_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.2.2-test-arm64:
  <<: *ubuntu20_04_11_2_2_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_2_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.2.2
      artifacts: true
    - job: ubuntu20.04-v11.2.2-cudnn8
      optional: true

ubuntu20.04-v11.2.2-scan-arm64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_2_2_only
  needs:
    - job: ubuntu20.04-v11.2.2
    - job: ubuntu20.04-v11.2.2-test-arm64
      optional: true
  variables:
    <<: *ubuntu20_04_11_2_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_2_2 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.2.2-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_11_2_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_11_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.2.2
      artifacts: true
    - job: ubuntu20.04-v11.2.2-cudnn8
      optional: true
    - job: ubuntu20.04-v11.2.2-test-x86_64
      optional: true
    - job: ubuntu20.04-v11.2.2-scan-x86_64
      optional: true
    - job: ubuntu20.04-v11.2.2-test-arm64
      optional: true
    - job: ubuntu20.04-v11.2.2-scan-arm64
      optional: true


.centos7_11_2_2_variables: &centos7_11_2_2_variables
  DIST_BASE_PATH: "dist/11.2.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "11.2.2"

.centos7_11_2_2_only: &centos7_11_2_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_11_2_2_variables
  rules:
    - if: '$centos7_11_2_2 == "true"'
    - if: '$all == "true"'

centos7-v11.2.2:
  <<: *cuda_base_definition
  <<: *centos7_11_2_2_only

centos7-v11.2.2-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_11_2_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_11_2_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v11.2.2
      artifacts: true

centos7-v11.2.2-test-x86_64:
  <<: *centos7_11_2_2_only
  <<: *test_definition
  variables:
    <<: *centos7_11_2_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_11_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.2.2
      artifacts: true
    - job: centos7-v11.2.2-cudnn8
      optional: true

centos7-v11.2.2-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_11_2_2_only
  needs:
    - job: centos7-v11.2.2
    - job: centos7-v11.2.2-test-x86_64
      optional: true
  variables:
    <<: *centos7_11_2_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_11_2_2 == "true"'
    - if: '$all == "true"'

centos7-v11.2.2-deploy:
  <<: *deploy_definition
  <<: *centos7_11_2_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_11_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.2.2
      artifacts: true
    - job: centos7-v11.2.2-cudnn8
      optional: true
    - job: centos7-v11.2.2-test-x86_64
      optional: true
    - job: centos7-v11.2.2-scan-x86_64
      optional: true


.rockylinux8_11_2_2_variables: &rockylinux8_11_2_2_variables
  DIST_BASE_PATH: "dist/11.2.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64, arm64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "11.2.2"

.rockylinux8_11_2_2_only: &rockylinux8_11_2_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_11_2_2_variables
  rules:
    - if: '$rockylinux8_11_2_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.2.2:
  <<: *cuda_base_definition
  <<: *rockylinux8_11_2_2_only

rockylinux8-v11.2.2-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_11_2_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_11_2_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64, arm64"
  needs:
    - job: rockylinux8-v11.2.2
      artifacts: true

rockylinux8-v11.2.2-test-x86_64:
  <<: *rockylinux8_11_2_2_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_2_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.2.2
      artifacts: true
    - job: rockylinux8-v11.2.2-cudnn8
      optional: true

rockylinux8-v11.2.2-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_11_2_2_only
  needs:
    - job: rockylinux8-v11.2.2
    - job: rockylinux8-v11.2.2-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_11_2_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_2_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.2.2-test-arm64:
  <<: *rockylinux8_11_2_2_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_2_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.2.2
      artifacts: true
    - job: rockylinux8-v11.2.2-cudnn8
      optional: true

rockylinux8-v11.2.2-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_11_2_2_only
  needs:
    - job: rockylinux8-v11.2.2
    - job: rockylinux8-v11.2.2-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_11_2_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_2_2 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.2.2-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_11_2_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_11_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.2.2
      artifacts: true
    - job: rockylinux8-v11.2.2-cudnn8
      optional: true
    - job: rockylinux8-v11.2.2-test-x86_64
      optional: true
    - job: rockylinux8-v11.2.2-scan-x86_64
      optional: true
    - job: rockylinux8-v11.2.2-test-arm64
      optional: true
    - job: rockylinux8-v11.2.2-scan-arm64
      optional: true


.ubi8_11_2_2_variables: &ubi8_11_2_2_variables
  DIST_BASE_PATH: "dist/11.2.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64, arm64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "11.2.2"

.ubi8_11_2_2_only: &ubi8_11_2_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_11_2_2_variables
  rules:
    - if: '$ubi8_11_2_2 == "true"'
    - if: '$all == "true"'

ubi8-v11.2.2:
  <<: *cuda_base_definition
  <<: *ubi8_11_2_2_only

ubi8-v11.2.2-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_11_2_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_11_2_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64, arm64"
  needs:
    - job: ubi8-v11.2.2
      artifacts: true

ubi8-v11.2.2-test-x86_64:
  <<: *ubi8_11_2_2_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_2_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.2.2
      artifacts: true
    - job: ubi8-v11.2.2-cudnn8
      optional: true

ubi8-v11.2.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_11_2_2_only
  needs:
    - job: ubi8-v11.2.2
    - job: ubi8-v11.2.2-test-x86_64
      optional: true
  variables:
    <<: *ubi8_11_2_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_2_2 == "true"'
    - if: '$all == "true"'

ubi8-v11.2.2-test-arm64:
  <<: *ubi8_11_2_2_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_2_2_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.2.2
      artifacts: true
    - job: ubi8-v11.2.2-cudnn8
      optional: true

ubi8-v11.2.2-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_11_2_2_only
  needs:
    - job: ubi8-v11.2.2
    - job: ubi8-v11.2.2-test-arm64
      optional: true
  variables:
    <<: *ubi8_11_2_2_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_2_2 == "true"'
    - if: '$all == "true"'

ubi8-v11.2.2-deploy:
  <<: *deploy_definition
  <<: *ubi8_11_2_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_11_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.2.2
      artifacts: true
    - job: ubi8-v11.2.2-cudnn8
      optional: true
    - job: ubi8-v11.2.2-test-x86_64
      optional: true
    - job: ubi8-v11.2.2-scan-x86_64
      optional: true
    - job: ubi8-v11.2.2-test-arm64
      optional: true
    - job: ubi8-v11.2.2-scan-arm64
      optional: true


.ubi7_11_2_2_variables: &ubi7_11_2_2_variables
  DIST_BASE_PATH: "dist/11.2.2"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "11.2.2"

.ubi7_11_2_2_only: &ubi7_11_2_2_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_11_2_2_variables
  rules:
    - if: '$ubi7_11_2_2 == "true"'
    - if: '$all == "true"'

ubi7-v11.2.2:
  <<: *cuda_base_definition
  <<: *ubi7_11_2_2_only

ubi7-v11.2.2-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_11_2_2_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_11_2_2_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v11.2.2
      artifacts: true

ubi7-v11.2.2-test-x86_64:
  <<: *ubi7_11_2_2_only
  <<: *test_definition
  variables:
    <<: *ubi7_11_2_2_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.2.2
      artifacts: true
    - job: ubi7-v11.2.2-cudnn8
      optional: true

ubi7-v11.2.2-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_11_2_2_only
  needs:
    - job: ubi7-v11.2.2
    - job: ubi7-v11.2.2-test-x86_64
      optional: true
  variables:
    <<: *ubi7_11_2_2_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_2_2 == "true"'
    - if: '$all == "true"'

ubi7-v11.2.2-deploy:
  <<: *deploy_definition
  <<: *ubi7_11_2_2_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_11_2_2 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.2.2
      artifacts: true
    - job: ubi7-v11.2.2-cudnn8
      optional: true
    - job: ubi7-v11.2.2-test-x86_64
      optional: true
    - job: ubi7-v11.2.2-scan-x86_64
      optional: true


.ubuntu20_04_11_1_1_variables: &ubuntu20_04_11_1_1_variables
  DIST_BASE_PATH: "dist/11.1.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "11.1.1"

.ubuntu20_04_11_1_1_only: &ubuntu20_04_11_1_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_11_1_1_variables
  rules:
    - if: '$ubuntu20_04_11_1_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.1.1:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_11_1_1_only

ubuntu20.04-v11.1.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_11_1_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_11_1_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubuntu20.04-v11.1.1
      artifacts: true

ubuntu20.04-v11.1.1-test-x86_64:
  <<: *ubuntu20_04_11_1_1_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_1_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.1.1
      artifacts: true
    - job: ubuntu20.04-v11.1.1-cudnn8
      optional: true

ubuntu20.04-v11.1.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_1_1_only
  needs:
    - job: ubuntu20.04-v11.1.1
    - job: ubuntu20.04-v11.1.1-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_11_1_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_1_1 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.1.1-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_11_1_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_11_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.1.1
      artifacts: true
    - job: ubuntu20.04-v11.1.1-cudnn8
      optional: true
    - job: ubuntu20.04-v11.1.1-test-x86_64
      optional: true
    - job: ubuntu20.04-v11.1.1-scan-x86_64
      optional: true


.centos7_11_1_1_variables: &centos7_11_1_1_variables
  DIST_BASE_PATH: "dist/11.1.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "11.1.1"

.centos7_11_1_1_only: &centos7_11_1_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_11_1_1_variables
  rules:
    - if: '$centos7_11_1_1 == "true"'
    - if: '$all == "true"'

centos7-v11.1.1:
  <<: *cuda_base_definition
  <<: *centos7_11_1_1_only

centos7-v11.1.1-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_11_1_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_11_1_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v11.1.1
      artifacts: true

centos7-v11.1.1-test-x86_64:
  <<: *centos7_11_1_1_only
  <<: *test_definition
  variables:
    <<: *centos7_11_1_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_11_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.1.1
      artifacts: true
    - job: centos7-v11.1.1-cudnn8
      optional: true

centos7-v11.1.1-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_11_1_1_only
  needs:
    - job: centos7-v11.1.1
    - job: centos7-v11.1.1-test-x86_64
      optional: true
  variables:
    <<: *centos7_11_1_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_11_1_1 == "true"'
    - if: '$all == "true"'

centos7-v11.1.1-deploy:
  <<: *deploy_definition
  <<: *centos7_11_1_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_11_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.1.1
      artifacts: true
    - job: centos7-v11.1.1-cudnn8
      optional: true
    - job: centos7-v11.1.1-test-x86_64
      optional: true
    - job: centos7-v11.1.1-scan-x86_64
      optional: true


.rockylinux8_11_1_1_variables: &rockylinux8_11_1_1_variables
  DIST_BASE_PATH: "dist/11.1.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64, arm64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "11.1.1"

.rockylinux8_11_1_1_only: &rockylinux8_11_1_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_11_1_1_variables
  rules:
    - if: '$rockylinux8_11_1_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.1.1:
  <<: *cuda_base_definition
  <<: *rockylinux8_11_1_1_only

rockylinux8-v11.1.1-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_11_1_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_11_1_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64, arm64"
  needs:
    - job: rockylinux8-v11.1.1
      artifacts: true

rockylinux8-v11.1.1-test-x86_64:
  <<: *rockylinux8_11_1_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_1_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.1.1
      artifacts: true
    - job: rockylinux8-v11.1.1-cudnn8
      optional: true

rockylinux8-v11.1.1-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_11_1_1_only
  needs:
    - job: rockylinux8-v11.1.1
    - job: rockylinux8-v11.1.1-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_11_1_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_1_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.1.1-test-arm64:
  <<: *rockylinux8_11_1_1_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_1_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.1.1
      artifacts: true
    - job: rockylinux8-v11.1.1-cudnn8
      optional: true

rockylinux8-v11.1.1-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_11_1_1_only
  needs:
    - job: rockylinux8-v11.1.1
    - job: rockylinux8-v11.1.1-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_11_1_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_1_1 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.1.1-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_11_1_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_11_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.1.1
      artifacts: true
    - job: rockylinux8-v11.1.1-cudnn8
      optional: true
    - job: rockylinux8-v11.1.1-test-x86_64
      optional: true
    - job: rockylinux8-v11.1.1-scan-x86_64
      optional: true
    - job: rockylinux8-v11.1.1-test-arm64
      optional: true
    - job: rockylinux8-v11.1.1-scan-arm64
      optional: true


.ubi8_11_1_1_variables: &ubi8_11_1_1_variables
  DIST_BASE_PATH: "dist/11.1.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64, arm64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "11.1.1"

.ubi8_11_1_1_only: &ubi8_11_1_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_11_1_1_variables
  rules:
    - if: '$ubi8_11_1_1 == "true"'
    - if: '$all == "true"'

ubi8-v11.1.1:
  <<: *cuda_base_definition
  <<: *ubi8_11_1_1_only

ubi8-v11.1.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_11_1_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_11_1_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64, arm64"
  needs:
    - job: ubi8-v11.1.1
      artifacts: true

ubi8-v11.1.1-test-x86_64:
  <<: *ubi8_11_1_1_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_1_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.1.1
      artifacts: true
    - job: ubi8-v11.1.1-cudnn8
      optional: true

ubi8-v11.1.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_11_1_1_only
  needs:
    - job: ubi8-v11.1.1
    - job: ubi8-v11.1.1-test-x86_64
      optional: true
  variables:
    <<: *ubi8_11_1_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_1_1 == "true"'
    - if: '$all == "true"'

ubi8-v11.1.1-test-arm64:
  <<: *ubi8_11_1_1_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_1_1_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.1.1
      artifacts: true
    - job: ubi8-v11.1.1-cudnn8
      optional: true

ubi8-v11.1.1-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_11_1_1_only
  needs:
    - job: ubi8-v11.1.1
    - job: ubi8-v11.1.1-test-arm64
      optional: true
  variables:
    <<: *ubi8_11_1_1_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_1_1 == "true"'
    - if: '$all == "true"'

ubi8-v11.1.1-deploy:
  <<: *deploy_definition
  <<: *ubi8_11_1_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_11_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.1.1
      artifacts: true
    - job: ubi8-v11.1.1-cudnn8
      optional: true
    - job: ubi8-v11.1.1-test-x86_64
      optional: true
    - job: ubi8-v11.1.1-scan-x86_64
      optional: true
    - job: ubi8-v11.1.1-test-arm64
      optional: true
    - job: ubi8-v11.1.1-scan-arm64
      optional: true


.ubi7_11_1_1_variables: &ubi7_11_1_1_variables
  DIST_BASE_PATH: "dist/11.1.1"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "11.1.1"

.ubi7_11_1_1_only: &ubi7_11_1_1_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_11_1_1_variables
  rules:
    - if: '$ubi7_11_1_1 == "true"'
    - if: '$all == "true"'

ubi7-v11.1.1:
  <<: *cuda_base_definition
  <<: *ubi7_11_1_1_only

ubi7-v11.1.1-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_11_1_1_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_11_1_1_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v11.1.1
      artifacts: true

ubi7-v11.1.1-test-x86_64:
  <<: *ubi7_11_1_1_only
  <<: *test_definition
  variables:
    <<: *ubi7_11_1_1_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.1.1
      artifacts: true
    - job: ubi7-v11.1.1-cudnn8
      optional: true

ubi7-v11.1.1-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_11_1_1_only
  needs:
    - job: ubi7-v11.1.1
    - job: ubi7-v11.1.1-test-x86_64
      optional: true
  variables:
    <<: *ubi7_11_1_1_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_1_1 == "true"'
    - if: '$all == "true"'

ubi7-v11.1.1-deploy:
  <<: *deploy_definition
  <<: *ubi7_11_1_1_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_11_1_1 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.1.1
      artifacts: true
    - job: ubi7-v11.1.1-cudnn8
      optional: true
    - job: ubi7-v11.1.1-test-x86_64
      optional: true
    - job: ubi7-v11.1.1-scan-x86_64
      optional: true


.ubuntu20_04_11_0_3_variables: &ubuntu20_04_11_0_3_variables
  DIST_BASE_PATH: "dist/11.0.3"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubuntu20.04"
  OS_NAME: "ubuntu"
  OS_VERSION: "20.04"
  CUDA_VERSION: "11.0.3"

.ubuntu20_04_11_0_3_only: &ubuntu20_04_11_0_3_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubuntu20_04_11_0_3_variables
  rules:
    - if: '$ubuntu20_04_11_0_3 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.0.3:
  <<: *cuda_base_definition
  <<: *ubuntu20_04_11_0_3_only

ubuntu20.04-v11.0.3-cudnn8:
  <<: *cudnn_definition
  <<: *ubuntu20_04_11_0_3_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubuntu20_04_11_0_3_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubuntu20.04-v11.0.3
      artifacts: true

ubuntu20.04-v11.0.3-test-x86_64:
  <<: *ubuntu20_04_11_0_3_only
  <<: *test_definition
  variables:
    <<: *ubuntu20_04_11_0_3_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_0_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.0.3
      artifacts: true
    - job: ubuntu20.04-v11.0.3-cudnn8
      optional: true

ubuntu20.04-v11.0.3-scan-x86_64:
  <<: *scan_definition
  <<: *ubuntu20_04_11_0_3_only
  needs:
    - job: ubuntu20.04-v11.0.3
    - job: ubuntu20.04-v11.0.3-test-x86_64
      optional: true
  variables:
    <<: *ubuntu20_04_11_0_3_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubuntu20_04_11_0_3 == "true"'
    - if: '$all == "true"'

ubuntu20.04-v11.0.3-deploy:
  <<: *deploy_definition
  <<: *ubuntu20_04_11_0_3_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubuntu20_04_11_0_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubuntu20.04-v11.0.3
      artifacts: true
    - job: ubuntu20.04-v11.0.3-cudnn8
      optional: true
    - job: ubuntu20.04-v11.0.3-test-x86_64
      optional: true
    - job: ubuntu20.04-v11.0.3-scan-x86_64
      optional: true


.centos7_11_0_3_variables: &centos7_11_0_3_variables
  DIST_BASE_PATH: "dist/11.0.3"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "centos7"
  OS_NAME: "centos"
  OS_VERSION: "7"
  CUDA_VERSION: "11.0.3"

.centos7_11_0_3_only: &centos7_11_0_3_only
  <<: *tags_definition_multiarch
  variables:
    <<: *centos7_11_0_3_variables
  rules:
    - if: '$centos7_11_0_3 == "true"'
    - if: '$all == "true"'

centos7-v11.0.3:
  <<: *cuda_base_definition
  <<: *centos7_11_0_3_only

centos7-v11.0.3-cudnn8:
  <<: *cudnn_definition
  <<: *centos7_11_0_3_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *centos7_11_0_3_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: centos7-v11.0.3
      artifacts: true

centos7-v11.0.3-test-x86_64:
  <<: *centos7_11_0_3_only
  <<: *test_definition
  variables:
    <<: *centos7_11_0_3_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$centos7_11_0_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.0.3
      artifacts: true
    - job: centos7-v11.0.3-cudnn8
      optional: true

centos7-v11.0.3-scan-x86_64:
  <<: *scan_definition
  <<: *centos7_11_0_3_only
  needs:
    - job: centos7-v11.0.3
    - job: centos7-v11.0.3-test-x86_64
      optional: true
  variables:
    <<: *centos7_11_0_3_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$centos7_11_0_3 == "true"'
    - if: '$all == "true"'

centos7-v11.0.3-deploy:
  <<: *deploy_definition
  <<: *centos7_11_0_3_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$centos7_11_0_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: centos7-v11.0.3
      artifacts: true
    - job: centos7-v11.0.3-cudnn8
      optional: true
    - job: centos7-v11.0.3-test-x86_64
      optional: true
    - job: centos7-v11.0.3-scan-x86_64
      optional: true


.rockylinux8_11_0_3_variables: &rockylinux8_11_0_3_variables
  DIST_BASE_PATH: "dist/11.0.3"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64, arm64"
  OS: "rockylinux8"
  OS_NAME: "rockylinux"
  OS_VERSION: "8"
  CUDA_VERSION: "11.0.3"

.rockylinux8_11_0_3_only: &rockylinux8_11_0_3_only
  <<: *tags_definition_multiarch
  variables:
    <<: *rockylinux8_11_0_3_variables
  rules:
    - if: '$rockylinux8_11_0_3 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.0.3:
  <<: *cuda_base_definition
  <<: *rockylinux8_11_0_3_only

rockylinux8-v11.0.3-cudnn8:
  <<: *cudnn_definition
  <<: *rockylinux8_11_0_3_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *rockylinux8_11_0_3_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: rockylinux8-v11.0.3
      artifacts: true

rockylinux8-v11.0.3-test-x86_64:
  <<: *rockylinux8_11_0_3_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_0_3_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_0_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.0.3
      artifacts: true
    - job: rockylinux8-v11.0.3-cudnn8
      optional: true

rockylinux8-v11.0.3-scan-x86_64:
  <<: *scan_definition
  <<: *rockylinux8_11_0_3_only
  needs:
    - job: rockylinux8-v11.0.3
    - job: rockylinux8-v11.0.3-test-x86_64
      optional: true
  variables:
    <<: *rockylinux8_11_0_3_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_0_3 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.0.3-test-arm64:
  <<: *rockylinux8_11_0_3_only
  <<: *test_definition
  variables:
    <<: *rockylinux8_11_0_3_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_0_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.0.3
      artifacts: true
    - job: rockylinux8-v11.0.3-cudnn8
      optional: true

rockylinux8-v11.0.3-scan-arm64:
  <<: *scan_definition
  <<: *rockylinux8_11_0_3_only
  needs:
    - job: rockylinux8-v11.0.3
    - job: rockylinux8-v11.0.3-test-arm64
      optional: true
  variables:
    <<: *rockylinux8_11_0_3_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$rockylinux8_11_0_3 == "true"'
    - if: '$all == "true"'

rockylinux8-v11.0.3-deploy:
  <<: *deploy_definition
  <<: *rockylinux8_11_0_3_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$rockylinux8_11_0_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: rockylinux8-v11.0.3
      artifacts: true
    - job: rockylinux8-v11.0.3-cudnn8
      optional: true
    - job: rockylinux8-v11.0.3-test-x86_64
      optional: true
    - job: rockylinux8-v11.0.3-scan-x86_64
      optional: true
    - job: rockylinux8-v11.0.3-test-arm64
      optional: true
    - job: rockylinux8-v11.0.3-scan-arm64
      optional: true


.ubi8_11_0_3_variables: &ubi8_11_0_3_variables
  DIST_BASE_PATH: "dist/11.0.3"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64, arm64"
  OS: "ubi8"
  OS_NAME: "ubi"
  OS_VERSION: "8"
  CUDA_VERSION: "11.0.3"

.ubi8_11_0_3_only: &ubi8_11_0_3_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi8_11_0_3_variables
  rules:
    - if: '$ubi8_11_0_3 == "true"'
    - if: '$all == "true"'

ubi8-v11.0.3:
  <<: *cuda_base_definition
  <<: *ubi8_11_0_3_only

ubi8-v11.0.3-cudnn8:
  <<: *cudnn_definition
  <<: *ubi8_11_0_3_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi8_11_0_3_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi8-v11.0.3
      artifacts: true

ubi8-v11.0.3-test-x86_64:
  <<: *ubi8_11_0_3_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_0_3_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_0_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.0.3
      artifacts: true
    - job: ubi8-v11.0.3-cudnn8
      optional: true

ubi8-v11.0.3-scan-x86_64:
  <<: *scan_definition
  <<: *ubi8_11_0_3_only
  needs:
    - job: ubi8-v11.0.3
    - job: ubi8-v11.0.3-test-x86_64
      optional: true
  variables:
    <<: *ubi8_11_0_3_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_0_3 == "true"'
    - if: '$all == "true"'

ubi8-v11.0.3-test-arm64:
  <<: *ubi8_11_0_3_only
  <<: *test_definition
  variables:
    <<: *ubi8_11_0_3_variables
    ARCH: "arm64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_0_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.0.3
      artifacts: true
    - job: ubi8-v11.0.3-cudnn8
      optional: true

ubi8-v11.0.3-scan-arm64:
  <<: *scan_definition
  <<: *ubi8_11_0_3_only
  needs:
    - job: ubi8-v11.0.3
    - job: ubi8-v11.0.3-test-arm64
      optional: true
  variables:
    <<: *ubi8_11_0_3_variables
    ARCH: "arm64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi8_11_0_3 == "true"'
    - if: '$all == "true"'

ubi8-v11.0.3-deploy:
  <<: *deploy_definition
  <<: *ubi8_11_0_3_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi8_11_0_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi8-v11.0.3
      artifacts: true
    - job: ubi8-v11.0.3-cudnn8
      optional: true
    - job: ubi8-v11.0.3-test-x86_64
      optional: true
    - job: ubi8-v11.0.3-scan-x86_64
      optional: true
    - job: ubi8-v11.0.3-test-arm64
      optional: true
    - job: ubi8-v11.0.3-scan-arm64
      optional: true


.ubi7_11_0_3_variables: &ubi7_11_0_3_variables
  DIST_BASE_PATH: "dist/11.0.3"
  IMAGE_NAME: "gitlab-master.nvidia.com:5005/cuda-installer/cuda"
  MANIFEST: "manifests/cuda.yaml"
  ARCHES: "x86_64"
  OS: "ubi7"
  OS_NAME: "ubi"
  OS_VERSION: "7"
  CUDA_VERSION: "11.0.3"

.ubi7_11_0_3_only: &ubi7_11_0_3_only
  <<: *tags_definition_multiarch
  variables:
    <<: *ubi7_11_0_3_variables
  rules:
    - if: '$ubi7_11_0_3 == "true"'
    - if: '$all == "true"'

ubi7-v11.0.3:
  <<: *cuda_base_definition
  <<: *ubi7_11_0_3_only

ubi7-v11.0.3-cudnn8:
  <<: *cudnn_definition
  <<: *ubi7_11_0_3_only
  # Variables overwritten here. Don't move this section.
  variables:
    <<: *ubi7_11_0_3_variables
    CUDNN_VERSION: "cudnn8"
    ARCHES: "x86_64"
  needs:
    - job: ubi7-v11.0.3
      artifacts: true

ubi7-v11.0.3-test-x86_64:
  <<: *ubi7_11_0_3_only
  <<: *test_definition
  variables:
    <<: *ubi7_11_0_3_variables
    ARCH: "x86_64"
  rules:
    - if: '$NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_0_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.0.3
      artifacts: true
    - job: ubi7-v11.0.3-cudnn8
      optional: true

ubi7-v11.0.3-scan-x86_64:
  <<: *scan_definition
  <<: *ubi7_11_0_3_only
  needs:
    - job: ubi7-v11.0.3
    - job: ubi7-v11.0.3-test-x86_64
      optional: true
  variables:
    <<: *ubi7_11_0_3_variables
    ARCH: "x86_64"
  # Override rules from only definition
  rules:
    - if: '$NO_SCAN == "true" || $NO_TEST == "true"'
      when: never
    - if: '$ubi7_11_0_3 == "true"'
    - if: '$all == "true"'

ubi7-v11.0.3-deploy:
  <<: *deploy_definition
  <<: *ubi7_11_0_3_only
  # Override rules from only definition
  rules:
    - if: '($NO_TEST == "true" || $NO_SCAN == "true") && $NO_PUSH == "false"'
      when: never
    - if: '$ubi7_11_0_3 == "true"'
    - if: '$all == "true"'
  needs:
    - job: ubi7-v11.0.3
      artifacts: true
    - job: ubi7-v11.0.3-cudnn8
      optional: true
    - job: ubi7-v11.0.3-test-x86_64
      optional: true
    - job: ubi7-v11.0.3-scan-x86_64
      optional: true

